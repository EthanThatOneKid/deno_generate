[
  {
    "kind": "interface",
    "name": "ImportMeta",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 13,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "Deno provides extra properties on `import.meta`. These are included here\nto ensure that these are still available when using the Deno namespace in\nconjunction with other type libs, like `dom`.\n",
      "tags": [
        {
          "kind": "category",
          "doc": "ES Modules"
        }
      ]
    },
    "interfaceDef": {
      "extends": [],
      "methods": [
        {
          "name": "resolve",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 50,
            "col": 2
          },
          "jsDoc": {
            "doc": "A function that returns resolved specifier as if it would be imported\nusing `import(specifier)`.\n\n```ts\nconsole.log(import.meta.resolve(\"./foo.js\"));\n// file:///dev/foo.js\n```"
          },
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "specifier",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            }
          ],
          "returnType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "typeParams": []
        }
      ],
      "properties": [
        {
          "name": "url",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 29,
            "col": 2
          },
          "jsDoc": {
            "doc": "A string representation of the fully qualified module URL. When the\nmodule is loaded locally, the value will be a file URL (e.g.\n`file:///path/module.ts`).\n\nYou can also parse the string as a URL to determine more information about\nhow the current module was loaded. For example to determine if a module was\nlocal or not:\n\n```ts\nconst url = new URL(import.meta.url);\nif (url.protocol === \"file:\") {\n  console.log(\"this module was loaded locally\");\n}\n```"
          },
          "params": [],
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "typeParams": []
        },
        {
          "name": "main",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 40,
            "col": 2
          },
          "jsDoc": {
            "doc": "A flag that indicates if the current module is the main module that was\ncalled when starting the program under Deno.\n\n```ts\nif (import.meta.main) {\n  // this was loaded as the main module, maybe do some bootstrapping\n}\n```"
          },
          "params": [],
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "interface",
    "name": "Performance",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 62,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "Deno supports [User Timing Level 3](https://w3c.github.io/user-timing)\nwhich is not widely supported yet in other runtimes.\n\nCheck out the\n[Performance API](https://developer.mozilla.org/en-US/docs/Web/API/Performance)\ndocumentation on MDN for further information about how to use the API.\n",
      "tags": [
        {
          "kind": "category",
          "doc": "Performance"
        }
      ]
    },
    "interfaceDef": {
      "extends": [],
      "methods": [
        {
          "name": "mark",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 64,
            "col": 2
          },
          "jsDoc": {
            "doc": "Stores a timestamp with the associated name (a \"mark\")."
          },
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "markName",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "options",
              "optional": true,
              "tsType": {
                "repr": "PerformanceMarkOptions",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "PerformanceMarkOptions"
                }
              }
            }
          ],
          "returnType": {
            "repr": "PerformanceMark",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "PerformanceMark"
            }
          },
          "typeParams": []
        },
        {
          "name": "measure",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 68,
            "col": 2
          },
          "jsDoc": {
            "doc": "Stores the `DOMHighResTimeStamp` duration between two marks along with the\nassociated name (a \"measure\")."
          },
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "measureName",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "options",
              "optional": true,
              "tsType": {
                "repr": "PerformanceMeasureOptions",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "PerformanceMeasureOptions"
                }
              }
            }
          ],
          "returnType": {
            "repr": "PerformanceMeasure",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "PerformanceMeasure"
            }
          },
          "typeParams": []
        }
      ],
      "properties": [],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "interface",
    "name": "PerformanceMarkOptions",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 82,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "Options which are used in conjunction with `performance.mark`. Check out the\nMDN\n[`performance.mark()`](https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark#markoptions)\ndocumentation for more details.\n",
      "tags": [
        {
          "kind": "category",
          "doc": "Performance"
        }
      ]
    },
    "interfaceDef": {
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "detail",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 85,
            "col": 2
          },
          "jsDoc": {
            "doc": "Metadata to be included in the mark."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "any",
            "kind": "keyword",
            "keyword": "any"
          },
          "typeParams": []
        },
        {
          "name": "startTime",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 88,
            "col": 2
          },
          "jsDoc": {
            "doc": "Timestamp to be used as the mark time."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "interface",
    "name": "PerformanceMeasureOptions",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 99,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "Options which are used in conjunction with `performance.measure`. Check out the\nMDN\n[`performance.mark()`](https://developer.mozilla.org/en-US/docs/Web/API/Performance/measure#measureoptions)\ndocumentation for more details.\n",
      "tags": [
        {
          "kind": "category",
          "doc": "Performance"
        }
      ]
    },
    "interfaceDef": {
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "detail",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 102,
            "col": 2
          },
          "jsDoc": {
            "doc": "Metadata to be included in the measure."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "any",
            "kind": "keyword",
            "keyword": "any"
          },
          "typeParams": []
        },
        {
          "name": "start",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 106,
            "col": 2
          },
          "jsDoc": {
            "doc": "Timestamp to be used as the start time or string to be used as start\nmark."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "number",
                "kind": "keyword",
                "keyword": "number"
              }
            ]
          },
          "typeParams": []
        },
        {
          "name": "duration",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 109,
            "col": 2
          },
          "jsDoc": {
            "doc": "Duration between the start and end times."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "typeParams": []
        },
        {
          "name": "end",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 112,
            "col": 2
          },
          "jsDoc": {
            "doc": "Timestamp to be used as the end time or string to be used as end mark."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "number",
                "kind": "keyword",
                "keyword": "number"
              }
            ]
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "namespace",
    "name": "Deno",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 116,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "The global namespace where Deno specific, non-standard APIs are located."
    },
    "namespaceDef": {
      "elements": [
        {
          "kind": "namespace",
          "name": "errors",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 138,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "A set of error constructors that are raised by Deno APIs.\n\nCan be used to provide more specific handling of failures within code\nwhich is using Deno APIs. For example, handling attempting to open a file\nwhich does not exist:\n\n```ts\ntry {\n  const file = await Deno.open(\"./some/file.txt\");\n} catch (error) {\n  if (error instanceof Deno.errors.NotFound) {\n    console.error(\"the file was not found\");\n  } else {\n    // otherwise re-throw\n    throw error;\n  }\n}\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Errors"
              }
            ]
          },
          "namespaceDef": {
            "elements": [
              {
                "kind": "class",
                "name": "NotFound",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 144,
                  "col": 4
                },
                "declarationKind": "export",
                "jsDoc": {
                  "doc": "Raised when the underlying operating system indicates that the file\nwas not found.\n",
                  "tags": [
                    {
                      "kind": "category",
                      "doc": "Errors"
                    }
                  ]
                },
                "classDef": {
                  "isAbstract": false,
                  "constructors": [],
                  "properties": [],
                  "indexSignatures": [],
                  "methods": [],
                  "extends": "Error",
                  "implements": [],
                  "typeParams": [],
                  "superTypeParams": []
                }
              },
              {
                "kind": "class",
                "name": "PermissionDenied",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 152,
                  "col": 4
                },
                "declarationKind": "export",
                "jsDoc": {
                  "doc": "Raised when the underlying operating system indicates the current user\nwhich the Deno process is running under does not have the appropriate\npermissions to a file or resource, or the user _did not_ provide required\n`--allow-*` flag.\n",
                  "tags": [
                    {
                      "kind": "category",
                      "doc": "Errors"
                    }
                  ]
                },
                "classDef": {
                  "isAbstract": false,
                  "constructors": [],
                  "properties": [],
                  "indexSignatures": [],
                  "methods": [],
                  "extends": "Error",
                  "implements": [],
                  "typeParams": [],
                  "superTypeParams": []
                }
              },
              {
                "kind": "class",
                "name": "ConnectionRefused",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 158,
                  "col": 4
                },
                "declarationKind": "export",
                "jsDoc": {
                  "doc": "Raised when the underlying operating system reports that a connection to\na resource is refused.\n",
                  "tags": [
                    {
                      "kind": "category",
                      "doc": "Errors"
                    }
                  ]
                },
                "classDef": {
                  "isAbstract": false,
                  "constructors": [],
                  "properties": [],
                  "indexSignatures": [],
                  "methods": [],
                  "extends": "Error",
                  "implements": [],
                  "typeParams": [],
                  "superTypeParams": []
                }
              },
              {
                "kind": "class",
                "name": "ConnectionReset",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 165,
                  "col": 4
                },
                "declarationKind": "export",
                "jsDoc": {
                  "doc": "Raised when the underlying operating system reports that a connection has\nbeen reset. With network servers, it can be a _normal_ occurrence where a\nclient will abort a connection instead of properly shutting it down.\n",
                  "tags": [
                    {
                      "kind": "category",
                      "doc": "Errors"
                    }
                  ]
                },
                "classDef": {
                  "isAbstract": false,
                  "constructors": [],
                  "properties": [],
                  "indexSignatures": [],
                  "methods": [],
                  "extends": "Error",
                  "implements": [],
                  "typeParams": [],
                  "superTypeParams": []
                }
              },
              {
                "kind": "class",
                "name": "ConnectionAborted",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 171,
                  "col": 4
                },
                "declarationKind": "export",
                "jsDoc": {
                  "doc": "Raised when the underlying operating system reports an `ECONNABORTED`\nerror.\n",
                  "tags": [
                    {
                      "kind": "category",
                      "doc": "Errors"
                    }
                  ]
                },
                "classDef": {
                  "isAbstract": false,
                  "constructors": [],
                  "properties": [],
                  "indexSignatures": [],
                  "methods": [],
                  "extends": "Error",
                  "implements": [],
                  "typeParams": [],
                  "superTypeParams": []
                }
              },
              {
                "kind": "class",
                "name": "NotConnected",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 176,
                  "col": 4
                },
                "declarationKind": "export",
                "jsDoc": {
                  "doc": "Raised when the underlying operating system reports an `ENOTCONN` error.\n",
                  "tags": [
                    {
                      "kind": "category",
                      "doc": "Errors"
                    }
                  ]
                },
                "classDef": {
                  "isAbstract": false,
                  "constructors": [],
                  "properties": [],
                  "indexSignatures": [],
                  "methods": [],
                  "extends": "Error",
                  "implements": [],
                  "typeParams": [],
                  "superTypeParams": []
                }
              },
              {
                "kind": "class",
                "name": "AddrInUse",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 182,
                  "col": 4
                },
                "declarationKind": "export",
                "jsDoc": {
                  "doc": "Raised when attempting to open a server listener on an address and port\nthat already has a listener.\n",
                  "tags": [
                    {
                      "kind": "category",
                      "doc": "Errors"
                    }
                  ]
                },
                "classDef": {
                  "isAbstract": false,
                  "constructors": [],
                  "properties": [],
                  "indexSignatures": [],
                  "methods": [],
                  "extends": "Error",
                  "implements": [],
                  "typeParams": [],
                  "superTypeParams": []
                }
              },
              {
                "kind": "class",
                "name": "AddrNotAvailable",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 188,
                  "col": 4
                },
                "declarationKind": "export",
                "jsDoc": {
                  "doc": "Raised when the underlying operating system reports an `EADDRNOTAVAIL`\nerror.\n",
                  "tags": [
                    {
                      "kind": "category",
                      "doc": "Errors"
                    }
                  ]
                },
                "classDef": {
                  "isAbstract": false,
                  "constructors": [],
                  "properties": [],
                  "indexSignatures": [],
                  "methods": [],
                  "extends": "Error",
                  "implements": [],
                  "typeParams": [],
                  "superTypeParams": []
                }
              },
              {
                "kind": "class",
                "name": "BrokenPipe",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 196,
                  "col": 4
                },
                "declarationKind": "export",
                "jsDoc": {
                  "doc": "Raised when trying to write to a resource and a broken pipe error occurs.\nThis can happen when trying to write directly to `stdout` or `stderr`\nand the operating system is unable to pipe the output for a reason\nexternal to the Deno runtime.\n",
                  "tags": [
                    {
                      "kind": "category",
                      "doc": "Errors"
                    }
                  ]
                },
                "classDef": {
                  "isAbstract": false,
                  "constructors": [],
                  "properties": [],
                  "indexSignatures": [],
                  "methods": [],
                  "extends": "Error",
                  "implements": [],
                  "typeParams": [],
                  "superTypeParams": []
                }
              },
              {
                "kind": "class",
                "name": "AlreadyExists",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 202,
                  "col": 4
                },
                "declarationKind": "export",
                "jsDoc": {
                  "doc": "Raised when trying to create a resource, like a file, that already\nexits.\n",
                  "tags": [
                    {
                      "kind": "category",
                      "doc": "Errors"
                    }
                  ]
                },
                "classDef": {
                  "isAbstract": false,
                  "constructors": [],
                  "properties": [],
                  "indexSignatures": [],
                  "methods": [],
                  "extends": "Error",
                  "implements": [],
                  "typeParams": [],
                  "superTypeParams": []
                }
              },
              {
                "kind": "class",
                "name": "InvalidData",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 208,
                  "col": 4
                },
                "declarationKind": "export",
                "jsDoc": {
                  "doc": "Raised when an operation to returns data that is invalid for the\noperation being performed.\n",
                  "tags": [
                    {
                      "kind": "category",
                      "doc": "Errors"
                    }
                  ]
                },
                "classDef": {
                  "isAbstract": false,
                  "constructors": [],
                  "properties": [],
                  "indexSignatures": [],
                  "methods": [],
                  "extends": "Error",
                  "implements": [],
                  "typeParams": [],
                  "superTypeParams": []
                }
              },
              {
                "kind": "class",
                "name": "TimedOut",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 214,
                  "col": 4
                },
                "declarationKind": "export",
                "jsDoc": {
                  "doc": "Raised when the underlying operating system reports that an I/O operation\nhas timed out (`ETIMEDOUT`).\n",
                  "tags": [
                    {
                      "kind": "category",
                      "doc": "Errors"
                    }
                  ]
                },
                "classDef": {
                  "isAbstract": false,
                  "constructors": [],
                  "properties": [],
                  "indexSignatures": [],
                  "methods": [],
                  "extends": "Error",
                  "implements": [],
                  "typeParams": [],
                  "superTypeParams": []
                }
              },
              {
                "kind": "class",
                "name": "Interrupted",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 221,
                  "col": 4
                },
                "declarationKind": "export",
                "jsDoc": {
                  "doc": "Raised when the underlying operating system reports an `EINTR` error. In\nmany cases, this underlying IO error will be handled internally within\nDeno, or result in an @{link BadResource} error instead.\n",
                  "tags": [
                    {
                      "kind": "category",
                      "doc": "Errors"
                    }
                  ]
                },
                "classDef": {
                  "isAbstract": false,
                  "constructors": [],
                  "properties": [],
                  "indexSignatures": [],
                  "methods": [],
                  "extends": "Error",
                  "implements": [],
                  "typeParams": [],
                  "superTypeParams": []
                }
              },
              {
                "kind": "class",
                "name": "WouldBlock",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 227,
                  "col": 4
                },
                "declarationKind": "export",
                "jsDoc": {
                  "doc": "Raised when the underlying operating system would need to block to\ncomplete but an asynchronous (non-blocking) API is used.\n",
                  "tags": [
                    {
                      "kind": "category",
                      "doc": "Errors"
                    }
                  ]
                },
                "classDef": {
                  "isAbstract": false,
                  "constructors": [],
                  "properties": [],
                  "indexSignatures": [],
                  "methods": [],
                  "extends": "Error",
                  "implements": [],
                  "typeParams": [],
                  "superTypeParams": []
                }
              },
              {
                "kind": "class",
                "name": "WriteZero",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 233,
                  "col": 4
                },
                "declarationKind": "export",
                "jsDoc": {
                  "doc": "Raised when expecting to write to a IO buffer resulted in zero bytes\nbeing written.\n",
                  "tags": [
                    {
                      "kind": "category",
                      "doc": "Errors"
                    }
                  ]
                },
                "classDef": {
                  "isAbstract": false,
                  "constructors": [],
                  "properties": [],
                  "indexSignatures": [],
                  "methods": [],
                  "extends": "Error",
                  "implements": [],
                  "typeParams": [],
                  "superTypeParams": []
                }
              },
              {
                "kind": "class",
                "name": "UnexpectedEof",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 239,
                  "col": 4
                },
                "declarationKind": "export",
                "jsDoc": {
                  "doc": "Raised when attempting to read bytes from a resource, but the EOF was\nunexpectedly encountered.\n",
                  "tags": [
                    {
                      "kind": "category",
                      "doc": "Errors"
                    }
                  ]
                },
                "classDef": {
                  "isAbstract": false,
                  "constructors": [],
                  "properties": [],
                  "indexSignatures": [],
                  "methods": [],
                  "extends": "Error",
                  "implements": [],
                  "typeParams": [],
                  "superTypeParams": []
                }
              },
              {
                "kind": "class",
                "name": "BadResource",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 245,
                  "col": 4
                },
                "declarationKind": "export",
                "jsDoc": {
                  "doc": "The underlying IO resource is invalid or closed, and so the operation\ncould not be performed.\n",
                  "tags": [
                    {
                      "kind": "category",
                      "doc": "Errors"
                    }
                  ]
                },
                "classDef": {
                  "isAbstract": false,
                  "constructors": [],
                  "properties": [],
                  "indexSignatures": [],
                  "methods": [],
                  "extends": "Error",
                  "implements": [],
                  "typeParams": [],
                  "superTypeParams": []
                }
              },
              {
                "kind": "class",
                "name": "Http",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 251,
                  "col": 4
                },
                "declarationKind": "export",
                "jsDoc": {
                  "doc": "Raised in situations where when attempting to load a dynamic import,\ntoo many redirects were encountered.\n",
                  "tags": [
                    {
                      "kind": "category",
                      "doc": "Errors"
                    }
                  ]
                },
                "classDef": {
                  "isAbstract": false,
                  "constructors": [],
                  "properties": [],
                  "indexSignatures": [],
                  "methods": [],
                  "extends": "Error",
                  "implements": [],
                  "typeParams": [],
                  "superTypeParams": []
                }
              },
              {
                "kind": "class",
                "name": "Busy",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 257,
                  "col": 4
                },
                "declarationKind": "export",
                "jsDoc": {
                  "doc": "Raised when the underlying IO resource is not available because it is\nbeing awaited on in another block of code.\n",
                  "tags": [
                    {
                      "kind": "category",
                      "doc": "Errors"
                    }
                  ]
                },
                "classDef": {
                  "isAbstract": false,
                  "constructors": [],
                  "properties": [],
                  "indexSignatures": [],
                  "methods": [],
                  "extends": "Error",
                  "implements": [],
                  "typeParams": [],
                  "superTypeParams": []
                }
              },
              {
                "kind": "class",
                "name": "NotSupported",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 263,
                  "col": 4
                },
                "declarationKind": "export",
                "jsDoc": {
                  "doc": "Raised when the underlying Deno API is asked to perform a function that\nis not currently supported.\n",
                  "tags": [
                    {
                      "kind": "category",
                      "doc": "Errors"
                    }
                  ]
                },
                "classDef": {
                  "isAbstract": false,
                  "constructors": [],
                  "properties": [],
                  "indexSignatures": [],
                  "methods": [],
                  "extends": "Error",
                  "implements": [],
                  "typeParams": [],
                  "superTypeParams": []
                }
              }
            ]
          }
        },
        {
          "kind": "variable",
          "name": "pid",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 274,
            "col": 15
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The current process ID of this instance of the Deno CLI.\n\n```ts\nconsole.log(Deno.pid);\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Runtime Environment"
              }
            ]
          },
          "variableDef": {
            "tsType": {
              "repr": "number",
              "kind": "keyword",
              "keyword": "number"
            },
            "kind": "const"
          }
        },
        {
          "kind": "variable",
          "name": "ppid",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 285,
            "col": 15
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The process ID of parent process of this instance of the Deno CLI.\n\n```ts\nconsole.log(Deno.ppid);\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Runtime Environment"
              }
            ]
          },
          "variableDef": {
            "tsType": {
              "repr": "number",
              "kind": "keyword",
              "keyword": "number"
            },
            "kind": "const"
          }
        },
        {
          "kind": "interface",
          "name": "MemoryUsage",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 288,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "Runtime Environment"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "rss",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 291,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The number of bytes of the current Deno's process resident set size,\nwhich is the amount of memory occupied in main memory (RAM)."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "heapTotal",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 293,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The total size of the heap for V8, in bytes."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "heapUsed",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 295,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The amount of the heap used for V8, in bytes."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "external",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 298,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Memory, in bytes, associated with JavaScript objects outside of the\nJavaScript isolate."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "memoryUsage",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 307,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Returns an object describing the memory usage of the Deno process and the\nV8 subsystem measured in bytes.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Runtime Environment"
              }
            ]
          },
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "MemoryUsage",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "MemoryUsage"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "hostname",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 321,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Get the `hostname` of the machine the Deno process is running on.\n\n```ts\nconsole.log(Deno.hostname());\n```\n\nRequires `allow-sys` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-sys"
                ]
              },
              {
                "kind": "category",
                "doc": "Runtime Environment"
              }
            ]
          },
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "loadavg",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 341,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Returns an array containing the 1, 5, and 15 minute load averages. The\nload average is a measure of CPU and IO utilization of the last one, five,\nand 15 minute periods expressed as a fractional number.  Zero means there\nis no load. On Windows, the three values are always the same and represent\nthe current load, not the 1, 5 and 15 minute load averages.\n\n```ts\nconsole.log(Deno.loadavg());  // e.g. [ 0.71, 0.44, 0.44 ]\n```\n\nRequires `allow-sys` permission.\n\nOn Windows there is no API available to retrieve this information and this method returns `[ 0, 0, 0 ]`.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-sys"
                ]
              },
              {
                "kind": "category",
                "doc": "Observability"
              }
            ]
          },
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "",
              "kind": "array",
              "array": {
                "repr": "number",
                "kind": "keyword",
                "keyword": "number"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "NetworkInterfaceInfo",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 349,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The information for a network interface returned from a call to\n{@linkcode Deno.networkInterfaces}.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "name",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 351,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The network interface name."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "family",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 353,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The IP protocol version."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "IPv4",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "IPv4"
                      }
                    },
                    {
                      "repr": "IPv6",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "IPv6"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "address",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 355,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The IP address bound to the interface."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "netmask",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 357,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The netmask applied to the interface."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "scopeid",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 359,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The IPv6 scope id or `null`."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "cidr",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 361,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The CIDR range."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "mac",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 363,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The MAC address."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "networkInterfaces",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 378,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Returns an array of the network interface information.\n\n```ts\nconsole.log(Deno.networkInterfaces());\n```\n\nRequires `allow-sys` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-sys"
                ]
              },
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "",
              "kind": "array",
              "array": {
                "repr": "NetworkInterfaceInfo",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "NetworkInterfaceInfo"
                }
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "systemMemoryInfo",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 395,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Displays the total amount of free and used physical and swap memory in the\nsystem, as well as the buffers and caches used by the kernel.\n\nThis is similar to the `free` command in Linux\n\n```ts\nconsole.log(Deno.systemMemoryInfo());\n```\n\nRequires `allow-sys` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-sys"
                ]
              },
              {
                "kind": "category",
                "doc": "Runtime Environment"
              }
            ]
          },
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "SystemMemoryInfo",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "SystemMemoryInfo"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "SystemMemoryInfo",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 402,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Information returned from a call to {@linkcode Deno.systemMemoryInfo}.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Runtime Environment"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "total",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 404,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Total installed memory in bytes."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "free",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 406,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Unused memory in bytes."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "available",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 412,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Estimation of how much memory, in bytes, is available for starting new\napplications, without swapping. Unlike the data provided by the cache or\nfree fields, this field takes into account page cache and also that not\nall reclaimable memory will be reclaimed due to items being in use."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "buffers",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 414,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Memory used by kernel buffers."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "cached",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 416,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Memory used by the page cache and slabs."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "swapTotal",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 418,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Total swap memory."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "swapFree",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 420,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Unused swap memory."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "variable",
          "name": "noColor",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 433,
            "col": 15
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Reflects the `NO_COLOR` environment variable at program start.\n\nWhen the value is `true`, the Deno CLI will attempt to not send color codes\nto `stderr` or `stdout` and other command line programs should also attempt\nto respect this value.\n\nSee: https://no-color.org/\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Runtime Environment"
              }
            ]
          },
          "variableDef": {
            "tsType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "kind": "const"
          }
        },
        {
          "kind": "function",
          "name": "osRelease",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 449,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Returns the release version of the Operating System.\n\n```ts\nconsole.log(Deno.osRelease());\n```\n\nRequires `allow-sys` permission.\nUnder consideration to possibly move to Deno.build or Deno.versions and if\nit should depend sys-info, which may not be desirable.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-sys"
                ]
              },
              {
                "kind": "category",
                "doc": "Runtime Environment"
              }
            ]
          },
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "osUptime",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 463,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Returns the Operating System uptime in number of seconds.\n\n```ts\nconsole.log(Deno.osUptime());\n```\n\nRequires `allow-sys` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-sys"
                ]
              },
              {
                "kind": "category",
                "doc": "Runtime Environment"
              }
            ]
          },
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "number",
              "kind": "keyword",
              "keyword": "number"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "PermissionOptions",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 474,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Options which define the permissions within a test or worker context.\n\n`\"inherit\"` ensures that all permissions of the parent process will be\napplied to the test context. `\"none\"` ensures the test context has no\npermissions. A `PermissionOptionsObject` provides a more specific\nset of permissions to the test context.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Permissions"
              }
            ]
          },
          "typeAliasDef": {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "inherit",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "inherit"
                  }
                },
                {
                  "repr": "none",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "none"
                  }
                },
                {
                  "repr": "PermissionOptionsObject",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "PermissionOptionsObject"
                  }
                }
              ]
            },
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "PermissionOptionsObject",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 484,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "A set of options which can define the permissions within a test or worker\ncontext at a highly specific level.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Permissions"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "env",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 492,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Specifies if the `env` permission should be requested or revoked.\nIf set to `\"inherit\"`, the current `env` permission will be inherited.\nIf set to `true`, the global `env` permission will be requested.\nIf set to `false`, the global `env` permission will be revoked.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "false"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "inherit",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "inherit"
                      }
                    },
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "sys",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 501,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Specifies if the `sys` permission should be requested or revoked.\nIf set to `\"inherit\"`, the current `sys` permission will be inherited.\nIf set to `true`, the global `sys` permission will be requested.\nIf set to `false`, the global `sys` permission will be revoked.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "false"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "inherit",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "inherit"
                      }
                    },
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "hrtime",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 510,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Specifies if the `hrtime` permission should be requested or revoked.\nIf set to `\"inherit\"`, the current `hrtime` permission will be inherited.\nIf set to `true`, the global `hrtime` permission will be requested.\nIf set to `false`, the global `hrtime` permission will be revoked.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "false"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "inherit",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "inherit"
                      }
                    },
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "net",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 583,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Specifies if the `net` permission should be requested or revoked.\nif set to `\"inherit\"`, the current `net` permission will be inherited.\nif set to `true`, the global `net` permission will be requested.\nif set to `false`, the global `net` permission will be revoked.\nif set to `string[]`, the `net` permission will be requested with the\nspecified host strings with the format `\"<host>[:<port>]`.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "false",
                      "doc": "Examples:\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test({\nname: \"inherit\",\npermissions: {\nnet: \"inherit\",\n},\nasync fn() {\nconst status = await Deno.permissions.query({ name: \"net\" })\nassertEquals(status.state, \"granted\");\n},\n});\n```\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test({\nname: \"true\",\npermissions: {\nnet: true,\n},\nasync fn() {\nconst status = await Deno.permissions.query({ name: \"net\" });\nassertEquals(status.state, \"granted\");\n},\n});\n```\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test({\nname: \"false\",\npermissions: {\nnet: false,\n},\nasync fn() {\nconst status = await Deno.permissions.query({ name: \"net\" });\nassertEquals(status.state, \"denied\");\n},\n});\n```\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test({\nname: \"localhost:8080\",\npermissions: {\nnet: [\"localhost:8080\"],\n},\nasync fn() {\nconst status = await Deno.permissions.query({ name: \"net\", host: \"localhost:8080\" });\nassertEquals(status.state, \"granted\");\n},\n});\n```"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "inherit",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "inherit"
                      }
                    },
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "ffi",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 592,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Specifies if the `ffi` permission should be requested or revoked.\nIf set to `\"inherit\"`, the current `ffi` permission will be inherited.\nIf set to `true`, the global `ffi` permission will be requested.\nIf set to `false`, the global `ffi` permission will be revoked.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "false"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "inherit",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "inherit"
                      }
                    },
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "string",
                                "kind": "keyword",
                                "keyword": "string"
                              },
                              {
                                "repr": "URL",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "URL"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "Array"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "read",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 603,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Specifies if the `read` permission should be requested or revoked.\nIf set to `\"inherit\"`, the current `read` permission will be inherited.\nIf set to `true`, the global `read` permission will be requested.\nIf set to `false`, the global `read` permission will be revoked.\nIf set to `Array<string | URL>`, the `read` permission will be requested with the\nspecified file paths.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "false"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "inherit",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "inherit"
                      }
                    },
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "string",
                                "kind": "keyword",
                                "keyword": "string"
                              },
                              {
                                "repr": "URL",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "URL"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "Array"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "run",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 612,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Specifies if the `run` permission should be requested or revoked.\nIf set to `\"inherit\"`, the current `run` permission will be inherited.\nIf set to `true`, the global `run` permission will be requested.\nIf set to `false`, the global `run` permission will be revoked.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "false"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "inherit",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "inherit"
                      }
                    },
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "string",
                                "kind": "keyword",
                                "keyword": "string"
                              },
                              {
                                "repr": "URL",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "URL"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "Array"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "write",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 623,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Specifies if the `write` permission should be requested or revoked.\nIf set to `\"inherit\"`, the current `write` permission will be inherited.\nIf set to `true`, the global `write` permission will be requested.\nIf set to `false`, the global `write` permission will be revoked.\nIf set to `Array<string | URL>`, the `write` permission will be requested with the\nspecified file paths.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "false"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "inherit",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "inherit"
                      }
                    },
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "string",
                                "kind": "keyword",
                                "keyword": "string"
                              },
                              {
                                "repr": "URL",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "URL"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "Array"
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "TestContext",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 632,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Context that is passed to a testing function, which can be used to either\ngain information about the current test, or register additional test\nsteps within the current test.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Testing"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [
              {
                "name": "step",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 664,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Run a sub step of the parent test or step. Returns a promise\nthat resolves to a boolean signifying if the step completed successfully.\n\nThe returned promise never rejects unless the arguments are invalid.\n\nIf the test was ignored the promise returns `false`.\n\n```ts\nDeno.test({\n  name: \"a parent test\",\n  async fn(t) {\n    console.log(\"before the step\");\n    await t.step({\n      name: \"step 1\",\n      fn(t) {\n        console.log(\"current step:\", t.name);\n      }\n    });\n    console.log(\"after the step\");\n  }\n});\n```"
                },
                "optional": false,
                "params": [
                  {
                    "kind": "identifier",
                    "name": "definition",
                    "optional": false,
                    "tsType": {
                      "repr": "TestStepDefinition",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "TestStepDefinition"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "typeParams": []
              },
              {
                "name": "step",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 689,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Run a sub step of the parent test or step. Returns a promise\nthat resolves to a boolean signifying if the step completed successfully.\n\nThe returned promise never rejects unless the arguments are invalid.\n\nIf the test was ignored the promise returns `false`.\n\n```ts\nDeno.test(\n  \"a parent test\",\n  async (t) => {\n    console.log(\"before the step\");\n    await t.step(\n      \"step 1\",\n      (t) => {\n        console.log(\"current step:\", t.name);\n      }\n    );\n    console.log(\"after the step\");\n  }\n);\n```"
                },
                "optional": false,
                "params": [
                  {
                    "kind": "identifier",
                    "name": "name",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "fn",
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "void",
                              "kind": "keyword",
                              "keyword": "void"
                            },
                            {
                              "repr": "Promise",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "void",
                                    "kind": "keyword",
                                    "keyword": "void"
                                  }
                                ],
                                "typeName": "Promise"
                              }
                            }
                          ]
                        },
                        "params": [
                          {
                            "kind": "identifier",
                            "name": "t",
                            "optional": false,
                            "tsType": {
                              "repr": "TestContext",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "TestContext"
                              }
                            }
                          }
                        ],
                        "typeParams": []
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "typeParams": []
              },
              {
                "name": "step",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 711,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Run a sub step of the parent test or step. Returns a promise\nthat resolves to a boolean signifying if the step completed successfully.\n\nThe returned promise never rejects unless the arguments are invalid.\n\nIf the test was ignored the promise returns `false`.\n\n```ts\nDeno.test(async function aParentTest(t) {\n  console.log(\"before the step\");\n  await t.step(function step1(t) {\n    console.log(\"current step:\", t.name);\n  });\n  console.log(\"after the step\");\n});\n```"
                },
                "optional": false,
                "params": [
                  {
                    "kind": "identifier",
                    "name": "fn",
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "void",
                              "kind": "keyword",
                              "keyword": "void"
                            },
                            {
                              "repr": "Promise",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "void",
                                    "kind": "keyword",
                                    "keyword": "void"
                                  }
                                ],
                                "typeName": "Promise"
                              }
                            }
                          ]
                        },
                        "params": [
                          {
                            "kind": "identifier",
                            "name": "t",
                            "optional": false,
                            "tsType": {
                              "repr": "TestContext",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "TestContext"
                              }
                            }
                          }
                        ],
                        "typeParams": []
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "typeParams": []
              }
            ],
            "properties": [
              {
                "name": "name",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 634,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The current test name."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "origin",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 636,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The string URL of the current test."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "parent",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 639,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "If the current test is a step of another test, the parent test context\nwill be set here."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "TestContext",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "TestContext"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "TestStepDefinition",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 715,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "Testing"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "fn",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 719,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The test function that will be tested when this step is executed. The\nfunction can take an argument which will provide information about the\ncurrent step's context."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "void",
                          "kind": "keyword",
                          "keyword": "void"
                        },
                        {
                          "repr": "Promise",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              }
                            ],
                            "typeName": "Promise"
                          }
                        }
                      ]
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "t",
                        "optional": false,
                        "tsType": {
                          "repr": "TestContext",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "TestContext"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "name",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 721,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The name of the step."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "ignore",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 727,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "If truthy the current test step will be ignored.\n\nThis is a quick way to skip over a step, but also can be used for\nconditional logic, like determining if an environment feature is present."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "sanitizeOps",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 735,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Check that the number of async completed operations after the test step\nis the same as number of dispatched operations. This ensures that the\ncode tested does not start async operations which it then does\nnot await. This helps in preventing logic errors and memory leaks\nin the application code.\n\nDefaults to the parent test or step's value."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "sanitizeResources",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 741,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Ensure the test step does not \"leak\" resources - like open files or\nnetwork connections - by ensuring the open resources at the start of the\nstep match the open resources at the end of the step.\n\nDefaults to the parent test or step's value."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "sanitizeExit",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 746,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Ensure the test step does not prematurely cause the process to exit,\nfor example via a call to {@linkcode Deno.exit}.\n\nDefaults to the parent test or step's value."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "TestDefinition",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 750,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "Testing"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "fn",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 751,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "void",
                          "kind": "keyword",
                          "keyword": "void"
                        },
                        {
                          "repr": "Promise",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              }
                            ],
                            "typeName": "Promise"
                          }
                        }
                      ]
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "t",
                        "optional": false,
                        "tsType": {
                          "repr": "TestContext",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "TestContext"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "name",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 753,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The name of the test."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "ignore",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 759,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "If truthy the current test step will be ignored.\n\nIt is a quick way to skip over a step, but also can be used for\nconditional logic, like determining if an environment feature is present."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "only",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 762,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "If at least one test has `only` set to `true`, only run tests that have\n`only` set to `true` and fail the test suite."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "sanitizeOps",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 770,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Check that the number of async completed operations after the test step\nis the same as number of dispatched operations. This ensures that the\ncode tested does not start async operations which it then does\nnot await. This helps in preventing logic errors and memory leaks\nin the application code.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "true"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "sanitizeResources",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 776,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Ensure the test step does not \"leak\" resources - like open files or\nnetwork connections - by ensuring the open resources at the start of the\ntest match the open resources at the end of the test.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "true"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "sanitizeExit",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 781,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Ensure the test case does not prematurely cause the process to exit,\nfor example via a call to {@linkcode Deno.exit}.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "true"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "permissions",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 789,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Specifies the permissions that should be used to run the test.\n\nSet this to \"inherit\" to keep the calling runtime permissions, set this\nto \"none\" to revoke all permissions, or set a more specific set of\npermissions using a {@linkcode PermissionOptionsObject}.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "\"inherit\""
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "PermissionOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "PermissionOptions"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "test",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 827,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Register a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test({\n  name: \"example test\",\n  fn() {\n    assertEquals(\"world\", \"world\");\n  },\n});\n\nDeno.test({\n  name: \"example ignored test\",\n  ignore: Deno.build.os === \"windows\",\n  fn() {\n    // This test is ignored only on Windows machines\n  },\n});\n\nDeno.test({\n  name: \"example async test\",\n  async fn() {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n});\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Testing"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "t",
                "optional": false,
                "tsType": {
                  "repr": "TestDefinition",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "TestDefinition"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "test",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 850,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Register a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\"My test description\", () => {\n  assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(\"My async test description\", async () => {\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = await Deno.readFile(\"hello_world.txt\");\n  assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Testing"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "fn",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "void",
                          "kind": "keyword",
                          "keyword": "void"
                        },
                        {
                          "repr": "Promise",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              }
                            ],
                            "typeName": "Promise"
                          }
                        }
                      ]
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "t",
                        "optional": false,
                        "tsType": {
                          "repr": "TestContext",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "TestContext"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "test",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 876,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Register a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required. Declared function must have a name.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(function myTestName() {\n  assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(async function myOtherTestName() {\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = await Deno.readFile(\"hello_world.txt\");\n  assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Testing"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "fn",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "void",
                          "kind": "keyword",
                          "keyword": "void"
                        },
                        {
                          "repr": "Promise",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              }
                            ],
                            "typeName": "Promise"
                          }
                        }
                      ]
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "t",
                        "optional": false,
                        "tsType": {
                          "repr": "TestContext",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "TestContext"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "test",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 899,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Register a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport {assert, fail, assertEquals} from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\"My test description\", { permissions: { read: true } }, (): void => {\n  assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(\"My async test description\", { permissions: { read: false } }, async (): Promise<void> => {\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = await Deno.readFile(\"hello_world.txt\");\n  assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Testing"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": false,
                "tsType": {
                  "repr": "Omit",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "TestDefinition",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "TestDefinition"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "fn",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "fn"
                            }
                          },
                          {
                            "repr": "name",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "name"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Omit"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "fn",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "void",
                          "kind": "keyword",
                          "keyword": "void"
                        },
                        {
                          "repr": "Promise",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              }
                            ],
                            "typeName": "Promise"
                          }
                        }
                      ]
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "t",
                        "optional": false,
                        "tsType": {
                          "repr": "TestContext",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "TestContext"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "test",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 938,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Register a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\n  {\n    name: \"My test description\",\n    permissions: { read: true },\n  },\n  () => {\n    assertEquals(\"hello\", \"hello\");\n  },\n);\n\nDeno.test(\n  {\n    name: \"My async test description\",\n    permissions: { read: false },\n  },\n  async () => {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  },\n);\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Testing"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "options",
                "optional": false,
                "tsType": {
                  "repr": "Omit",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "TestDefinition",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "TestDefinition"
                        }
                      },
                      {
                        "repr": "fn",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "fn"
                        }
                      }
                    ],
                    "typeName": "Omit"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "fn",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "void",
                          "kind": "keyword",
                          "keyword": "void"
                        },
                        {
                          "repr": "Promise",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              }
                            ],
                            "typeName": "Promise"
                          }
                        }
                      ]
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "t",
                        "optional": false,
                        "tsType": {
                          "repr": "TestContext",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "TestContext"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "test",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 970,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Register a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required. Declared function must have a name.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\n  { permissions: { read: true } },\n  function myTestName() {\n    assertEquals(\"hello\", \"hello\");\n  },\n);\n\nDeno.test(\n  { permissions: { read: false } },\n  async function myOtherTestName() {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  },\n);\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Testing"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "options",
                "optional": false,
                "tsType": {
                  "repr": "Omit",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "TestDefinition",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "TestDefinition"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "fn",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "fn"
                            }
                          },
                          {
                            "repr": "name",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "name"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Omit"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "fn",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "void",
                          "kind": "keyword",
                          "keyword": "void"
                        },
                        {
                          "repr": "Promise",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              }
                            ],
                            "typeName": "Promise"
                          }
                        }
                      ]
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "t",
                        "optional": false,
                        "tsType": {
                          "repr": "TestContext",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "TestContext"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "BenchDefinition",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 980,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The interface for defining a benchmark test using {@linkcode Deno.bench}.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Testing"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "fn",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 982,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The test function which will be benchmarked."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "void",
                          "kind": "keyword",
                          "keyword": "void"
                        },
                        {
                          "repr": "Promise",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              }
                            ],
                            "typeName": "Promise"
                          }
                        }
                      ]
                    },
                    "params": [],
                    "typeParams": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "name",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 984,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The name of the test, which will be used in displaying the results."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "ignore",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 986,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "If truthy, the benchmark test will be ignored/skipped."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "group",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 991,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Group name for the benchmark.\n\nGrouped benchmarks produce a group time summary, where the difference\nin performance between each test of the group is compared."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "baseline",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 996,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Benchmark should be used as the baseline for other benchmarks.\n\nIf there are multiple baselines in a group, the first one is used as the\nbaseline."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "only",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 999,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "If at least one bench has `only` set to true, only run benches that have\n`only` set to `true` and fail the bench suite."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "sanitizeExit",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 1004,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Ensure the bench case does not prematurely cause the process to exit,\nfor example via a call to {@linkcode Deno.exit}.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "true"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "permissions",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 1013,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Specifies the permissions that should be used to run the bench.\n\nSet this to `\"inherit\"` to keep the calling thread's permissions.\n\nSet this to `\"none\"` to revoke all permissions.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "\"inherit\""
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "PermissionOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "PermissionOptions"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "bench",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1053,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Register a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench({\n  name: \"example test\",\n  fn() {\n    assertEquals(\"world\", \"world\");\n  },\n});\n\nDeno.bench({\n  name: \"example ignored test\",\n  ignore: Deno.build.os === \"windows\",\n  fn() {\n    // This test is ignored only on Windows machines\n  },\n});\n\nDeno.bench({\n  name: \"example async test\",\n  async fn() {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n});\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Testing"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "t",
                "optional": false,
                "tsType": {
                  "repr": "BenchDefinition",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "BenchDefinition"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "bench",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1078,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Register a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\"My test description\", () => {\n  assertEquals(\"hello\", \"hello\");\n});\n\nDeno.bench(\"My async test description\", async () => {\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = await Deno.readFile(\"hello_world.txt\");\n  assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Testing"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "fn",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "void",
                          "kind": "keyword",
                          "keyword": "void"
                        },
                        {
                          "repr": "Promise",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              }
                            ],
                            "typeName": "Promise"
                          }
                        }
                      ]
                    },
                    "params": [],
                    "typeParams": []
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "bench",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1106,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Register a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(function myTestName() {\n  assertEquals(\"hello\", \"hello\");\n});\n\nDeno.bench(async function myOtherTestName() {\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = await Deno.readFile(\"hello_world.txt\");\n  assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Testing"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "fn",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "void",
                          "kind": "keyword",
                          "keyword": "void"
                        },
                        {
                          "repr": "Promise",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              }
                            ],
                            "typeName": "Promise"
                          }
                        }
                      ]
                    },
                    "params": [],
                    "typeParams": []
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "bench",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1139,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Register a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\n  \"My test description\",\n  { permissions: { read: true } },\n  () => {\n   assertEquals(\"hello\", \"hello\");\n  }\n);\n\nDeno.bench(\n  \"My async test description\",\n  { permissions: { read: false } },\n  async () => {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n);\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Testing"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": false,
                "tsType": {
                  "repr": "Omit",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "BenchDefinition",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "BenchDefinition"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "fn",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "fn"
                            }
                          },
                          {
                            "repr": "name",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "name"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Omit"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "fn",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "void",
                          "kind": "keyword",
                          "keyword": "void"
                        },
                        {
                          "repr": "Promise",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              }
                            ],
                            "typeName": "Promise"
                          }
                        }
                      ]
                    },
                    "params": [],
                    "typeParams": []
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "bench",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1174,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Register a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\n  { name: \"My test description\", permissions: { read: true } },\n  () => {\n    assertEquals(\"hello\", \"hello\");\n  }\n);\n\nDeno.bench(\n  { name: \"My async test description\", permissions: { read: false } },\n  async () => {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n);\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Testing"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "options",
                "optional": false,
                "tsType": {
                  "repr": "Omit",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "BenchDefinition",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "BenchDefinition"
                        }
                      },
                      {
                        "repr": "fn",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "fn"
                        }
                      }
                    ],
                    "typeName": "Omit"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "fn",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "void",
                          "kind": "keyword",
                          "keyword": "void"
                        },
                        {
                          "repr": "Promise",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              }
                            ],
                            "typeName": "Promise"
                          }
                        }
                      ]
                    },
                    "params": [],
                    "typeParams": []
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "bench",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1208,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Register a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\n  { permissions: { read: true } },\n  function myTestName() {\n    assertEquals(\"hello\", \"hello\");\n  }\n);\n\nDeno.bench(\n  { permissions: { read: false } },\n  async function myOtherTestName() {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n);\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Testing"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "options",
                "optional": false,
                "tsType": {
                  "repr": "Omit",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "BenchDefinition",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "BenchDefinition"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "fn",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "fn"
                            }
                          },
                          {
                            "repr": "name",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "name"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Omit"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "fn",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "void",
                          "kind": "keyword",
                          "keyword": "void"
                        },
                        {
                          "repr": "Promise",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              }
                            ],
                            "typeName": "Promise"
                          }
                        }
                      ]
                    },
                    "params": [],
                    "typeParams": []
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "exit",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1225,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Exit the Deno process with optional exit code.\n\nIf no exit code is supplied then Deno will exit with return code of `0`.\n\nIn worker contexts this is an alias to `self.close();`.\n\n```ts\nDeno.exit(5);\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Runtime Environment"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "code",
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "never",
              "kind": "keyword",
              "keyword": "never"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "Env",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1233,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "An interface containing methods to interact with the process environment\nvariables.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-env"
                ]
              },
              {
                "kind": "category",
                "doc": "Runtime Environment"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [
              {
                "name": "get",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 1247,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Retrieve the value of an environment variable.\n\nReturns `undefined` if the supplied environment variable is not defined.\n\n```ts\nconsole.log(Deno.env.get(\"HOME\"));  // e.g. outputs \"/home/alice\"\nconsole.log(Deno.env.get(\"MADE_UP_VAR\"));  // outputs \"undefined\"\n```\n\nRequires `allow-env` permission.\n",
                  "tags": [
                    {
                      "kind": "tags",
                      "tags": [
                        "allow-env"
                      ]
                    }
                  ]
                },
                "optional": false,
                "params": [
                  {
                    "kind": "identifier",
                    "name": "key",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  }
                ],
                "returnType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "set",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 1260,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Set the value of an environment variable.\n\n```ts\nDeno.env.set(\"SOME_VAR\", \"Value\");\nDeno.env.get(\"SOME_VAR\");  // outputs \"Value\"\n```\n\nRequires `allow-env` permission.\n",
                  "tags": [
                    {
                      "kind": "tags",
                      "tags": [
                        "allow-env"
                      ]
                    }
                  ]
                },
                "optional": false,
                "params": [
                  {
                    "kind": "identifier",
                    "name": "key",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "value",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  }
                ],
                "returnType": {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                },
                "typeParams": []
              },
              {
                "name": "delete",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 1273,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Delete the value of an environment variable.\n\n```ts\nDeno.env.set(\"SOME_VAR\", \"Value\");\nDeno.env.delete(\"SOME_VAR\");  // outputs \"undefined\"\n```\n\nRequires `allow-env` permission.\n",
                  "tags": [
                    {
                      "kind": "tags",
                      "tags": [
                        "allow-env"
                      ]
                    }
                  ]
                },
                "optional": false,
                "params": [
                  {
                    "kind": "identifier",
                    "name": "key",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  }
                ],
                "returnType": {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                },
                "typeParams": []
              },
              {
                "name": "has",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 1286,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Check whether an environment variable is present or not.\n\n```ts\nDeno.env.set(\"SOME_VAR\", \"Value\");\nDeno.env.has(\"SOME_VAR\");  // outputs true\n```\n\nRequires `allow-env` permission.\n",
                  "tags": [
                    {
                      "kind": "tags",
                      "tags": [
                        "allow-env"
                      ]
                    }
                  ]
                },
                "optional": false,
                "params": [
                  {
                    "kind": "identifier",
                    "name": "key",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  }
                ],
                "returnType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "toObject",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 1303,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Returns a snapshot of the environment variables at invocation as a\nsimple object of keys and values.\n\n```ts\nDeno.env.set(\"TEST_VAR\", \"A\");\nconst myEnv = Deno.env.toObject();\nconsole.log(myEnv.SHELL);\nDeno.env.set(\"TEST_VAR\", \"B\");\nconsole.log(myEnv.TEST_VAR);  // outputs \"A\"\n```\n\nRequires `allow-env` permission.\n",
                  "tags": [
                    {
                      "kind": "tags",
                      "tags": [
                        "allow-env"
                      ]
                    }
                  ]
                },
                "optional": false,
                "params": [],
                "returnType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [],
                    "callSignatures": [],
                    "indexSignatures": [
                      {
                        "readonly": false,
                        "params": [
                          {
                            "kind": "identifier",
                            "name": "index",
                            "optional": false,
                            "tsType": {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            }
                          }
                        ],
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ]
                  }
                },
                "typeParams": []
              }
            ],
            "properties": [],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "variable",
          "name": "env",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1312,
            "col": 15
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "An interface containing methods to interact with the process environment\nvariables.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-env"
                ]
              },
              {
                "kind": "category",
                "doc": "Runtime Environment"
              }
            ]
          },
          "variableDef": {
            "tsType": {
              "repr": "Env",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Env"
              }
            },
            "kind": "const"
          }
        },
        {
          "kind": "function",
          "name": "execPath",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1326,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Returns the path to the current deno executable.\n\n```ts\nconsole.log(Deno.execPath());  // e.g. \"/home/alice/.local/bin/deno\"\n```\n\nRequires `allow-read` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read"
                ]
              },
              {
                "kind": "category",
                "doc": "Runtime Environment"
              }
            ]
          },
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "chdir",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1347,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Change the current working directory to the specified path.\n\n```ts\nDeno.chdir(\"/home/userA\");\nDeno.chdir(\"../userB\");\nDeno.chdir(\"C:\\\\Program Files (x86)\\\\Java\");\n```\n\nThrows {@linkcode Deno.errors.NotFound} if directory not found.\n\nThrows {@linkcode Deno.errors.PermissionDenied} if the user does not have\noperating system file access rights.\n\nRequires `allow-read` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read"
                ]
              },
              {
                "kind": "category",
                "doc": "Runtime Environment"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "directory",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "cwd",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1366,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Return a string representing the current working directory.\n\nIf the current directory can be reached via multiple paths (due to symbolic\nlinks), `cwd()` may return any one of them.\n\n```ts\nconst currentWorkingDirectory = Deno.cwd();\n```\n\nThrows {@linkcode Deno.errors.NotFound} if directory not available.\n\nRequires `allow-read` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read"
                ]
              },
              {
                "kind": "category",
                "doc": "Runtime Environment"
              }
            ]
          },
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "link",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1380,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Creates `newpath` as a hard link to `oldpath`.\n\n```ts\nawait Deno.link(\"old/name\", \"new/name\");\n```\n\nRequires `allow-read` and `allow-write` permissions.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read",
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "oldpath",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "newpath",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "linkSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1394,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously creates `newpath` as a hard link to `oldpath`.\n\n```ts\nDeno.linkSync(\"old/name\", \"new/name\");\n```\n\nRequires `allow-read` and `allow-write` permissions.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read",
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "oldpath",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "newpath",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "enum",
          "name": "SeekMode",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1401,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "A enum which defines the seek mode for IO related APIs that support\nseeking.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "enumDef": {
            "members": [
              {
                "name": "Start",
                "init": {
                  "repr": "0",
                  "kind": "literal",
                  "literal": {
                    "kind": "number",
                    "number": 0.0
                  }
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 1403,
                  "col": 4
                }
              },
              {
                "name": "Current",
                "init": {
                  "repr": "1",
                  "kind": "literal",
                  "literal": {
                    "kind": "number",
                    "number": 1.0
                  }
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 1405,
                  "col": 4
                }
              },
              {
                "name": "End",
                "init": {
                  "repr": "2",
                  "kind": "literal",
                  "literal": {
                    "kind": "number",
                    "number": 2.0
                  }
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 1407,
                  "col": 4
                }
              }
            ]
          }
        },
        {
          "kind": "interface",
          "name": "Reader",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1415,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "An abstract interface which when implemented provides an interface to read\nbytes into an array buffer asynchronously.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [
              {
                "name": "read",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 1441,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Reads up to `p.byteLength` bytes into `p`. It resolves to the number of\nbytes read (`0` < `n` <= `p.byteLength`) and rejects if any error\nencountered. Even if `read()` resolves to `n` < `p.byteLength`, it may\nuse all of `p` as scratch space during the call. If some data is\navailable but not `p.byteLength` bytes, `read()` conventionally resolves\nto what is available instead of waiting for more.\n\nWhen `read()` encounters end-of-file condition, it resolves to EOF\n(`null`).\n\nWhen `read()` encounters an error, it rejects with an error.\n\nCallers should always process the `n` > `0` bytes returned before\nconsidering the EOF (`null`). Doing so correctly handles I/O errors that\nhappen after reading some bytes and also both of the allowed EOF\nbehaviors.\n\nImplementations should not retain a reference to `p`.\n\nUse\n[`itereateReader`](https://deno.land/std/streams/iterate_reader.ts?s=iterateReader)\nfrom\n[`std/streams/iterate_reader.ts`](https://deno.land/std/streams/iterate_reader.ts)\nto turn a `Reader` into an {@linkcode AsyncIterator}."
                },
                "optional": false,
                "params": [
                  {
                    "kind": "identifier",
                    "name": "p",
                    "optional": false,
                    "tsType": {
                      "repr": "Uint8Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Uint8Array"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "number",
                            "kind": "keyword",
                            "keyword": "number"
                          },
                          {
                            "repr": "null",
                            "kind": "keyword",
                            "keyword": "null"
                          }
                        ]
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "typeParams": []
              }
            ],
            "properties": [],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "ReaderSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1449,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "An abstract interface which when implemented provides an interface to read\nbytes into an array buffer synchronously.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [
              {
                "name": "readSync",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 1475,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Reads up to `p.byteLength` bytes into `p`. It resolves to the number\nof bytes read (`0` < `n` <= `p.byteLength`) and rejects if any error\nencountered. Even if `readSync()` returns `n` < `p.byteLength`, it may use\nall of `p` as scratch space during the call. If some data is available\nbut not `p.byteLength` bytes, `readSync()` conventionally returns what is\navailable instead of waiting for more.\n\nWhen `readSync()` encounters end-of-file condition, it returns EOF\n(`null`).\n\nWhen `readSync()` encounters an error, it throws with an error.\n\nCallers should always process the `n` > `0` bytes returned before\nconsidering the EOF (`null`). Doing so correctly handles I/O errors that\nhappen after reading some bytes and also both of the allowed EOF\nbehaviors.\n\nImplementations should not retain a reference to `p`.\n\nUse\n[`itereateReaderSync`](https://deno.land/std/streams/iterate_reader.ts?s=iterateReaderSync)\nfrom from\n[`std/streams/iterate_reader.ts`](https://deno.land/std/streams/iterate_reader.ts)\nto turn a `ReaderSync` into an {@linkcode Iterator}."
                },
                "optional": false,
                "params": [
                  {
                    "kind": "identifier",
                    "name": "p",
                    "optional": false,
                    "tsType": {
                      "repr": "Uint8Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Uint8Array"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              }
            ],
            "properties": [],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "Writer",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1483,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "An abstract interface which when implemented provides an interface to write\nbytes from an array buffer to a file/resource asynchronously.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [
              {
                "name": "write",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 1499,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Writes `p.byteLength` bytes from `p` to the underlying data stream. It\nresolves to the number of bytes written from `p` (`0` <= `n` <=\n`p.byteLength`) or reject with the error encountered that caused the\nwrite to stop early. `write()` must reject with a non-null error if\nwould resolve to `n` < `p.byteLength`. `write()` must not modify the\nslice data, even temporarily.\n\nThis function is one of the lowest\nlevel APIs and most users should not work with this directly, but rather use\n[`writeAll()`](https://deno.land/std/streams/write_all.ts?s=writeAll) from\n[`std/streams/write_all.ts`](https://deno.land/std/streams/write_all.ts)\ninstead.\n\nImplementations should not retain a reference to `p`."
                },
                "optional": false,
                "params": [
                  {
                    "kind": "identifier",
                    "name": "p",
                    "optional": false,
                    "tsType": {
                      "repr": "Uint8Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Uint8Array"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "typeParams": []
              }
            ],
            "properties": [],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "WriterSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1507,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "An abstract interface which when implemented provides an interface to write\nbytes from an array buffer to a file/resource synchronously.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [
              {
                "name": "writeSync",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 1517,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Writes `p.byteLength` bytes from `p` to the underlying data\nstream. It returns the number of bytes written from `p` (`0` <= `n`\n<= `p.byteLength`) and any error encountered that caused the write to\nstop early. `writeSync()` must throw a non-null error if it returns `n` <\n`p.byteLength`. `writeSync()` must not modify the slice data, even\ntemporarily.\n\nImplementations should not retain a reference to `p`."
                },
                "optional": false,
                "params": [
                  {
                    "kind": "identifier",
                    "name": "p",
                    "optional": false,
                    "tsType": {
                      "repr": "Uint8Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Uint8Array"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "properties": [],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "Closer",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1525,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "An abstract interface which when implemented provides an interface to close\nfiles/resources that were previously opened.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [
              {
                "name": "close",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 1527,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Closes the resource, \"freeing\" the backing file/resource."
                },
                "optional": false,
                "params": [],
                "returnType": {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                },
                "typeParams": []
              }
            ],
            "properties": [],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "Seeker",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1535,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "An abstract interface which when implemented provides an interface to seek\nwithin an open file/resource asynchronously.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [
              {
                "name": "seek",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 1548,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Seek sets the offset for the next `read()` or `write()` to offset,\ninterpreted according to `whence`: `Start` means relative to the\nstart of the file, `Current` means relative to the current offset,\nand `End` means relative to the end. Seek resolves to the new offset\nrelative to the start of the file.\n\nSeeking to an offset before the start of the file is an error. Seeking to\nany positive offset is legal, but the behavior of subsequent I/O\noperations on the underlying object is implementation-dependent.\n\nIt resolves with the updated offset."
                },
                "optional": false,
                "params": [
                  {
                    "kind": "identifier",
                    "name": "offset",
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        {
                          "repr": "bigint",
                          "kind": "keyword",
                          "keyword": "bigint"
                        }
                      ]
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "whence",
                    "optional": false,
                    "tsType": {
                      "repr": "SeekMode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "SeekMode"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "typeParams": []
              }
            ],
            "properties": [],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "SeekerSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1556,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "An abstract interface which when implemented provides an interface to seek\nwithin an open file/resource synchronously.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [
              {
                "name": "seekSync",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 1568,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Seek sets the offset for the next `readSync()` or `writeSync()` to\noffset, interpreted according to `whence`: `Start` means relative\nto the start of the file, `Current` means relative to the current\noffset, and `End` means relative to the end.\n\nSeeking to an offset before the start of the file is an error. Seeking to\nany positive offset is legal, but the behavior of subsequent I/O\noperations on the underlying object is implementation-dependent.\n\nIt returns the updated offset."
                },
                "optional": false,
                "params": [
                  {
                    "kind": "identifier",
                    "name": "offset",
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        {
                          "repr": "bigint",
                          "kind": "keyword",
                          "keyword": "bigint"
                        }
                      ]
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "whence",
                    "optional": false,
                    "tsType": {
                      "repr": "SeekMode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "SeekMode"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "properties": [],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "copy",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1587,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Copies from `src` to `dst` until either EOF (`null`) is read from `src` or\nan error occurs. It resolves to the number of bytes copied or rejects with\nthe first error encountered while copying.\n",
            "tags": [
              {
                "kind": "deprecated",
                "doc": "Use\n[`copy`](https://deno.land/std/streams/copy.ts?s=copy) from\n[`std/streams/copy.ts`](https://deno.land/std/streams/copy.ts)\ninstead. `Deno.copy` will be removed in the future.\n"
              },
              {
                "kind": "category",
                "doc": "I/O\n"
              },
              {
                "kind": "param",
                "name": "src",
                "doc": "The source to copy from"
              },
              {
                "kind": "param",
                "name": "dst",
                "doc": "The destination to copy to"
              },
              {
                "kind": "param",
                "name": "options",
                "doc": "Can be used to tune size of the buffer. Default size is 32kB"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "src",
                "optional": false,
                "tsType": {
                  "repr": "Reader",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Reader"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "dst",
                "optional": false,
                "tsType": {
                  "repr": "Writer",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Writer"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "bufSize",
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "iter",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1604,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Turns a Reader, `r`, into an async iterator.\n",
            "tags": [
              {
                "kind": "deprecated",
                "doc": "Use\n[`iterateReader`](https://deno.land/std/streams/iterate_reader.ts?s=iterateReader)\nfrom\n[`std/streams/iterate_reader.ts`](https://deno.land/std/streams/iterate_reader.ts)\ninstead. `Deno.iter` will be removed in the future.\n"
              },
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "r",
                "optional": false,
                "tsType": {
                  "repr": "Reader",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Reader"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "bufSize",
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                }
              }
            ],
            "returnType": {
              "repr": "AsyncIterableIterator",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "Uint8Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Uint8Array"
                    }
                  }
                ],
                "typeName": "AsyncIterableIterator"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "iterSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1620,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Turns a ReaderSync, `r`, into an iterator.\n",
            "tags": [
              {
                "kind": "deprecated",
                "doc": "Use\n[`iterateReaderSync`](https://deno.land/std/streams/iterate_reader.ts?s=iterateReaderSync)\nfrom\n[`std/streams/iterate_reader.ts`](https://deno.land/std/streams/iterate_reader.ts)\ninstead. `Deno.iterSync` will be removed in the future.\n"
              },
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "r",
                "optional": false,
                "tsType": {
                  "repr": "ReaderSync",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ReaderSync"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "bufSize",
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                }
              }
            ],
            "returnType": {
              "repr": "IterableIterator",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "Uint8Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Uint8Array"
                    }
                  }
                ],
                "typeName": "IterableIterator"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "open",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1644,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Open a file and resolve to an instance of {@linkcode Deno.FsFile}. The\nfile does not need to previously exist if using the `create` or `createNew`\nopen options. It is the caller's responsibility to close the file when\nfinished with it.\n\n```ts\nconst file = await Deno.open(\"/foo/bar.txt\", { read: true, write: true });\n// Do work with file\nfile.close();\n```\n\nRequires `allow-read` and/or `allow-write` permissions depending on\noptions.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read",
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "OpenOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OpenOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "FsFile",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "FsFile"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "openSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1666,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously open a file and return an instance of\n{@linkcode Deno.FsFile}. The file does not need to previously exist if\nusing the `create` or `createNew` open options. It is the caller's\nresponsibility to close the file when finished with it.\n\n```ts\nconst file = Deno.openSync(\"/foo/bar.txt\", { read: true, write: true });\n// Do work with file\nfile.close();\n```\n\nRequires `allow-read` and/or `allow-write` permissions depending on\noptions.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read",
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "OpenOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OpenOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "FsFile",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "FsFile"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "create",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1680,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Creates a file if none exists or truncates an existing file and resolves to\n an instance of {@linkcode Deno.FsFile}.\n\n```ts\nconst file = await Deno.create(\"/foo/bar.txt\");\n```\n\nRequires `allow-read` and `allow-write` permissions.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read",
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "FsFile",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "FsFile"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "createSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1694,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Creates a file if none exists or truncates an existing file and returns\n an instance of {@linkcode Deno.FsFile}.\n\n```ts\nconst file = Deno.createSync(\"/foo/bar.txt\");\n```\n\nRequires `allow-read` and `allow-write` permissions.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read",
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "FsFile",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "FsFile"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "read",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1723,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Read from a resource ID (`rid`) into an array buffer (`buffer`).\n\nResolves to either the number of bytes read during the operation or EOF\n(`null`) if there was nothing more to read.\n\nIt is possible for a read to successfully return with `0` bytes. This does\nnot indicate EOF.\n\nThis function is one of the lowest level APIs and most users should not\nwork with this directly, but rather use\n[`readAll()`](https://deno.land/std/streams/read_all.ts?s=readAll) from\n[`std/streams/read_all.ts`](https://deno.land/std/streams/read_all.ts)\ninstead.\n\n**It is not guaranteed that the full buffer will be read in a single call.**\n\n```ts\n// if \"/foo/bar.txt\" contains the text \"hello world\":\nconst file = await Deno.open(\"/foo/bar.txt\");\nconst buf = new Uint8Array(100);\nconst numberOfBytesRead = await Deno.read(file.rid, buf); // 11 bytes\nconst text = new TextDecoder().decode(buf);  // \"hello world\"\nDeno.close(file.rid);\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "buffer",
                "optional": false,
                "tsType": {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Uint8Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "readSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1755,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously read from a resource ID (`rid`) into an array buffer\n(`buffer`).\n\nReturns either the number of bytes read during the operation or EOF\n(`null`) if there was nothing more to read.\n\nIt is possible for a read to successfully return with `0` bytes. This does\nnot indicate EOF.\n\nThis function is one of the lowest level APIs and most users should not\nwork with this directly, but rather use\n[`readAllSync()`](https://deno.land/std/streams/read_all.ts?s=readAllSync)\nfrom\n[`std/streams/read_all.ts`](https://deno.land/std/streams/read_all.ts)\ninstead.\n\n**It is not guaranteed that the full buffer will be read in a single\ncall.**\n\n```ts\n// if \"/foo/bar.txt\" contains the text \"hello world\":\nconst file = Deno.openSync(\"/foo/bar.txt\");\nconst buf = new Uint8Array(100);\nconst numberOfBytesRead = Deno.readSync(file.rid, buf); // 11 bytes\nconst text = new TextDecoder().decode(buf);  // \"hello world\"\nDeno.close(file.rid);\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "buffer",
                "optional": false,
                "tsType": {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Uint8Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                {
                  "repr": "null",
                  "kind": "keyword",
                  "keyword": "null"
                }
              ]
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "write",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1778,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Write to the resource ID (`rid`) the contents of the array buffer (`data`).\n\nResolves to the number of bytes written. This function is one of the lowest\nlevel APIs and most users should not work with this directly, but rather use\n[`writeAll()`](https://deno.land/std/streams/write_all.ts?s=writeAll) from\n[`std/streams/write_all.ts`](https://deno.land/std/streams/write_all.ts)\ninstead.\n\n**It is not guaranteed that the full buffer will be written in a single\ncall.**\n\n```ts\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\");\nconst file = await Deno.open(\"/foo/bar.txt\", { write: true });\nconst bytesWritten = await Deno.write(file.rid, data); // 11\nDeno.close(file.rid);\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Uint8Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "writeSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1804,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously write to the resource ID (`rid`) the contents of the array\nbuffer (`data`).\n\nReturns the number of bytes written. This function is one of the lowest\nlevel APIs and most users should not work with this directly, but rather\nuse\n[`writeAllSync()`](https://deno.land/std/streams/write_all.ts?s=writeAllSync)\nfrom\n[`std/streams/write_all.ts`](https://deno.land/std/streams/write_all.ts)\ninstead.\n\n**It is not guaranteed that the full buffer will be written in a single\ncall.**\n\n```ts\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\");\nconst file = Deno.openSync(\"/foo/bar.txt\", { write: true });\nconst bytesWritten = Deno.writeSync(file.rid, data); // 11\nDeno.close(file.rid);\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Uint8Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "number",
              "kind": "keyword",
              "keyword": "number"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "seek",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1847,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Seek a resource ID (`rid`) to the given `offset` under mode given by `whence`.\nThe call resolves to the new position within the resource (bytes from the start).\n\n```ts\n// Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\nconst file = await Deno.open(\n  \"hello.txt\",\n  { read: true, write: true, truncate: true, create: true },\n);\nawait Deno.write(file.rid, new TextEncoder().encode(\"Hello world\"));\n\n// advance cursor 6 bytes\nconst cursorPosition = await Deno.seek(file.rid, 6, Deno.SeekMode.Start);\nconsole.log(cursorPosition);  // 6\nconst buf = new Uint8Array(100);\nawait file.read(buf);\nconsole.log(new TextDecoder().decode(buf)); // \"world\"\nfile.close();\n```\n\nThe seek modes work as follows:\n\n```ts\n// Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\nconst file = await Deno.open(\n  \"hello.txt\",\n  { read: true, write: true, truncate: true, create: true },\n);\nawait Deno.write(file.rid, new TextEncoder().encode(\"Hello world\"));\n\n// Seek 6 bytes from the start of the file\nconsole.log(await Deno.seek(file.rid, 6, Deno.SeekMode.Start)); // \"6\"\n// Seek 2 more bytes from the current position\nconsole.log(await Deno.seek(file.rid, 2, Deno.SeekMode.Current)); // \"8\"\n// Seek backwards 2 bytes from the end of the file\nconsole.log(await Deno.seek(file.rid, -2, Deno.SeekMode.End)); // \"9\" (i.e. 11-2)\nfile.close();\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "offset",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "bigint",
                      "kind": "keyword",
                      "keyword": "bigint"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "whence",
                "optional": false,
                "tsType": {
                  "repr": "SeekMode",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "SeekMode"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "seekSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1894,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously seek a resource ID (`rid`) to the given `offset` under mode\ngiven by `whence`. The new position within the resource (bytes from the\nstart) is returned.\n\n```ts\nconst file = Deno.openSync(\n  \"hello.txt\",\n  { read: true, write: true, truncate: true, create: true },\n);\nDeno.writeSync(file.rid, new TextEncoder().encode(\"Hello world\"));\n\n// advance cursor 6 bytes\nconst cursorPosition = Deno.seekSync(file.rid, 6, Deno.SeekMode.Start);\nconsole.log(cursorPosition);  // 6\nconst buf = new Uint8Array(100);\nfile.readSync(buf);\nconsole.log(new TextDecoder().decode(buf)); // \"world\"\nfile.close();\n```\n\nThe seek modes work as follows:\n\n```ts\n// Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\nconst file = Deno.openSync(\n  \"hello.txt\",\n  { read: true, write: true, truncate: true, create: true },\n);\nDeno.writeSync(file.rid, new TextEncoder().encode(\"Hello world\"));\n\n// Seek 6 bytes from the start of the file\nconsole.log(Deno.seekSync(file.rid, 6, Deno.SeekMode.Start)); // \"6\"\n// Seek 2 more bytes from the current position\nconsole.log(Deno.seekSync(file.rid, 2, Deno.SeekMode.Current)); // \"8\"\n// Seek backwards 2 bytes from the end of the file\nconsole.log(Deno.seekSync(file.rid, -2, Deno.SeekMode.End)); // \"9\" (i.e. 11-2)\nfile.close();\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "offset",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "bigint",
                      "kind": "keyword",
                      "keyword": "bigint"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "whence",
                "optional": false,
                "tsType": {
                  "repr": "SeekMode",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "SeekMode"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "number",
              "kind": "keyword",
              "keyword": "number"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "fsync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1917,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Flushes any pending data and metadata operations of the given file stream\nto disk.\n\n```ts\nconst file = await Deno.open(\n  \"my_file.txt\",\n  { read: true, write: true, create: true },\n);\nawait Deno.write(file.rid, new TextEncoder().encode(\"Hello World\"));\nawait Deno.ftruncate(file.rid, 1);\nawait Deno.fsync(file.rid);\nconsole.log(new TextDecoder().decode(await Deno.readFile(\"my_file.txt\"))); // H\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "fsyncSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1936,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously flushes any pending data and metadata operations of the given\nfile stream to disk.\n\n```ts\nconst file = Deno.openSync(\n  \"my_file.txt\",\n  { read: true, write: true, create: true },\n);\nDeno.writeSync(file.rid, new TextEncoder().encode(\"Hello World\"));\nDeno.ftruncateSync(file.rid, 1);\nDeno.fsyncSync(file.rid);\nconsole.log(new TextDecoder().decode(Deno.readFileSync(\"my_file.txt\"))); // H\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "fdatasync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1952,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Flushes any pending data operations of the given file stream to disk.\n ```ts\nconst file = await Deno.open(\n  \"my_file.txt\",\n  { read: true, write: true, create: true },\n);\nawait Deno.write(file.rid, new TextEncoder().encode(\"Hello World\"));\nawait Deno.fdatasync(file.rid);\nconsole.log(new TextDecoder().decode(await Deno.readFile(\"my_file.txt\"))); // Hello World\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "fdatasyncSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1970,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously flushes any pending data operations of the given file stream\nto disk.\n\n ```ts\nconst file = Deno.openSync(\n  \"my_file.txt\",\n  { read: true, write: true, create: true },\n);\nDeno.writeSync(file.rid, new TextEncoder().encode(\"Hello World\"));\nDeno.fdatasyncSync(file.rid);\nconsole.log(new TextDecoder().decode(Deno.readFileSync(\"my_file.txt\"))); // Hello World\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "close",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 1984,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Close the given resource ID (`rid`) which has been previously opened, such\nas via opening or creating a file. Closing a file when you are finished\nwith it is important to avoid leaking resources.\n\n```ts\nconst file = await Deno.open(\"my_file.txt\");\n// do work with \"file\" object\nDeno.close(file.rid);\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "class",
          "name": "FsFile",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2004,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The Deno abstraction for reading and writing files.\n\nThis is the most straight forward way of handling files within Deno and is\nrecommended over using the discreet functions within the `Deno` namespace.\n\n```ts\nconst file = await Deno.open(\"/foo/bar.txt\", { read: true });\nconst fileInfo = await file.stat();\nif (fileInfo.isFile) {\n  const buf = new Uint8Array(100);\n  const numberOfBytesRead = await file.read(buf); // 11 bytes\n  const text = new TextDecoder().decode(buf);  // \"hello world\"\n}\nfile.close();\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "classDef": {
            "isAbstract": false,
            "constructors": [
              {
                "jsDoc": {
                  "doc": "The constructor which takes a resource ID. Generally `FsFile` should\nnot be constructed directly. Instead use {@linkcode Deno.open} or\n{@linkcode Deno.openSync} to create a new instance of `FsFile`."
                },
                "accessibility": null,
                "name": "constructor",
                "params": [
                  {
                    "kind": "identifier",
                    "name": "rid",
                    "optional": false,
                    "tsType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    }
                  }
                ],
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2048,
                  "col": 4
                }
              }
            ],
            "properties": [
              {
                "jsDoc": {
                  "doc": "The resource ID associated with the file instance. The resource ID\nshould be considered an opaque reference to resource."
                },
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "readonly": true,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "rid",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2015,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "A {@linkcode ReadableStream} instance representing to the byte contents\nof the file. This makes it easy to interoperate with other web streams\nbased APIs.\n\n```ts\nconst file = await Deno.open(\"my_file.txt\", { read: true });\nconst decoder = new TextDecoder();\nfor await (const chunk of file.readable) {\n  console.log(decoder.decode(chunk));\n}\n```"
                },
                "tsType": {
                  "repr": "ReadableStream",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Uint8Array"
                        }
                      }
                    ],
                    "typeName": "ReadableStream"
                  }
                },
                "readonly": true,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "readable",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2028,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "A {@linkcode WritableStream} instance to write the contents of the\nfile. This makes it easy to interoperate with other web streams based\nAPIs.\n\n```ts\nconst items = [\"hello\", \"world\"];\nconst file = await Deno.open(\"my_file.txt\", { write: true });\nconst encoder = new TextEncoder();\nconst writer = file.writable.getWriter();\nfor (const item of items) {\n  await writer.write(encoder.encode(item));\n}\nfile.close();\n```"
                },
                "tsType": {
                  "repr": "WritableStream",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Uint8Array"
                        }
                      }
                    ],
                    "typeName": "WritableStream"
                  }
                },
                "readonly": true,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "writable",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2044,
                  "col": 4
                }
              }
            ],
            "indexSignatures": [],
            "methods": [
              {
                "jsDoc": {
                  "doc": "Write the contents of the array buffer (`p`) to the file.\n\nResolves to the number of bytes written.\n\n**It is not guaranteed that the full buffer will be written in a single\ncall.**\n\n```ts\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\");\nconst file = await Deno.open(\"/foo/bar.txt\", { write: true });\nconst bytesWritten = await file.write(data); // 11\nfile.close();\n```\n",
                  "tags": [
                    {
                      "kind": "category",
                      "doc": "I/O"
                    }
                  ]
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "write",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Uint8Array"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2066,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Synchronously write the contents of the array buffer (`p`) to the file.\n\nReturns the number of bytes written.\n\n**It is not guaranteed that the full buffer will be written in a single\ncall.**\n\n```ts\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\");\nconst file = Deno.openSync(\"/foo/bar.txt\", { write: true });\nconst bytesWritten = file.writeSync(data); // 11\nfile.close();\n```"
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "writeSync",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Uint8Array"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2082,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Truncates (or extends) the file to reach the specified `len`. If `len`\nis not specified, then the entire file contents are truncated.\n\n### Truncate the entire file\n\n```ts\nconst file = await Deno.open(\"my_file.txt\", { write: true });\nawait file.truncate();\nfile.close();\n```\n\n### Truncate part of the file\n\n```ts\n// if \"my_file.txt\" contains the text \"hello world\":\nconst file = await Deno.open(\"my_file.txt\", { write: true });\nawait file.truncate(7);\nconst buf = new Uint8Array(100);\nawait file.read(buf);\nconst text = new TextDecoder().decode(buf); // \"hello w\"\nfile.close();\n```"
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "truncate",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "len",
                      "optional": true,
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "void",
                          "kind": "keyword",
                          "keyword": "void"
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2106,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Synchronously truncates (or extends) the file to reach the specified\n`len`. If `len` is not specified, then the entire file contents are\ntruncated.\n\n### Truncate the entire file\n\n```ts\nconst file = Deno.openSync(\"my_file.txt\", { write: true });\nfile.truncateSync();\nfile.close();\n```\n\n### Truncate part of the file\n\n```ts\n// if \"my_file.txt\" contains the text \"hello world\":\nconst file = Deno.openSync(\"my_file.txt\", { write: true });\nfile.truncateSync(7);\nconst buf = new Uint8Array(100);\nfile.readSync(buf);\nconst text = new TextDecoder().decode(buf); // \"hello w\"\nfile.close();\n```"
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "truncateSync",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "len",
                      "optional": true,
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2131,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Read the file into an array buffer (`p`).\n\nResolves to either the number of bytes read during the operation or EOF\n(`null`) if there was nothing more to read.\n\nIt is possible for a read to successfully return with `0` bytes. This\ndoes not indicate EOF.\n\n**It is not guaranteed that the full buffer will be read in a single\ncall.**\n\n```ts\n// if \"/foo/bar.txt\" contains the text \"hello world\":\nconst file = await Deno.open(\"/foo/bar.txt\");\nconst buf = new Uint8Array(100);\nconst numberOfBytesRead = await file.read(buf); // 11 bytes\nconst text = new TextDecoder().decode(buf);  // \"hello world\"\nfile.close();\n```"
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "read",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Uint8Array"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "number",
                              "kind": "keyword",
                              "keyword": "number"
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2152,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Synchronously read from the file into an array buffer (`p`).\n\nReturns either the number of bytes read during the operation or EOF\n(`null`) if there was nothing more to read.\n\nIt is possible for a read to successfully return with `0` bytes. This\ndoes not indicate EOF.\n\n**It is not guaranteed that the full buffer will be read in a single\ncall.**\n\n```ts\n// if \"/foo/bar.txt\" contains the text \"hello world\":\nconst file = Deno.openSync(\"/foo/bar.txt\");\nconst buf = new Uint8Array(100);\nconst numberOfBytesRead = file.readSync(buf); // 11 bytes\nconst text = new TextDecoder().decode(buf);  // \"hello world\"\nfile.close();\n```"
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "readSync",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Uint8Array"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2173,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Seek to the given `offset` under mode given by `whence`. The call\nresolves to the new position within the resource (bytes from the start).\n\n```ts\n// Given file pointing to file with \"Hello world\", which is 11 bytes long:\nconst file = await Deno.open(\n  \"hello.txt\",\n  { read: true, write: true, truncate: true, create: true },\n);\nawait file.write(new TextEncoder().encode(\"Hello world\"));\n\n// advance cursor 6 bytes\nconst cursorPosition = await file.seek(6, Deno.SeekMode.Start);\nconsole.log(cursorPosition);  // 6\nconst buf = new Uint8Array(100);\nawait file.read(buf);\nconsole.log(new TextDecoder().decode(buf)); // \"world\"\nfile.close();\n```\n\nThe seek modes work as follows:\n\n```ts\n// Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\nconst file = await Deno.open(\n  \"hello.txt\",\n  { read: true, write: true, truncate: true, create: true },\n);\nawait file.write(new TextEncoder().encode(\"Hello world\"));\n\n// Seek 6 bytes from the start of the file\nconsole.log(await file.seek(6, Deno.SeekMode.Start)); // \"6\"\n// Seek 2 more bytes from the current position\nconsole.log(await file.seek(2, Deno.SeekMode.Current)); // \"8\"\n// Seek backwards 2 bytes from the end of the file\nconsole.log(await file.seek(-2, Deno.SeekMode.End)); // \"9\" (i.e. 11-2)\n```"
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "seek",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "offset",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "number",
                            "kind": "keyword",
                            "keyword": "number"
                          },
                          {
                            "repr": "bigint",
                            "kind": "keyword",
                            "keyword": "bigint"
                          }
                        ]
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "whence",
                      "optional": false,
                      "tsType": {
                        "repr": "SeekMode",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "SeekMode"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2212,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Synchronously seek to the given `offset` under mode given by `whence`.\nThe new position within the resource (bytes from the start) is returned.\n\n```ts\nconst file = Deno.openSync(\n  \"hello.txt\",\n  { read: true, write: true, truncate: true, create: true },\n);\nfile.writeSync(new TextEncoder().encode(\"Hello world\"));\n\n// advance cursor 6 bytes\nconst cursorPosition = file.seekSync(6, Deno.SeekMode.Start);\nconsole.log(cursorPosition);  // 6\nconst buf = new Uint8Array(100);\nfile.readSync(buf);\nconsole.log(new TextDecoder().decode(buf)); // \"world\"\nfile.close();\n```\n\nThe seek modes work as follows:\n\n```ts\n// Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\nconst file = Deno.openSync(\n  \"hello.txt\",\n  { read: true, write: true, truncate: true, create: true },\n);\nfile.writeSync(new TextEncoder().encode(\"Hello world\"));\n\n// Seek 6 bytes from the start of the file\nconsole.log(file.seekSync(6, Deno.SeekMode.Start)); // \"6\"\n// Seek 2 more bytes from the current position\nconsole.log(file.seekSync(2, Deno.SeekMode.Current)); // \"8\"\n// Seek backwards 2 bytes from the end of the file\nconsole.log(file.seekSync(-2, Deno.SeekMode.End)); // \"9\" (i.e. 11-2)\nfile.close();\n```"
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "seekSync",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "offset",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "number",
                            "kind": "keyword",
                            "keyword": "number"
                          },
                          {
                            "repr": "bigint",
                            "kind": "keyword",
                            "keyword": "bigint"
                          }
                        ]
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "whence",
                      "optional": false,
                      "tsType": {
                        "repr": "SeekMode",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "SeekMode"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2251,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Resolves to a {@linkcode Deno.FileInfo} for the file.\n\n```ts\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\n\nconst file = await Deno.open(\"hello.txt\");\nconst fileInfo = await file.stat();\nassert(fileInfo.isFile);\nfile.close();\n```"
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "stat",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "FileInfo",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "FileInfo"
                          }
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2263,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Synchronously returns a {@linkcode Deno.FileInfo} for the file.\n\n```ts\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\n\nconst file = Deno.openSync(\"hello.txt\")\nconst fileInfo = file.statSync();\nassert(fileInfo.isFile);\nfile.close();\n```"
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "statSync",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "FileInfo",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "FileInfo"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2275,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Close the file. Closing a file when you are finished with it is\nimportant to avoid leaking resources.\n\n```ts\nconst file = await Deno.open(\"my_file.txt\");\n// do work with \"file\" object\nfile.close();\n```"
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "close",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2285,
                  "col": 4
                }
              }
            ],
            "extends": null,
            "implements": [
              {
                "repr": "Reader",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Reader"
                }
              },
              {
                "repr": "ReaderSync",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ReaderSync"
                }
              },
              {
                "repr": "Writer",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Writer"
                }
              },
              {
                "repr": "WriterSync",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "WriterSync"
                }
              },
              {
                "repr": "Seeker",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Seeker"
                }
              },
              {
                "repr": "SeekerSync",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "SeekerSync"
                }
              },
              {
                "repr": "Closer",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Closer"
                }
              }
            ],
            "typeParams": [],
            "superTypeParams": []
          }
        },
        {
          "kind": "variable",
          "name": "File",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2295,
            "col": 15
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The Deno abstraction for reading and writing files.\n",
            "tags": [
              {
                "kind": "deprecated",
                "doc": "Use {@linkcode Deno.FsFile} instead. `Deno.File` will be\nremoved in the future."
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "variableDef": {
            "tsType": {
              "repr": "FsFile",
              "kind": "typeQuery",
              "typeQuery": "FsFile"
            },
            "kind": "const"
          }
        },
        {
          "kind": "function",
          "name": "consoleSize",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2309,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Gets the size of the console as columns/rows.\n\n```ts\nconst { columns, rows } = Deno.consoleSize();\n```\n\nThis returns the size of the console window as reported by the operating\nsystem. It's not a reflection of how many characters will fit within the\nconsole window, but can be used as part of that calculation.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "",
              "kind": "typeLiteral",
              "typeLiteral": {
                "methods": [],
                "properties": [
                  {
                    "name": "columns",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "rows",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": []
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "SetRawOptions",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2315,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "cbreak",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2322,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The `cbreak` option can be used to indicate that characters that\ncorrespond to a signal should still be generated. When disabling raw\nmode, this option is ignored. This functionality currently only works on\nLinux and Mac OS."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "variable",
          "name": "stdin",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2342,
            "col": 15
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "A reference to `stdin` which can be used to read directly from `stdin`.\nIt implements the Deno specific {@linkcode Reader}, {@linkcode ReaderSync},\nand {@linkcode Closer} interfaces as well as provides a\n{@linkcode ReadableStream} interface.\n\n### Reading chunks from the readable stream\n\n```ts\nconst decoder = new TextDecoder();\nfor await (const chunk of Deno.stdin.readable) {\n  const text = decoder.decode(chunk);\n  // do something with the text\n}\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "variableDef": {
            "tsType": {
              "repr": "",
              "kind": "intersection",
              "intersection": [
                {
                  "repr": "Reader",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Reader"
                  }
                },
                {
                  "repr": "ReaderSync",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ReaderSync"
                  }
                },
                {
                  "repr": "Closer",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Closer"
                  }
                },
                {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [
                      {
                        "name": "setRaw",
                        "kind": "method",
                        "params": [
                          {
                            "kind": "identifier",
                            "name": "mode",
                            "optional": false,
                            "tsType": {
                              "repr": "boolean",
                              "kind": "keyword",
                              "keyword": "boolean"
                            }
                          },
                          {
                            "kind": "identifier",
                            "name": "options",
                            "optional": true,
                            "tsType": {
                              "repr": "SetRawOptions",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "SetRawOptions"
                              }
                            }
                          }
                        ],
                        "optional": false,
                        "returnType": {
                          "repr": "void",
                          "kind": "keyword",
                          "keyword": "void"
                        },
                        "typeParams": []
                      }
                    ],
                    "properties": [
                      {
                        "name": "rid",
                        "params": [],
                        "readonly": true,
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        "typeParams": []
                      },
                      {
                        "name": "readable",
                        "params": [],
                        "readonly": true,
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "ReadableStream",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "Uint8Array",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "Uint8Array"
                                }
                              }
                            ],
                            "typeName": "ReadableStream"
                          }
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                }
              ]
            },
            "kind": "const"
          }
        },
        {
          "kind": "variable",
          "name": "stdout",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2373,
            "col": 15
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "A reference to `stdout` which can be used to write directly to `stdout`.\nIt implements the Deno specific {@linkcode Writer}, {@linkcode WriterSync},\nand {@linkcode Closer} interfaces as well as provides a\n{@linkcode WritableStream} interface.\n\nThese are low level constructs, and the {@linkcode console} interface is a\nmore straight forward way to interact with `stdout` and `stderr`.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "variableDef": {
            "tsType": {
              "repr": "",
              "kind": "intersection",
              "intersection": [
                {
                  "repr": "Writer",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Writer"
                  }
                },
                {
                  "repr": "WriterSync",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "WriterSync"
                  }
                },
                {
                  "repr": "Closer",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Closer"
                  }
                },
                {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "rid",
                        "params": [],
                        "readonly": true,
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        "typeParams": []
                      },
                      {
                        "name": "writable",
                        "params": [],
                        "readonly": true,
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "WritableStream",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "Uint8Array",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "Uint8Array"
                                }
                              }
                            ],
                            "typeName": "WritableStream"
                          }
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                }
              ]
            },
            "kind": "const"
          }
        },
        {
          "kind": "variable",
          "name": "stderr",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2390,
            "col": 15
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "A reference to `stderr` which can be used to write directly to `stderr`.\nIt implements the Deno specific {@linkcode Writer}, {@linkcode WriterSync},\nand {@linkcode Closer} interfaces as well as provides a\n{@linkcode WritableStream} interface.\n\nThese are low level constructs, and the {@linkcode console} interface is a\nmore straight forward way to interact with `stdout` and `stderr`.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "variableDef": {
            "tsType": {
              "repr": "",
              "kind": "intersection",
              "intersection": [
                {
                  "repr": "Writer",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Writer"
                  }
                },
                {
                  "repr": "WriterSync",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "WriterSync"
                  }
                },
                {
                  "repr": "Closer",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Closer"
                  }
                },
                {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "rid",
                        "params": [],
                        "readonly": true,
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        "typeParams": []
                      },
                      {
                        "name": "writable",
                        "params": [],
                        "readonly": true,
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "WritableStream",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "Uint8Array",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "Uint8Array"
                                }
                              }
                            ],
                            "typeName": "WritableStream"
                          }
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                }
              ]
            },
            "kind": "const"
          }
        },
        {
          "kind": "interface",
          "name": "OpenOptions",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2403,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Options which can be set when doing {@linkcode Deno.open} and\n{@linkcode Deno.openSync}.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "read",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2408,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Sets the option for read access. This option, when `true`, means that\nthe file should be read-able if opened.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "true"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "write",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2415,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Sets the option for write access. This option, when `true`, means that\nthe file should be write-able if opened. If the file already exists,\nany write calls on it will overwrite its contents, by default without\ntruncating it.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "false"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "append",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2424,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Sets the option for the append mode. This option, when `true`, means\nthat writes will append to a file instead of overwriting previous\ncontents.\n\nNote that setting `{ write: true, append: true }` has the same effect as\nsetting only `{ append: true }`.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "false"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "truncate",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2431,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Sets the option for truncating a previous file. If a file is\nsuccessfully opened with this option set it will truncate the file to `0`\nsize if it already exists. The file must be opened with write access\nfor truncate to work.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "false"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "create",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2437,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Sets the option to allow creating a new file, if one doesn't already\nexist at the specified path. Requires write or append access to be\nused.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "false"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "createNew",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2443,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "If set to `true`, no file, directory, or symlink is allowed to exist at\nthe target location. Requires write or append access to be used. When\ncreateNew is set to `true`, create and truncate are ignored.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "false"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "mode",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2448,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Permissions to use if creating the file (defaults to `0o666`, before\nthe process's umask).\n\nIgnored on Windows."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "ReadFileOptions",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2456,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Options which can be set when using {@linkcode Deno.readFile} or\n{@linkcode Deno.readFileSync}.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "signal",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2462,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "An abort signal to allow cancellation of the file read operation.\nIf the signal becomes aborted the readFile operation will be stopped\nand the promise returned will be rejected with an AbortError."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "isatty",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2480,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Check if a given resource id (`rid`) is a TTY (a terminal).\n\n```ts\n// This example is system and context specific\nconst nonTTYRid = Deno.openSync(\"my_file.txt\").rid;\nconst ttyRid = Deno.openSync(\"/dev/tty6\").rid;\nconsole.log(Deno.isatty(nonTTYRid)); // false\nconsole.log(Deno.isatty(ttyRid)); // true\nDeno.close(nonTTYRid);\nDeno.close(ttyRid);\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "class",
          "name": "Buffer",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2491,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "A variable-sized buffer of bytes with `read()` and `write()` methods.\n",
            "tags": [
              {
                "kind": "deprecated",
                "doc": "Use [`Buffer`](https://deno.land/std/io/buffer.ts?s=Buffer)\nfrom [`std/io/buffer.ts`](https://deno.land/std/io/buffer.ts) instead.\n`Deno.Buffer` will be removed in the future.\n"
              },
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "classDef": {
            "isAbstract": false,
            "constructors": [
              {
                "accessibility": null,
                "name": "constructor",
                "params": [
                  {
                    "kind": "identifier",
                    "name": "ab",
                    "optional": true,
                    "tsType": {
                      "repr": "ArrayBuffer",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ArrayBuffer"
                      }
                    }
                  }
                ],
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2492,
                  "col": 4
                }
              }
            ],
            "properties": [
              {
                "jsDoc": {
                  "doc": "A read only number of bytes of the unread portion of the buffer."
                },
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "readonly": true,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "length",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2506,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "The read only capacity of the buffer's underlying byte slice, that is,\nthe total space allocated for the buffer's data."
                },
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "readonly": true,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "capacity",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2509,
                  "col": 4
                }
              }
            ],
            "indexSignatures": [],
            "methods": [
              {
                "jsDoc": {
                  "doc": "Returns a slice holding the unread portion of the buffer.\n\nThe slice is valid for use only until the next buffer modification (that\nis, only until the next call to a method like `read()`, `write()`,\n`reset()`, or `truncate()`). If `options.copy` is false the slice aliases the buffer content at\nleast until the next buffer modification, so immediate changes to the\nslice will affect the result of future reads.",
                  "tags": [
                    {
                      "kind": "param",
                      "name": "options",
                      "doc": "Defaults to `{ copy: true }`"
                    }
                  ]
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "bytes",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "options",
                      "optional": true,
                      "tsType": {
                        "repr": "",
                        "kind": "typeLiteral",
                        "typeLiteral": {
                          "methods": [],
                          "properties": [
                            {
                              "name": "copy",
                              "params": [],
                              "computed": false,
                              "optional": true,
                              "tsType": {
                                "repr": "boolean",
                                "kind": "keyword",
                                "keyword": "boolean"
                              },
                              "typeParams": []
                            }
                          ],
                          "callSignatures": [],
                          "indexSignatures": []
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Uint8Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Uint8Array"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2502,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Returns whether the unread portion of the buffer is empty."
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "empty",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2504,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Discards all but the first `n` unread bytes from the buffer but\ncontinues to use the same allocated storage. It throws if `n` is\nnegative or greater than the length of the buffer."
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "truncate",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "n",
                      "optional": false,
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2513,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Resets the buffer to be empty, but it retains the underlying storage for\nuse by future writes. `.reset()` is the same as `.truncate(0)`."
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "reset",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2516,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Reads the next `p.length` bytes from the buffer or until the buffer is\ndrained. Returns the number of bytes read. If the buffer has no data to\nreturn, the return is EOF (`null`)."
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "readSync",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Uint8Array"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2520,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Reads the next `p.length` bytes from the buffer or until the buffer is\ndrained. Resolves to the number of bytes read. If the buffer has no\ndata to return, resolves to EOF (`null`).\n\nNOTE: This methods reads bytes synchronously; it's provided for\ncompatibility with `Reader` interfaces."
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "read",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Uint8Array"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "number",
                              "kind": "keyword",
                              "keyword": "number"
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2528,
                  "col": 4
                }
              },
              {
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "writeSync",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Uint8Array"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2529,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "NOTE: This methods writes bytes synchronously; it's provided for\ncompatibility with `Writer` interface."
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "write",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Uint8Array"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2532,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Grows the buffer's capacity, if necessary, to guarantee space for\nanother `n` bytes. After `.grow(n)`, at least `n` bytes can be written to\nthe buffer without another allocation. If `n` is negative, `.grow()` will\nthrow. If the buffer can't grow it will throw an error.\n\nBased on Go Lang's\n[Buffer.Grow](https://golang.org/pkg/bytes/#Buffer.Grow)."
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "grow",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "n",
                      "optional": false,
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2540,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Reads data from `r` until EOF (`null`) and appends it to the buffer,\ngrowing the buffer as needed. It resolves to the number of bytes read.\nIf the buffer becomes too large, `.readFrom()` will reject with an error.\n\nBased on Go Lang's\n[Buffer.ReadFrom](https://golang.org/pkg/bytes/#Buffer.ReadFrom)."
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "readFrom",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "r",
                      "optional": false,
                      "tsType": {
                        "repr": "Reader",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Reader"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2547,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Reads data from `r` until EOF (`null`) and appends it to the buffer,\ngrowing the buffer as needed. It returns the number of bytes read. If the\nbuffer becomes too large, `.readFromSync()` will throw an error.\n\nBased on Go Lang's\n[Buffer.ReadFrom](https://golang.org/pkg/bytes/#Buffer.ReadFrom)."
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "readFromSync",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "r",
                      "optional": false,
                      "tsType": {
                        "repr": "ReaderSync",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "ReaderSync"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2554,
                  "col": 4
                }
              }
            ],
            "extends": null,
            "implements": [
              {
                "repr": "Reader",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Reader"
                }
              },
              {
                "repr": "ReaderSync",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ReaderSync"
                }
              },
              {
                "repr": "Writer",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Writer"
                }
              },
              {
                "repr": "WriterSync",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "WriterSync"
                }
              }
            ],
            "typeParams": [],
            "superTypeParams": []
          }
        },
        {
          "kind": "function",
          "name": "readAll",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2568,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Read Reader `r` until EOF (`null`) and resolve to the content as\nUint8Array`.\n",
            "tags": [
              {
                "kind": "deprecated",
                "doc": "Use\n[`readAll`](https://deno.land/std/streams/read_all.ts?s=readAll) from\n[`std/streams/read_all.ts`](https://deno.land/std/streams/read_all.ts)\ninstead. `Deno.readAll` will be removed in the future.\n"
              },
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "r",
                "optional": false,
                "tsType": {
                  "repr": "Reader",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Reader"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "Uint8Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Uint8Array"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "readAllSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2582,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously reads Reader `r` until EOF (`null`) and returns the content\nas `Uint8Array`.\n",
            "tags": [
              {
                "kind": "deprecated",
                "doc": "Use\n[`readAllSync`](https://deno.land/std/streams/read_all.ts?s=readAllSync)\nfrom\n[`std/streams/read_all.ts`](https://deno.land/std/streams/read_all.ts)\ninstead. `Deno.readAllSync` will be removed in the future.\n"
              },
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "r",
                "optional": false,
                "tsType": {
                  "repr": "ReaderSync",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ReaderSync"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Uint8Array",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Uint8Array"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "writeAll",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2594,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Write all the content of the array buffer (`arr`) to the writer (`w`).\n",
            "tags": [
              {
                "kind": "deprecated",
                "doc": "Use\n[`writeAll`](https://deno.land/std/streams/write_all.ts?s=writeAll) from\n[`std/streams/write_all.ts`](https://deno.land/std/streams/write_all.ts)\ninstead. `Deno.writeAll` will be removed in the future.\n"
              },
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "w",
                "optional": false,
                "tsType": {
                  "repr": "Writer",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Writer"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "arr",
                "optional": false,
                "tsType": {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Uint8Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "writeAllSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2608,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously write all the content of the array buffer (`arr`) to the\nwriter (`w`).\n",
            "tags": [
              {
                "kind": "deprecated",
                "doc": "Use\n[`writeAllSync`](https://deno.land/std/streams/write_all.ts?s=writeAllSync)\nfrom\n[`std/streams/write_all.ts`](https://deno.land/std/streams/write_all.ts)\ninstead. `Deno.writeAllSync` will be removed in the future.\n"
              },
              {
                "kind": "category",
                "doc": "I/O"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "w",
                "optional": false,
                "tsType": {
                  "repr": "WriterSync",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "WriterSync"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "arr",
                "optional": false,
                "tsType": {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Uint8Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "MkdirOptions",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2615,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Options which can be set when using {@linkcode Deno.mkdir} and\n{@linkcode Deno.mkdirSync}.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "recursive",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2626,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "If set to `true`, means that any intermediate directories will also be\ncreated (as with the shell command `mkdir -p`).\n\nIntermediate directories are created with the same permissions.\n\nWhen recursive is set to `true`, succeeds silently (without changing any\npermissions) if a directory already exists at the path, or if the path\nis a symlink to an existing directory.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "false"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "mode",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2631,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Permissions to use when creating the directory (defaults to `0o777`,\nbefore the process's umask).\n\nIgnored on Windows."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "mkdir",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2649,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Creates a new directory with the specified path.\n\n```ts\nawait Deno.mkdir(\"new_dir\");\nawait Deno.mkdir(\"nested/directories\", { recursive: true });\nawait Deno.mkdir(\"restricted_access_dir\", { mode: 0o700 });\n```\n\nDefaults to throwing error if the directory already exists.\n\nRequires `allow-write` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "MkdirOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "MkdirOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "mkdirSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2669,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously creates a new directory with the specified path.\n\n```ts\nDeno.mkdirSync(\"new_dir\");\nDeno.mkdirSync(\"nested/directories\", { recursive: true });\nDeno.mkdirSync(\"restricted_access_dir\", { mode: 0o700 });\n```\n\nDefaults to throwing error if the directory already exists.\n\nRequires `allow-write` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "MkdirOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "MkdirOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "MakeTempOptions",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2677,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Options which can be set when using {@linkcode Deno.makeTempDir},\n{@linkcode Deno.makeTempDirSync}, {@linkcode Deno.makeTempFile}, and\n{@linkcode Deno.makeTempFileSync}.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "dir",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2684,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Directory where the temporary directory should be created (defaults to\nthe env variable `TMPDIR`, or the system's default, usually `/tmp`).\n\nNote that if the passed `dir` is relative, the path returned by\n`makeTempFile()` and `makeTempDir()` will also be relative. Be mindful of\nthis when changing working directory."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "prefix",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2687,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "String that should precede the random portion of the temporary\ndirectory's name."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "suffix",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2690,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "String that should follow the random portion of the temporary\ndirectory's name."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "makeTempDir",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2715,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Creates a new temporary directory in the default directory for temporary\nfiles, unless `dir` is specified. Other optional options include\nprefixing and suffixing the directory name with `prefix` and `suffix`\nrespectively.\n\nThis call resolves to the full path to the newly created directory.\n\nMultiple programs calling this function simultaneously will create different\ndirectories. It is the caller's responsibility to remove the directory when\nno longer needed.\n\n```ts\nconst tempDirName0 = await Deno.makeTempDir();  // e.g. /tmp/2894ea76\nconst tempDirName1 = await Deno.makeTempDir({ prefix: 'my_temp' }); // e.g. /tmp/my_temp339c944d\n```\n\nRequires `allow-write` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "MakeTempOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "MakeTempOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "makeTempDirSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2739,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously creates a new temporary directory in the default directory\nfor temporary files, unless `dir` is specified. Other optional options\ninclude prefixing and suffixing the directory name with `prefix` and\n`suffix` respectively.\n\nThe full path to the newly created directory is returned.\n\nMultiple programs calling this function simultaneously will create different\ndirectories. It is the caller's responsibility to remove the directory when\nno longer needed.\n\n```ts\nconst tempDirName0 = Deno.makeTempDirSync();  // e.g. /tmp/2894ea76\nconst tempDirName1 = Deno.makeTempDirSync({ prefix: 'my_temp' });  // e.g. /tmp/my_temp339c944d\n```\n\nRequires `allow-write` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "MakeTempOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "MakeTempOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "makeTempFile",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2763,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Creates a new temporary file in the default directory for temporary\nfiles, unless `dir` is specified.\n\nOther options include prefixing and suffixing the directory name with\n`prefix` and `suffix` respectively.\n\nThis call resolves to the full path to the newly created file.\n\nMultiple programs calling this function simultaneously will create\ndifferent files. It is the caller's responsibility to remove the file when\nno longer needed.\n\n```ts\nconst tmpFileName0 = await Deno.makeTempFile();  // e.g. /tmp/419e0bf2\nconst tmpFileName1 = await Deno.makeTempFile({ prefix: 'my_temp' });  // e.g. /tmp/my_temp754d3098\n```\n\nRequires `allow-write` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "MakeTempOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "MakeTempOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "makeTempFileSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2787,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously creates a new temporary file in the default directory for\ntemporary files, unless `dir` is specified.\n\nOther options include prefixing and suffixing the directory name with\n`prefix` and `suffix` respectively.\n\nThe full path to the newly created file is returned.\n\nMultiple programs calling this function simultaneously will create\ndifferent files. It is the caller's responsibility to remove the file when\nno longer needed.\n\n```ts\nconst tempFileName0 = Deno.makeTempFileSync(); // e.g. /tmp/419e0bf2\nconst tempFileName1 = Deno.makeTempFileSync({ prefix: 'my_temp' });  // e.g. /tmp/my_temp754d3098\n```\n\nRequires `allow-write` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "MakeTempOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "MakeTempOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "chmod",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2821,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Changes the permission of a specific file/directory of specified path.\nIgnores the process's umask.\n\n```ts\nawait Deno.chmod(\"/path/to/file\", 0o666);\n```\n\nThe mode is a sequence of 3 octal numbers. The first/left-most number\nspecifies the permissions for the owner. The second number specifies the\npermissions for the group. The last/right-most number specifies the\npermissions for others. For example, with a mode of 0o764, the owner (7)\ncan read/write/execute, the group (6) can read/write and everyone else (4)\ncan read only.\n\n| Number | Description |\n| ------ | ----------- |\n| 7      | read, write, and execute |\n| 6      | read and write |\n| 5      | read and execute |\n| 4      | read only |\n| 3      | write and execute |\n| 2      | write only |\n| 1      | execute only |\n| 0      | no permission |\n\nNOTE: This API currently throws on Windows\n\nRequires `allow-write` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "mode",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "chmodSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2839,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously changes the permission of a specific file/directory of\nspecified path. Ignores the process's umask.\n\n```ts\nDeno.chmodSync(\"/path/to/file\", 0o666);\n```\n\nFor a full description, see {@linkcode Deno.chmod}.\n\nNOTE: This API currently throws on Windows\n\nRequires `allow-write` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "mode",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "chown",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2860,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Change owner of a regular file or directory.\n\nThis functionality is not available on Windows.\n\n```ts\nawait Deno.chown(\"myFile.txt\", 1000, 1002);\n```\n\nRequires `allow-write` permission.\n\nThrows Error (not implemented) if executed on Windows.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System\n"
              },
              {
                "kind": "param",
                "name": "path",
                "doc": "path to the file"
              },
              {
                "kind": "param",
                "name": "uid",
                "doc": "user id (UID) of the new owner, or `null` for no change"
              },
              {
                "kind": "param",
                "name": "gid",
                "doc": "group id (GID) of the new owner, or `null` for no change"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "uid",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "gid",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "chownSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2885,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously change owner of a regular file or directory.\n\nThis functionality is not available on Windows.\n\n```ts\nDeno.chownSync(\"myFile.txt\", 1000, 1002);\n```\n\nRequires `allow-write` permission.\n\nThrows Error (not implemented) if executed on Windows.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System\n"
              },
              {
                "kind": "param",
                "name": "path",
                "doc": "path to the file"
              },
              {
                "kind": "param",
                "name": "uid",
                "doc": "user id (UID) of the new owner, or `null` for no change"
              },
              {
                "kind": "param",
                "name": "gid",
                "doc": "group id (GID) of the new owner, or `null` for no change"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "uid",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "gid",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "RemoveOptions",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2896,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Options which can be set when using {@linkcode Deno.remove} and\n{@linkcode Deno.removeSync}.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "recursive",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 2900,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "If set to `true`, path will be removed even if it's a non-empty directory.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "false"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "remove",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2918,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Removes the named file or directory.\n\n```ts\nawait Deno.remove(\"/path/to/empty_dir/or/file\");\nawait Deno.remove(\"/path/to/populated_dir/or/file\", { recursive: true });\n```\n\nThrows error if permission denied, path not found, or path is a non-empty\ndirectory and the `recursive` option isn't set to `true`.\n\nRequires `allow-write` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "RemoveOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RemoveOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "removeSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2938,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously removes the named file or directory.\n\n```ts\nDeno.removeSync(\"/path/to/empty_dir/or/file\");\nDeno.removeSync(\"/path/to/populated_dir/or/file\", { recursive: true });\n```\n\nThrows error if permission denied, path not found, or path is a non-empty\ndirectory and the `recursive` option isn't set to `true`.\n\nRequires `allow-write` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "RemoveOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RemoveOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "renameSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2959,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously renames (moves) `oldpath` to `newpath`. Paths may be files or\ndirectories. If `newpath` already exists and is not a directory,\n`renameSync()` replaces it. OS-specific restrictions may apply when\n`oldpath` and `newpath` are in different directories.\n\n```ts\nDeno.renameSync(\"old/path\", \"new/path\");\n```\n\nOn Unix-like OSes, this operation does not follow symlinks at either path.\n\nIt varies between platforms when the operation throws errors, and if so what\nthey are. It's always an error to rename anything to a non-empty directory.\n\nRequires `allow-read` and `allow-write` permissions.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read",
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "oldpath",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "newpath",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "rename",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 2984,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Renames (moves) `oldpath` to `newpath`. Paths may be files or directories.\nIf `newpath` already exists and is not a directory, `rename()` replaces it.\nOS-specific restrictions may apply when `oldpath` and `newpath` are in\ndifferent directories.\n\n```ts\nawait Deno.rename(\"old/path\", \"new/path\");\n```\n\nOn Unix-like OSes, this operation does not follow symlinks at either path.\n\nIt varies between platforms when the operation throws errors, and if so\nwhat they are. It's always an error to rename anything to a non-empty\ndirectory.\n\nRequires `allow-read` and `allow-write` permissions.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read",
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "oldpath",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "newpath",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "readTextFile",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3002,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Asynchronously reads and returns the entire contents of a file as an UTF-8\n decoded string. Reading a directory throws an error.\n\n```ts\nconst data = await Deno.readTextFile(\"hello.txt\");\nconsole.log(data);\n```\n\nRequires `allow-read` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "ReadFileOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ReadFileOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "readTextFileSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3020,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously reads and returns the entire contents of a file as an UTF-8\n decoded string. Reading a directory throws an error.\n\n```ts\nconst data = Deno.readTextFileSync(\"hello.txt\");\nconsole.log(data);\n```\n\nRequires `allow-read` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "readFile",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3037,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Reads and resolves to the entire contents of a file as an array of bytes.\n`TextDecoder` can be used to transform the bytes to string if required.\nReading a directory returns an empty data array.\n\n```ts\nconst decoder = new TextDecoder(\"utf-8\");\nconst data = await Deno.readFile(\"hello.txt\");\nconsole.log(decoder.decode(data));\n```\n\nRequires `allow-read` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "ReadFileOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ReadFileOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "Uint8Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Uint8Array"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "readFileSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3057,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously reads and returns the entire contents of a file as an array\nof bytes. `TextDecoder` can be used to transform the bytes to string if\nrequired. Reading a directory returns an empty data array.\n\n```ts\nconst decoder = new TextDecoder(\"utf-8\");\nconst data = Deno.readFileSync(\"hello.txt\");\nconsole.log(decoder.decode(data));\n```\n\nRequires `allow-read` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Uint8Array",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Uint8Array"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "FileInfo",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3066,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Provides information about a file and is returned by\n{@linkcode Deno.stat}, {@linkcode Deno.lstat}, {@linkcode Deno.statSync},\nand {@linkcode Deno.lstatSync} or from calling `stat()` and `statSync()`\non an {@linkcode Deno.FsFile} instance.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "isFile",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3069,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "True if this is info for a regular file. Mutually exclusive to\n`FileInfo.isDirectory` and `FileInfo.isSymlink`."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "isDirectory",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3072,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "True if this is info for a regular directory. Mutually exclusive to\n`FileInfo.isFile` and `FileInfo.isSymlink`."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "isSymlink",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3075,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "True if this is info for a symlink. Mutually exclusive to\n`FileInfo.isFile` and `FileInfo.isDirectory`."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "size",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3077,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The size of the file, in bytes."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "mtime",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3081,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The last modification time of the file. This corresponds to the `mtime`\nfield from `stat` on Linux/Mac OS and `ftLastWriteTime` on Windows. This\nmay not be available on all platforms."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Date",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Date"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "atime",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3085,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The last access time of the file. This corresponds to the `atime`\nfield from `stat` on Unix and `ftLastAccessTime` on Windows. This may not\nbe available on all platforms."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Date",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Date"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "birthtime",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3089,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The creation time of the file. This corresponds to the `birthtime`\nfield from `stat` on Mac/BSD and `ftCreationTime` on Windows. This may\nnot be available on all platforms."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Date",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Date"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "dev",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3091,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "ID of the device containing the file."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "ino",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3095,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Inode number.\n\n_Linux/Mac OS only._"
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "mode",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3100,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "**UNSTABLE**: Match behavior with Go on Windows for `mode`.\n\nThe underlying raw `st_mode` bits that contain the standard Unix\npermissions for this file/directory."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "nlink",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3104,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Number of hard links pointing to this file.\n\n_Linux/Mac OS only._"
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "uid",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3108,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "User ID of the owner of this file.\n\n_Linux/Mac OS only._"
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "gid",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3112,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Group ID of the owner of this file.\n\n_Linux/Mac OS only._"
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "rdev",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3116,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Device ID of this file.\n\n_Linux/Mac OS only._"
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "blksize",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3120,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Blocksize for filesystem I/O.\n\n_Linux/Mac OS only._"
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "blocks",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3124,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Number of blocks allocated to the file, in 512-byte units.\n\n_Linux/Mac OS only._"
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "isBlockDevice",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3128,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "True if this is info for a block device.\n\n_Linux/Mac OS only._"
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "isCharDevice",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3132,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "True if this is info for a char device.\n\n_Linux/Mac OS only._"
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "isFifo",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3136,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "True if this is info for a fifo.\n\n_Linux/Mac OS only._"
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "isSocket",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3140,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "True if this is info for a socket.\n\n_Linux/Mac OS only._"
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "realPath",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3162,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Resolves to the absolute normalized path, with symbolic links resolved.\n\n```ts\n// e.g. given /home/alice/file.txt and current directory /home/alice\nawait Deno.symlink(\"file.txt\", \"symlink_file.txt\");\nconst realPath = await Deno.realPath(\"./file.txt\");\nconst realSymLinkPath = await Deno.realPath(\"./symlink_file.txt\");\nconsole.log(realPath);  // outputs \"/home/alice/file.txt\"\nconsole.log(realSymLinkPath);  // outputs \"/home/alice/file.txt\"\n```\n\nRequires `allow-read` permission for the target path.\n\nAlso requires `allow-read` permission for the `CWD` if the target path is\nrelative.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "realPathSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3184,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously returns absolute normalized path, with symbolic links\nresolved.\n\n```ts\n// e.g. given /home/alice/file.txt and current directory /home/alice\nDeno.symlinkSync(\"file.txt\", \"symlink_file.txt\");\nconst realPath = Deno.realPathSync(\"./file.txt\");\nconst realSymLinkPath = Deno.realPathSync(\"./symlink_file.txt\");\nconsole.log(realPath);  // outputs \"/home/alice/file.txt\"\nconsole.log(realSymLinkPath);  // outputs \"/home/alice/file.txt\"\n```\n\nRequires `allow-read` permission for the target path.\n\nAlso requires `allow-read` permission for the `CWD` if the target path is\nrelative.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "DirEntry",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3191,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Information about a directory entry returned from {@linkcode Deno.readDir}\nand {@linkcode Deno.readDirSync}.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "name",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3194,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The file name of the entry. It is just the entity name and does not\ninclude the full path."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "isFile",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3197,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "True if this is info for a regular file. Mutually exclusive to\n`DirEntry.isDirectory` and `DirEntry.isSymlink`."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "isDirectory",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3200,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "True if this is info for a regular directory. Mutually exclusive to\n`DirEntry.isFile` and `DirEntry.isSymlink`."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "isSymlink",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3203,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "True if this is info for a symlink. Mutually exclusive to\n`DirEntry.isFile` and `DirEntry.isDirectory`."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "readDir",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3222,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Reads the directory given by `path` and returns an async iterable of\n{@linkcode Deno.DirEntry}.\n\n```ts\nfor await (const dirEntry of Deno.readDir(\"/\")) {\n  console.log(dirEntry.name);\n}\n```\n\nThrows error if `path` is not a directory.\n\nRequires `allow-read` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "AsyncIterable",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "DirEntry",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "DirEntry"
                    }
                  }
                ],
                "typeName": "AsyncIterable"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "readDirSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3240,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously reads the directory given by `path` and returns an iterable\nof `Deno.DirEntry`.\n\n```ts\nfor (const dirEntry of Deno.readDirSync(\"/\")) {\n  console.log(dirEntry.name);\n}\n```\n\nThrows error if `path` is not a directory.\n\nRequires `allow-read` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Iterable",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "DirEntry",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "DirEntry"
                    }
                  }
                ],
                "typeName": "Iterable"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "copyFile",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3257,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Copies the contents and permissions of one file to another specified path,\nby default creating a new file if needed, else overwriting. Fails if target\npath is a directory or is unwritable.\n\n```ts\nawait Deno.copyFile(\"from.txt\", \"to.txt\");\n```\n\nRequires `allow-read` permission on `fromPath`.\n\nRequires `allow-write` permission on `toPath`.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read",
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "fromPath",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "toPath",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "copyFileSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3277,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously copies the contents and permissions of one file to another\nspecified path, by default creating a new file if needed, else overwriting.\nFails if target path is a directory or is unwritable.\n\n```ts\nDeno.copyFileSync(\"from.txt\", \"to.txt\");\n```\n\nRequires `allow-read` permission on `fromPath`.\n\nRequires `allow-write` permission on `toPath`.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read",
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "fromPath",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "toPath",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "readLink",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3296,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Resolves to the full path destination of the named symbolic link.\n\n```ts\nawait Deno.symlink(\"./test.txt\", \"./test_link.txt\");\nconst target = await Deno.readLink(\"./test_link.txt\"); // full path of ./test.txt\n```\n\nThrows TypeError if called with a hard link.\n\nRequires `allow-read` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "readLinkSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3313,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously returns the full path destination of the named symbolic\nlink.\n\n```ts\nDeno.symlinkSync(\"./test.txt\", \"./test_link.txt\");\nconst target = Deno.readLinkSync(\"./test_link.txt\"); // full path of ./test.txt\n```\n\nThrows TypeError if called with a hard link.\n\nRequires `allow-read` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "lstat",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3330,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Resolves to a {@linkcode Deno.FileInfo} for the specified `path`. If\n`path` is a symlink, information for the symlink will be returned instead\nof what it points to.\n\n```ts\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\nconst fileInfo = await Deno.lstat(\"hello.txt\");\nassert(fileInfo.isFile);\n```\n\nRequires `allow-read` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "FileInfo",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "FileInfo"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "lstatSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3347,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously returns a {@linkcode Deno.FileInfo} for the specified\n`path`. If `path` is a symlink, information for the symlink will be\nreturned instead of what it points to.\n\n```ts\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\nconst fileInfo = Deno.lstatSync(\"hello.txt\");\nassert(fileInfo.isFile);\n```\n\nRequires `allow-read` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "FileInfo",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "FileInfo"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "stat",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3363,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Resolves to a {@linkcode Deno.FileInfo} for the specified `path`. Will\nalways follow symlinks.\n\n```ts\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\nconst fileInfo = await Deno.stat(\"hello.txt\");\nassert(fileInfo.isFile);\n```\n\nRequires `allow-read` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "FileInfo",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "FileInfo"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "statSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3379,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously returns a {@linkcode Deno.FileInfo} for the specified\n`path`. Will always follow symlinks.\n\n```ts\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\nconst fileInfo = Deno.statSync(\"hello.txt\");\nassert(fileInfo.isFile);\n```\n\nRequires `allow-read` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "FileInfo",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "FileInfo"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "WriteFileOptions",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3385,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Options for writing to a file.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "append",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3390,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "If set to `true`, will append to a file instead of overwriting previous\ncontents.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "false"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "create",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3395,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Sets the option to allow creating a new file, if one doesn't already\nexist at the specified path.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "true"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "createNew",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3400,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "If set to `true`, no file, directory, or symlink is allowed to exist at\nthe target location. When createNew is set to `true`, `create` is ignored.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "false"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "mode",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3402,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Permissions always applied to file."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "signal",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3408,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "An abort signal to allow cancellation of the file write operation.\n\nIf the signal becomes aborted the write file operation will be stopped\nand the promise returned will be rejected with an {@linkcode AbortError}."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "writeFile",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3429,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Write `data` to the given `path`, by default creating a new file if\nneeded, else overwriting.\n\n```ts\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\\n\");\nawait Deno.writeFile(\"hello1.txt\", data);  // overwrite \"hello1.txt\" or create it\nawait Deno.writeFile(\"hello2.txt\", data, { create: false });  // only works if \"hello2.txt\" exists\nawait Deno.writeFile(\"hello3.txt\", data, { mode: 0o777 });  // set permissions on new file\nawait Deno.writeFile(\"hello4.txt\", data, { append: true });  // add data to the end of the file\n```\n\nRequires `allow-write` permission, and `allow-read` if `options.create` is\n`false`.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read",
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Uint8Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Uint8Array"
                      }
                    },
                    {
                      "repr": "ReadableStream",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "Uint8Array",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Uint8Array"
                            }
                          }
                        ],
                        "typeName": "ReadableStream"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "WriteFileOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "WriteFileOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "writeFileSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3453,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously write `data` to the given `path`, by default creating a new\nfile if needed, else overwriting.\n\n```ts\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\\n\");\nDeno.writeFileSync(\"hello1.txt\", data);  // overwrite \"hello1.txt\" or create it\nDeno.writeFileSync(\"hello2.txt\", data, { create: false });  // only works if \"hello2.txt\" exists\nDeno.writeFileSync(\"hello3.txt\", data, { mode: 0o777 });  // set permissions on new file\nDeno.writeFileSync(\"hello4.txt\", data, { append: true });  // add data to the end of the file\n```\n\nRequires `allow-write` permission, and `allow-read` if `options.create` is\n`false`.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read",
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Uint8Array"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "WriteFileOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "WriteFileOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "writeTextFile",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3472,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Write string `data` to the given `path`, by default creating a new file if\nneeded, else overwriting.\n\n```ts\nawait Deno.writeTextFile(\"hello1.txt\", \"Hello world\\n\");  // overwrite \"hello1.txt\" or create it\n```\n\nRequires `allow-write` permission, and `allow-read` if `options.create` is\n`false`.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read",
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "ReadableStream",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          }
                        ],
                        "typeName": "ReadableStream"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "WriteFileOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "WriteFileOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "writeTextFileSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3491,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously write string `data` to the given `path`, by default creating\na new file if needed, else overwriting.\n\n```ts\nDeno.writeTextFileSync(\"hello1.txt\", \"Hello world\\n\");  // overwrite \"hello1.txt\" or create it\n```\n\nRequires `allow-write` permission, and `allow-read` if `options.create` is\n`false`.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read",
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "WriteFileOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "WriteFileOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "truncate",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3520,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Truncates (or extends) the specified file, to reach the specified `len`.\nIf `len` is not specified then the entire file contents are truncated.\n\n### Truncate the entire file\n```ts\nawait Deno.truncate(\"my_file.txt\");\n```\n\n### Truncate part of the file\n\n```ts\nconst file = await Deno.makeTempFile();\nawait Deno.writeFile(file, new TextEncoder().encode(\"Hello World\"));\nawait Deno.truncate(file, 7);\nconst data = await Deno.readFile(file);\nconsole.log(new TextDecoder().decode(data));  // \"Hello W\"\n```\n\nRequires `allow-write` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "len",
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "truncateSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3547,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously truncates (or extends) the specified file, to reach the\nspecified `len`. If `len` is not specified then the entire file contents\nare truncated.\n\n### Truncate the entire file\n\n```ts\nDeno.truncateSync(\"my_file.txt\");\n```\n\n### Truncate part of the file\n\n```ts\nconst file = Deno.makeTempFileSync();\nDeno.writeFileSync(file, new TextEncoder().encode(\"Hello World\"));\nDeno.truncateSync(file, 7);\nconst data = Deno.readFileSync(file);\nconsole.log(new TextDecoder().decode(data));\n```\n\nRequires `allow-write` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "len",
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "OpMetrics",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3550,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "Observability"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "opsDispatched",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3551,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "opsDispatchedSync",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3552,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "opsDispatchedAsync",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3553,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "opsDispatchedAsyncUnref",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3554,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "opsCompleted",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3555,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "opsCompletedSync",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3556,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "opsCompletedAsync",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3557,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "opsCompletedAsyncUnref",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3558,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "bytesSentControl",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3559,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "bytesSentData",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3560,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "bytesReceived",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3561,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "Metrics",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3565,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "Observability"
              }
            ]
          },
          "interfaceDef": {
            "extends": [
              {
                "repr": "OpMetrics",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OpMetrics"
                }
              }
            ],
            "methods": [],
            "properties": [
              {
                "name": "ops",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3566,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "OpMetrics",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "OpMetrics"
                        }
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "metrics",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3594,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Receive metrics from the privileged side of Deno. This is primarily used\nin the development of Deno. _Ops_, also called _bindings_, are the\ngo-between between Deno JavaScript sandbox and the rest of Deno.\n\n```shell\n> console.table(Deno.metrics())\n┌─────────────────────────┬────────┐\n│         (index)         │ Values │\n├─────────────────────────┼────────┤\n│      opsDispatched      │   3    │\n│    opsDispatchedSync    │   2    │\n│   opsDispatchedAsync    │   1    │\n│ opsDispatchedAsyncUnref │   0    │\n│      opsCompleted       │   3    │\n│    opsCompletedSync     │   2    │\n│    opsCompletedAsync    │   1    │\n│ opsCompletedAsyncUnref  │   0    │\n│    bytesSentControl     │   73   │\n│      bytesSentData      │   0    │\n│      bytesReceived      │  375   │\n└─────────────────────────┴────────┘\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Observability"
              }
            ]
          },
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Metrics",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Metrics"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "resources",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3620,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Returns a map of open resource IDs (_rid_) along with their string\nrepresentations. This is an internal API and as such resource\nrepresentation has `unknown` type; that means it can change any time and\nshould not be depended upon.\n\n```ts\nconsole.log(Deno.resources());\n// { 0: \"stdin\", 1: \"stdout\", 2: \"stderr\" }\nDeno.openSync('../test.file');\nconsole.log(Deno.resources());\n// { 0: \"stdin\", 1: \"stdout\", 2: \"stderr\", 3: \"fsFile\" }\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Observability"
              }
            ]
          },
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "ResourceMap",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "ResourceMap"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "FsEventFlag",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3635,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Additional information for FsEvent objects with the \"other\" kind.\n\n- `\"rescan\"`: rescan notices indicate either a lapse in the events or a\n   change in the filesystem such that events received so far can no longer\n   be relied on to represent the state of the filesystem now. An\n   application that simply reacts to file changes may not care about this.\n   An application that keeps an in-memory representation of the filesystem\n   will need to care, and will need to refresh that representation directly\n   from the filesystem.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "typeAliasDef": {
            "tsType": {
              "repr": "rescan",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "rescan"
              }
            },
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "FsEvent",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3642,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Represents a unique file system event yielded by a\n{@linkcode Deno.FsWatcher}.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "kind",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3644,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The kind/type of the file system event."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "any",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "any"
                      }
                    },
                    {
                      "repr": "access",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "access"
                      }
                    },
                    {
                      "repr": "create",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "create"
                      }
                    },
                    {
                      "repr": "modify",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "modify"
                      }
                    },
                    {
                      "repr": "remove",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "remove"
                      }
                    },
                    {
                      "repr": "other",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "other"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "paths",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3646,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "An array of paths that are associated with the file system event."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                "typeParams": []
              },
              {
                "name": "flag",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3648,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Any additional flags associated with the event."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "FsEventFlag",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "FsEventFlag"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "FsWatcher",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3658,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Returned by {@linkcode Deno.watchFs}. It is an async iterator yielding up\nsystem events. To stop watching the file system by calling `.close()`\nmethod.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "interfaceDef": {
            "extends": [
              {
                "repr": "AsyncIterable",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "FsEvent",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "FsEvent"
                      }
                    }
                  ],
                  "typeName": "AsyncIterable"
                }
              }
            ],
            "methods": [
              {
                "name": "close",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3662,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Stops watching the file system and closes the watcher resource."
                },
                "optional": false,
                "params": [],
                "returnType": {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                },
                "typeParams": []
              },
              {
                "name": "return",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3668,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Stops watching the file system and closes the watcher resource.\n",
                  "tags": [
                    {
                      "kind": "deprecated",
                      "doc": "Will be removed in the future."
                    }
                  ]
                },
                "optional": true,
                "params": [
                  {
                    "kind": "identifier",
                    "name": "value",
                    "optional": true,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "IteratorResult",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "FsEvent",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "FsEvent"
                              }
                            }
                          ],
                          "typeName": "IteratorResult"
                        }
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "typeParams": []
              },
              {
                "name": "[Symbol.asyncIterator]",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3669,
                  "col": 4
                },
                "computed": true,
                "optional": false,
                "params": [],
                "returnType": {
                  "repr": "AsyncIterableIterator",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "FsEvent",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "FsEvent"
                        }
                      }
                    ],
                    "typeName": "AsyncIterableIterator"
                  }
                },
                "typeParams": []
              }
            ],
            "properties": [
              {
                "name": "rid",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3660,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The resource id."
                },
                "params": [],
                "readonly": true,
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "watchFs",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3711,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Watch for file system events against one or more `paths`, which can be\nfiles or directories. These paths must exist already. One user action (e.g.\n`touch test.file`) can generate multiple file system events. Likewise,\none user action can result in multiple file paths in one event (e.g. `mv\nold_name.txt new_name.txt`).\n\nThe recursive option is `true` by default and, for directories, will watch\nthe specified directory and all sub directories.\n\nNote that the exact ordering of the events can vary between operating\nsystems.\n\n```ts\nconst watcher = Deno.watchFs(\"/\");\nfor await (const event of watcher) {\n   console.log(\">>>> event\", event);\n   // { kind: \"create\", paths: [ \"/foo.txt\" ] }\n}\n```\n\nCall `watcher.close()` to stop watching.\n\n```ts\nconst watcher = Deno.watchFs(\"/\");\n\nsetTimeout(() => {\n  watcher.close();\n}, 5000);\n\nfor await (const event of watcher) {\n   console.log(\">>>> event\", event);\n}\n```\n\nRequires `allow-read` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "paths",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "recursive",
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "boolean",
                          "kind": "keyword",
                          "keyword": "boolean"
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                }
              }
            ],
            "returnType": {
              "repr": "FsWatcher",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "FsWatcher"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "RunOptions",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3722,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "deprecated",
                "doc": "Use {@linkcode Deno.Command} instead.\n\nOptions which can be used with {@linkcode Deno.run}.\n"
              },
              {
                "kind": "category",
                "doc": "Sub Process"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "cmd",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3727,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Arguments to pass.\n\n_Note_: the first element needs to be a path to the executable that is\nbeing run."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "typeOperator",
                      "typeOperator": {
                        "operator": "readonly",
                        "tsType": {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          }
                        }
                      }
                    },
                    {
                      "repr": "",
                      "kind": "tuple",
                      "tuple": [
                        {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            },
                            {
                              "repr": "URL",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "URL"
                              }
                            }
                          ]
                        },
                        {
                          "repr": "",
                          "kind": "rest",
                          "rest": {
                            "repr": "",
                            "kind": "array",
                            "array": {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            }
                          }
                        }
                      ]
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "cwd",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3730,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The current working directory that should be used when running the\nsub-process."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "env",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3732,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Any environment variables to be set when running the sub-process."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "stdout",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3746,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "By default subprocess inherits `stdout` of parent process. To change\nthis this option can be set to a resource ID (_rid_) of an open file,\n`\"inherit\"`, `\"piped\"`, or `\"null\"`:\n\n- _number_: the resource ID of an open file/resource. This allows you to\n  write to a file.\n- `\"inherit\"`: The default if unspecified. The subprocess inherits from the\n  parent.\n- `\"piped\"`: A new pipe should be arranged to connect the parent and child\n  sub-process.\n- `\"null\"`: This stream will be ignored. This is the equivalent of attaching\n  the stream to `/dev/null`."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "inherit",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "inherit"
                      }
                    },
                    {
                      "repr": "piped",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "piped"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "null"
                      }
                    },
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "stderr",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3760,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "By default subprocess inherits `stderr` of parent process. To change\nthis this option can be set to a resource ID (_rid_) of an open file,\n`\"inherit\"`, `\"piped\"`, or `\"null\"`:\n\n- _number_: the resource ID of an open file/resource. This allows you to\n  write to a file.\n- `\"inherit\"`: The default if unspecified. The subprocess inherits from the\n  parent.\n- `\"piped\"`: A new pipe should be arranged to connect the parent and child\n  sub-process.\n- `\"null\"`: This stream will be ignored. This is the equivalent of attaching\n  the stream to `/dev/null`."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "inherit",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "inherit"
                      }
                    },
                    {
                      "repr": "piped",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "piped"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "null"
                      }
                    },
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "stdin",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3774,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "By default subprocess inherits `stdin` of parent process. To change\nthis this option can be set to a resource ID (_rid_) of an open file,\n`\"inherit\"`, `\"piped\"`, or `\"null\"`:\n\n- _number_: the resource ID of an open file/resource. This allows you to\n  read from a file.\n- `\"inherit\"`: The default if unspecified. The subprocess inherits from the\n  parent.\n- `\"piped\"`: A new pipe should be arranged to connect the parent and child\n  sub-process.\n- `\"null\"`: This stream will be ignored. This is the equivalent of attaching\n  the stream to `/dev/null`."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "inherit",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "inherit"
                      }
                    },
                    {
                      "repr": "piped",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "piped"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "null"
                      }
                    },
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    }
                  ]
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "ProcessStatus",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3787,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "deprecated",
                "doc": "Use {@linkcode Deno.Command} instead.\n\nThe status resolved from the `.status()` method of a\n{@linkcode Deno.Process} instance.\n\nIf `success` is `true`, then `code` will be `0`, but if `success` is\n`false`, the sub-process exit code will be set in `code`.\n"
              },
              {
                "kind": "category",
                "doc": "Sub Process"
              }
            ]
          },
          "typeAliasDef": {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "success",
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "true",
                          "kind": "literal",
                          "literal": {
                            "kind": "boolean",
                            "boolean": true
                          }
                        },
                        "typeParams": []
                      },
                      {
                        "name": "code",
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "0",
                          "kind": "literal",
                          "literal": {
                            "kind": "number",
                            "number": 0.0
                          }
                        },
                        "typeParams": []
                      },
                      {
                        "name": "signal",
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                },
                {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "success",
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "false",
                          "kind": "literal",
                          "literal": {
                            "kind": "boolean",
                            "boolean": false
                          }
                        },
                        "typeParams": []
                      },
                      {
                        "name": "code",
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        "typeParams": []
                      },
                      {
                        "name": "signal",
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                }
              ]
            },
            "typeParams": []
          }
        },
        {
          "kind": "class",
          "name": "Process",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3806,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "* @deprecated Use {@linkcode Deno.Command} instead.\n\nRepresents an instance of a sub process that is returned from\n{@linkcode Deno.run} which can be used to manage the sub-process.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Sub Process"
              }
            ]
          },
          "classDef": {
            "isAbstract": false,
            "constructors": [],
            "properties": [
              {
                "jsDoc": {
                  "doc": "The resource ID of the sub-process."
                },
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "readonly": true,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "rid",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3808,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "The operating system's process ID for the sub-process."
                },
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "readonly": true,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "pid",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3810,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "A reference to the sub-processes `stdin`, which allows interacting with\nthe sub-process at a low level."
                },
                "tsType": {
                  "repr": "",
                  "kind": "conditional",
                  "conditionalType": {
                    "checkType": {
                      "repr": "",
                      "kind": "indexedAccess",
                      "indexedAccess": {
                        "readonly": false,
                        "objType": {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        },
                        "indexType": {
                          "repr": "stdin",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "stdin"
                          }
                        }
                      }
                    },
                    "extendsType": {
                      "repr": "piped",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "piped"
                      }
                    },
                    "trueType": {
                      "repr": "",
                      "kind": "intersection",
                      "intersection": [
                        {
                          "repr": "Writer",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Writer"
                          }
                        },
                        {
                          "repr": "Closer",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Closer"
                          }
                        },
                        {
                          "repr": "",
                          "kind": "typeLiteral",
                          "typeLiteral": {
                            "methods": [],
                            "properties": [
                              {
                                "name": "writable",
                                "params": [],
                                "computed": false,
                                "optional": false,
                                "tsType": {
                                  "repr": "WritableStream",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": [
                                      {
                                        "repr": "Uint8Array",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "Uint8Array"
                                        }
                                      }
                                    ],
                                    "typeName": "WritableStream"
                                  }
                                },
                                "typeParams": []
                              }
                            ],
                            "callSignatures": [],
                            "indexSignatures": []
                          }
                        }
                      ]
                    },
                    "falseType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "",
                          "kind": "parenthesized",
                          "parenthesized": {
                            "repr": "",
                            "kind": "intersection",
                            "intersection": [
                              {
                                "repr": "Writer",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "Writer"
                                }
                              },
                              {
                                "repr": "Closer",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "Closer"
                                }
                              },
                              {
                                "repr": "",
                                "kind": "typeLiteral",
                                "typeLiteral": {
                                  "methods": [],
                                  "properties": [
                                    {
                                      "name": "writable",
                                      "params": [],
                                      "computed": false,
                                      "optional": false,
                                      "tsType": {
                                        "repr": "WritableStream",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": [
                                            {
                                              "repr": "Uint8Array",
                                              "kind": "typeRef",
                                              "typeRef": {
                                                "typeParams": null,
                                                "typeName": "Uint8Array"
                                              }
                                            }
                                          ],
                                          "typeName": "WritableStream"
                                        }
                                      },
                                      "typeParams": []
                                    }
                                  ],
                                  "callSignatures": [],
                                  "indexSignatures": []
                                }
                              }
                            ]
                          }
                        },
                        {
                          "repr": "null",
                          "kind": "keyword",
                          "keyword": "null"
                        }
                      ]
                    }
                  }
                },
                "readonly": true,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "stdin",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3813,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "A reference to the sub-processes `stdout`, which allows interacting with\nthe sub-process at a low level."
                },
                "tsType": {
                  "repr": "",
                  "kind": "conditional",
                  "conditionalType": {
                    "checkType": {
                      "repr": "",
                      "kind": "indexedAccess",
                      "indexedAccess": {
                        "readonly": false,
                        "objType": {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        },
                        "indexType": {
                          "repr": "stdout",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "stdout"
                          }
                        }
                      }
                    },
                    "extendsType": {
                      "repr": "piped",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "piped"
                      }
                    },
                    "trueType": {
                      "repr": "",
                      "kind": "intersection",
                      "intersection": [
                        {
                          "repr": "Reader",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Reader"
                          }
                        },
                        {
                          "repr": "Closer",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Closer"
                          }
                        },
                        {
                          "repr": "",
                          "kind": "typeLiteral",
                          "typeLiteral": {
                            "methods": [],
                            "properties": [
                              {
                                "name": "readable",
                                "params": [],
                                "computed": false,
                                "optional": false,
                                "tsType": {
                                  "repr": "ReadableStream",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": [
                                      {
                                        "repr": "Uint8Array",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "Uint8Array"
                                        }
                                      }
                                    ],
                                    "typeName": "ReadableStream"
                                  }
                                },
                                "typeParams": []
                              }
                            ],
                            "callSignatures": [],
                            "indexSignatures": []
                          }
                        }
                      ]
                    },
                    "falseType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "",
                          "kind": "parenthesized",
                          "parenthesized": {
                            "repr": "",
                            "kind": "intersection",
                            "intersection": [
                              {
                                "repr": "Reader",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "Reader"
                                }
                              },
                              {
                                "repr": "Closer",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "Closer"
                                }
                              },
                              {
                                "repr": "",
                                "kind": "typeLiteral",
                                "typeLiteral": {
                                  "methods": [],
                                  "properties": [
                                    {
                                      "name": "readable",
                                      "params": [],
                                      "computed": false,
                                      "optional": false,
                                      "tsType": {
                                        "repr": "ReadableStream",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": [
                                            {
                                              "repr": "Uint8Array",
                                              "kind": "typeRef",
                                              "typeRef": {
                                                "typeParams": null,
                                                "typeName": "Uint8Array"
                                              }
                                            }
                                          ],
                                          "typeName": "ReadableStream"
                                        }
                                      },
                                      "typeParams": []
                                    }
                                  ],
                                  "callSignatures": [],
                                  "indexSignatures": []
                                }
                              }
                            ]
                          }
                        },
                        {
                          "repr": "null",
                          "kind": "keyword",
                          "keyword": "null"
                        }
                      ]
                    }
                  }
                },
                "readonly": true,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "stdout",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3819,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "A reference to the sub-processes `stderr`, which allows interacting with\nthe sub-process at a low level."
                },
                "tsType": {
                  "repr": "",
                  "kind": "conditional",
                  "conditionalType": {
                    "checkType": {
                      "repr": "",
                      "kind": "indexedAccess",
                      "indexedAccess": {
                        "readonly": false,
                        "objType": {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        },
                        "indexType": {
                          "repr": "stderr",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "stderr"
                          }
                        }
                      }
                    },
                    "extendsType": {
                      "repr": "piped",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "piped"
                      }
                    },
                    "trueType": {
                      "repr": "",
                      "kind": "intersection",
                      "intersection": [
                        {
                          "repr": "Reader",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Reader"
                          }
                        },
                        {
                          "repr": "Closer",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Closer"
                          }
                        },
                        {
                          "repr": "",
                          "kind": "typeLiteral",
                          "typeLiteral": {
                            "methods": [],
                            "properties": [
                              {
                                "name": "readable",
                                "params": [],
                                "computed": false,
                                "optional": false,
                                "tsType": {
                                  "repr": "ReadableStream",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": [
                                      {
                                        "repr": "Uint8Array",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "Uint8Array"
                                        }
                                      }
                                    ],
                                    "typeName": "ReadableStream"
                                  }
                                },
                                "typeParams": []
                              }
                            ],
                            "callSignatures": [],
                            "indexSignatures": []
                          }
                        }
                      ]
                    },
                    "falseType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "",
                          "kind": "parenthesized",
                          "parenthesized": {
                            "repr": "",
                            "kind": "intersection",
                            "intersection": [
                              {
                                "repr": "Reader",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "Reader"
                                }
                              },
                              {
                                "repr": "Closer",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "Closer"
                                }
                              },
                              {
                                "repr": "",
                                "kind": "typeLiteral",
                                "typeLiteral": {
                                  "methods": [],
                                  "properties": [
                                    {
                                      "name": "readable",
                                      "params": [],
                                      "computed": false,
                                      "optional": false,
                                      "tsType": {
                                        "repr": "ReadableStream",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": [
                                            {
                                              "repr": "Uint8Array",
                                              "kind": "typeRef",
                                              "typeRef": {
                                                "typeParams": null,
                                                "typeName": "Uint8Array"
                                              }
                                            }
                                          ],
                                          "typeName": "ReadableStream"
                                        }
                                      },
                                      "typeParams": []
                                    }
                                  ],
                                  "callSignatures": [],
                                  "indexSignatures": []
                                }
                              }
                            ]
                          }
                        },
                        {
                          "repr": "null",
                          "kind": "keyword",
                          "keyword": "null"
                        }
                      ]
                    }
                  }
                },
                "readonly": true,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "stderr",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3825,
                  "col": 4
                }
              }
            ],
            "indexSignatures": [],
            "methods": [
              {
                "jsDoc": {
                  "doc": "Wait for the process to exit and return its exit status.\n\nCalling this function multiple times will return the same status.\n\nThe `stdin` reference to the process will be closed before waiting to\navoid a deadlock.\n\nIf `stdout` and/or `stderr` were set to `\"piped\"`, they must be closed\nmanually before the process can exit.\n\nTo run process to completion and collect output from both `stdout` and\n`stderr` use:\n\n```ts\nconst p = Deno.run({ cmd: [ \"echo\", \"hello world\" ], stderr: 'piped', stdout: 'piped' });\nconst [status, stdout, stderr] = await Promise.all([\n  p.status(),\n  p.output(),\n  p.stderrOutput()\n]);\np.close();\n```"
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "status",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "ProcessStatus",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "ProcessStatus"
                          }
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3852,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Buffer the stdout until EOF and return it as `Uint8Array`.\n\nYou must set `stdout` to `\"piped\"` when creating the process.\n\nThis calls `close()` on stdout after its done."
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "output",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Uint8Array",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Uint8Array"
                          }
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3858,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Buffer the stderr until EOF and return it as `Uint8Array`.\n\nYou must set `stderr` to `\"piped\"` when creating the process.\n\nThis calls `close()` on stderr after its done."
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "stderrOutput",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Uint8Array",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Uint8Array"
                          }
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3864,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Clean up resources associated with the sub-process instance."
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "close",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3866,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Send a signal to process.\nDefault signal is `\"SIGTERM\"`.\n\n```ts\nconst p = Deno.run({ cmd: [ \"sleep\", \"20\" ]});\np.kill(\"SIGTERM\");\np.close();\n```"
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "kill",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "signo",
                      "optional": true,
                      "tsType": {
                        "repr": "Signal",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Signal"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 3876,
                  "col": 4
                }
              }
            ],
            "extends": null,
            "implements": [],
            "typeParams": [
              {
                "name": "T",
                "constraint": {
                  "repr": "RunOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RunOptions"
                  }
                },
                "default": {
                  "repr": "RunOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RunOptions"
                  }
                }
              }
            ],
            "superTypeParams": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "Signal",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3883,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Operating signals which can be listened for or sent to sub-processes. What\nsignals and what their standard behaviors are OS dependent.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Runtime Environment"
              }
            ]
          },
          "typeAliasDef": {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "SIGABRT",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGABRT"
                  }
                },
                {
                  "repr": "SIGALRM",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGALRM"
                  }
                },
                {
                  "repr": "SIGBREAK",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGBREAK"
                  }
                },
                {
                  "repr": "SIGBUS",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGBUS"
                  }
                },
                {
                  "repr": "SIGCHLD",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGCHLD"
                  }
                },
                {
                  "repr": "SIGCONT",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGCONT"
                  }
                },
                {
                  "repr": "SIGEMT",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGEMT"
                  }
                },
                {
                  "repr": "SIGFPE",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGFPE"
                  }
                },
                {
                  "repr": "SIGHUP",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGHUP"
                  }
                },
                {
                  "repr": "SIGILL",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGILL"
                  }
                },
                {
                  "repr": "SIGINFO",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGINFO"
                  }
                },
                {
                  "repr": "SIGINT",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGINT"
                  }
                },
                {
                  "repr": "SIGIO",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGIO"
                  }
                },
                {
                  "repr": "SIGKILL",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGKILL"
                  }
                },
                {
                  "repr": "SIGPIPE",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGPIPE"
                  }
                },
                {
                  "repr": "SIGPROF",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGPROF"
                  }
                },
                {
                  "repr": "SIGPWR",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGPWR"
                  }
                },
                {
                  "repr": "SIGQUIT",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGQUIT"
                  }
                },
                {
                  "repr": "SIGSEGV",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGSEGV"
                  }
                },
                {
                  "repr": "SIGSTKFLT",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGSTKFLT"
                  }
                },
                {
                  "repr": "SIGSTOP",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGSTOP"
                  }
                },
                {
                  "repr": "SIGSYS",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGSYS"
                  }
                },
                {
                  "repr": "SIGTERM",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGTERM"
                  }
                },
                {
                  "repr": "SIGTRAP",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGTRAP"
                  }
                },
                {
                  "repr": "SIGTSTP",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGTSTP"
                  }
                },
                {
                  "repr": "SIGTTIN",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGTTIN"
                  }
                },
                {
                  "repr": "SIGTTOU",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGTTOU"
                  }
                },
                {
                  "repr": "SIGURG",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGURG"
                  }
                },
                {
                  "repr": "SIGUSR1",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGUSR1"
                  }
                },
                {
                  "repr": "SIGUSR2",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGUSR2"
                  }
                },
                {
                  "repr": "SIGVTALRM",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGVTALRM"
                  }
                },
                {
                  "repr": "SIGWINCH",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGWINCH"
                  }
                },
                {
                  "repr": "SIGXCPU",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGXCPU"
                  }
                },
                {
                  "repr": "SIGXFSZ",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SIGXFSZ"
                  }
                }
              ]
            },
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "addSignalListener",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3935,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Registers the given function as a listener of the given signal event.\n\n```ts\nDeno.addSignalListener(\n  \"SIGTERM\",\n  () => {\n    console.log(\"SIGTERM!\")\n  }\n);\n```\n\n_Note_: On Windows only `\"SIGINT\"` (CTRL+C) and `\"SIGBREAK\"` (CTRL+Break)\nare supported.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Runtime Environment"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": false,
                "tsType": {
                  "repr": "Signal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Signal"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "handler",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "params": [],
                    "typeParams": []
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "removeSignalListener",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 3953,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Removes the given signal listener that has been registered with\n{@linkcode Deno.addSignalListener}.\n\n```ts\nconst listener = () => {\n  console.log(\"SIGTERM!\")\n};\nDeno.addSignalListener(\"SIGTERM\", listener);\nDeno.removeSignalListener(\"SIGTERM\", listener);\n```\n\n_Note_: On Windows only `\"SIGINT\"` (CTRL+C) and `\"SIGBREAK\"` (CTRL+Break)\nare supported.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Runtime Environment"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": false,
                "tsType": {
                  "repr": "Signal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Signal"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "handler",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "params": [],
                    "typeParams": []
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "run",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4009,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "deprecated",
                "doc": "Use {@linkcode Deno.Command} instead.\n\nSpawns new subprocess. RunOptions must contain at a minimum the `opt.cmd`,\nan array of program arguments, the first of which is the binary.\n\n```ts\nconst p = Deno.run({\ncmd: [\"curl\", \"https://example.com\"],\n});\nconst status = await p.status();\n```\n\nSubprocess uses same working directory as parent process unless `opt.cwd`\nis specified.\n\nEnvironmental variables from parent process can be cleared using `opt.clearEnv`.\nDoesn't guarantee that only `opt.env` variables are present,\nas the OS may set environmental variables for processes.\n\nEnvironmental variables for subprocess can be specified using `opt.env`\nmapping.\n\n`opt.uid` sets the child process’s user ID. This translates to a setuid call\nin the child process. Failure in the setuid call will cause the spawn to fail.\n\n`opt.gid` is similar to `opt.uid`, but sets the group ID of the child process.\nThis has the same semantics as the uid field.\n\nBy default subprocess inherits stdio of parent process. To change\nthis this, `opt.stdin`, `opt.stdout`, and `opt.stderr` can be set\nindependently to a resource ID (_rid_) of an open file, `\"inherit\"`,\n`\"piped\"`, or `\"null\"`:\n\n- _number_: the resource ID of an open file/resource. This allows you to\nread or write to a file.\n- `\"inherit\"`: The default if unspecified. The subprocess inherits from the\nparent.\n- `\"piped\"`: A new pipe should be arranged to connect the parent and child\nsub-process.\n- `\"null\"`: This stream will be ignored. This is the equivalent of attaching\nthe stream to `/dev/null`.\n\nDetails of the spawned process are returned as an instance of\n{@linkcode Deno.Process}.\n\nRequires `allow-run` permission.\n"
              },
              {
                "kind": "tags",
                "tags": [
                  "allow-run"
                ]
              },
              {
                "kind": "category",
                "doc": "Sub Process"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "opt",
                "optional": false,
                "tsType": {
                  "repr": "T",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "T"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Process",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "T",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "T"
                    }
                  }
                ],
                "typeName": "Process"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": [
              {
                "name": "T",
                "constraint": {
                  "repr": "RunOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RunOptions"
                  }
                },
                "default": {
                  "repr": "RunOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RunOptions"
                  }
                }
              }
            ]
          }
        },
        {
          "kind": "class",
          "name": "Command",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4075,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Create a child process.\n\nIf any stdio options are not set to `\"piped\"`, accessing the corresponding\nfield on the `Command` or its `CommandOutput` will throw a `TypeError`.\n\nIf `stdin` is set to `\"piped\"`, the `stdin` {@linkcode WritableStream}\nneeds to be closed manually.\n",
            "tags": [
              {
                "kind": "example",
                "doc": "Spawn a subprocess and pipe the output to a file\n\n```ts\nconst command = new Deno.Command(Deno.execPath(), {\n  args: [\n    \"eval\",\n    \"console.log('Hello World')\",\n  ],\n  stdin: \"piped\",\n  stdout: \"piped\",\n});\nconst child = command.spawn();\n\n// open a file and pipe the subprocess output to it.\nchild.stdout.pipeTo(\n  Deno.openSync(\"output\", { write: true, create: true }).writable,\n);\n\n// manually close stdin\nchild.stdin.close();\nconst status = await child.status;\n```\n"
              },
              {
                "kind": "example",
                "doc": "Spawn a subprocess and collect its output\n\n```ts\nconst command = new Deno.Command(Deno.execPath(), {\n  args: [\n    \"eval\",\n    \"console.log('hello'); console.error('world')\",\n  ],\n});\nconst { code, stdout, stderr } = await command.output();\nconsole.assert(code === 0);\nconsole.assert(\"hello\\n\" === new TextDecoder().decode(stdout));\nconsole.assert(\"world\\n\" === new TextDecoder().decode(stderr));\n```\n"
              },
              {
                "kind": "example",
                "doc": "Spawn a subprocess and collect its output synchronously\n\n```ts\nconst command = new Deno.Command(Deno.execPath(), {\n  args: [\n    \"eval\",\n    \"console.log('hello'); console.error('world')\",\n  ],\n});\nconst { code, stdout, stderr } = command.outputSync();\nconsole.assert(code === 0);\nconsole.assert(\"hello\\n\" === new TextDecoder().decode(stdout));\nconsole.assert(\"world\\n\" === new TextDecoder().decode(stderr));\n```\n"
              },
              {
                "kind": "tags",
                "tags": [
                  "allow-run"
                ]
              },
              {
                "kind": "category",
                "doc": "Sub Process"
              }
            ]
          },
          "classDef": {
            "isAbstract": false,
            "constructors": [
              {
                "accessibility": null,
                "name": "constructor",
                "params": [
                  {
                    "kind": "identifier",
                    "name": "command",
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "URL",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "URL"
                          }
                        }
                      ]
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "options",
                    "optional": true,
                    "tsType": {
                      "repr": "CommandOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "CommandOptions"
                      }
                    }
                  }
                ],
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4076,
                  "col": 4
                }
              }
            ],
            "properties": [],
            "indexSignatures": [],
            "methods": [
              {
                "jsDoc": {
                  "doc": "Executes the {@linkcode Deno.Command}, waiting for it to finish and\ncollecting all of its output.\nIf `spawn()` was called, calling this function will collect the remaining\noutput.\n\nWill throw an error if `stdin: \"piped\"` is set.\n\nIf options `stdout` or `stderr` are not set to `\"piped\"`, accessing the\ncorresponding field on {@linkcode Deno.CommandOutput} will throw a `TypeError`."
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "output",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "CommandOutput",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "CommandOutput"
                          }
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4088,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Synchronously executes the {@linkcode Deno.Command}, waiting for it to\nfinish and collecting all of its output.\n\nWill throw an error if `stdin: \"piped\"` is set.\n\nIf options `stdout` or `stderr` are not set to `\"piped\"`, accessing the\ncorresponding field on {@linkcode Deno.CommandOutput} will throw a `TypeError`."
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "outputSync",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "CommandOutput",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "CommandOutput"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4098,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Spawns a streamable subprocess, allowing to use the other methods."
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "spawn",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "ChildProcess",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ChildProcess"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4102,
                  "col": 4
                }
              }
            ],
            "extends": null,
            "implements": [],
            "typeParams": [],
            "superTypeParams": []
          }
        },
        {
          "kind": "class",
          "name": "ChildProcess",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4111,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The interface for handling a child process returned from\n{@linkcode Deno.Command.spawn}.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Sub Process"
              }
            ]
          },
          "classDef": {
            "isAbstract": false,
            "constructors": [],
            "properties": [
              {
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "readonly": true,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "pid",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4115,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Get the status of the child."
                },
                "tsType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "CommandStatus",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "CommandStatus"
                        }
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "readonly": true,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "status",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4117,
                  "col": 4
                }
              }
            ],
            "indexSignatures": [],
            "methods": [
              {
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "stdin",
                "kind": "getter",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "WritableStream",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Uint8Array",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Uint8Array"
                          }
                        }
                      ],
                      "typeName": "WritableStream"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4112,
                  "col": 4
                }
              },
              {
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "stdout",
                "kind": "getter",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "ReadableStream",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Uint8Array",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Uint8Array"
                          }
                        }
                      ],
                      "typeName": "ReadableStream"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4113,
                  "col": 4
                }
              },
              {
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "stderr",
                "kind": "getter",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "ReadableStream",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Uint8Array",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Uint8Array"
                          }
                        }
                      ],
                      "typeName": "ReadableStream"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4114,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Waits for the child to exit completely, returning all its output and\nstatus."
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "output",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "CommandOutput",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "CommandOutput"
                          }
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4121,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Kills the process with given {@linkcode Deno.Signal}.\n",
                  "tags": [
                    {
                      "kind": "param",
                      "name": "signo",
                      "default": "\"SIGTERM\""
                    }
                  ]
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "kill",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "signo",
                      "optional": true,
                      "tsType": {
                        "repr": "Signal",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Signal"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4126,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Ensure that the status of the child process prevents the Deno process\nfrom exiting."
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "ref",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4130,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Ensure that the status of the child process does not block the Deno\nprocess from exiting."
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "unref",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4133,
                  "col": 4
                }
              }
            ],
            "extends": null,
            "implements": [],
            "typeParams": [],
            "superTypeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "CommandOptions",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4141,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Options which can be set when calling {@linkcode Deno.Command}.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Sub Process"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "args",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4143,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Arguments to pass to the process."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                "typeParams": []
              },
              {
                "name": "cwd",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4149,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The working directory of the process.\n\nIf not specified, the `cwd` of the parent process is used."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "clearEnv",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4158,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Clear environmental variables from parent process.\n\nDoesn't guarantee that only `env` variables are present, as the OS may\nset environmental variables for processes.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "false"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "env",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4160,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Environmental variables to pass to the subprocess."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "uid",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4165,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Sets the child process’s user ID. This translates to a setuid call in the\nchild process. Failure in the set uid call will cause the spawn to fail."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "gid",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4167,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Similar to `uid`, but sets the group ID of the child process."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "signal",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4175,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "An {@linkcode AbortSignal} that allows closing the process using the\ncorresponding {@linkcode AbortController} by sending the process a\nSIGTERM signal.\n\nNot supported in {@linkcode Deno.Command.outputSync}."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                },
                "typeParams": []
              },
              {
                "name": "stdin",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4181,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "How `stdin` of the spawned process should be handled.\n\nDefaults to `\"inherit\"` for `output` & `outputSync`,\nand `\"inherit\"` for `spawn`."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "piped",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "piped"
                      }
                    },
                    {
                      "repr": "inherit",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "inherit"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "null"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "stdout",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4186,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "How `stdout` of the spawned process should be handled.\n\nDefaults to `\"piped\"` for `output` & `outputSync`,\nand `\"inherit\"` for `spawn`."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "piped",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "piped"
                      }
                    },
                    {
                      "repr": "inherit",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "inherit"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "null"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "stderr",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4191,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "How `stderr` of the spawned process should be handled.\n\nDefaults to `\"piped\"` for `output` & `outputSync`,\nand `\"inherit\"` for `spawn`."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "piped",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "piped"
                      }
                    },
                    {
                      "repr": "inherit",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "inherit"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "null"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "windowsRawArguments",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4197,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Skips quoting and escaping of the arguments on windows. This option\nis ignored on non-windows platforms.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "false"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "CommandStatus",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4203,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "Sub Process"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "success",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4206,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "If the child process exits with a 0 status code, `success` will be set\nto `true`, otherwise `false`."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "code",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4208,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The exit code of the child process."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "signal",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4210,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The signal associated with the child process."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Signal",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Signal"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "CommandOutput",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4220,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The interface returned from calling {@linkcode Deno.Command.output} or\n{@linkcode Deno.Command.outputSync} which represents the result of spawning the\nchild process.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Sub Process"
              }
            ]
          },
          "interfaceDef": {
            "extends": [
              {
                "repr": "CommandStatus",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "CommandStatus"
                }
              }
            ],
            "methods": [],
            "properties": [
              {
                "name": "stdout",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4222,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The buffered output from the child process' `stdout`."
                },
                "params": [],
                "readonly": true,
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Uint8Array"
                  }
                },
                "typeParams": []
              },
              {
                "name": "stderr",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4224,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The buffered output from the child process' `stderr`."
                },
                "params": [],
                "readonly": true,
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Uint8Array"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "InspectOptions",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4230,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Option which can be specified when performing {@linkcode Deno.inspect}.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Console and Debugging"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "colors",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4234,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Stylize output with ANSI colors.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "false"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "compact",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4238,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Try to fit more than one entry of a collection on the same line.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "true"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "depth",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4242,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Traversal depth for nested objects.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "4"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "iterableLimit",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4246,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The maximum number of iterable entries to print.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "100"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "showProxy",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4250,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Show a Proxy's target and handler.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "false"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "sorted",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4254,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Sort Object, Set and Map entries by key.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "false"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "trailingComma",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4258,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Add a trailing comma for multiline collections.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "false"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "getters",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4262,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Evaluate the result of calling getters.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "false"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "showHidden",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4266,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Show an object's non-enumerable properties.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "false"
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "strAbbreviateSize",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4269,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The maximum length of a string before it is truncated with an\nellipsis."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "inspect",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4309,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Converts the input into a string that has the same format as printed by\n`console.log()`.\n\n```ts\nconst obj = {\n  a: 10,\n  b: \"hello\",\n};\nconst objAsString = Deno.inspect(obj); // { a: 10, b: \"hello\" }\nconsole.log(obj);  // prints same value as objAsString, e.g. { a: 10, b: \"hello\" }\n```\n\nA custom inspect functions can be registered on objects, via the symbol\n`Symbol.for(\"Deno.customInspect\")`, to control and customize the output\nof `inspect()` or when using `console` logging:\n\n```ts\nclass A {\n  x = 10;\n  y = \"hello\";\n  [Symbol.for(\"Deno.customInspect\")]() {\n    return `x=${this.x}, y=${this.y}`;\n  }\n}\n\nconst inStringFormat = Deno.inspect(new A()); // \"x=10, y=hello\"\nconsole.log(inStringFormat);  // prints \"x=10, y=hello\"\n```\n\nA depth can be specified by using the `depth` option:\n\n```ts\nDeno.inspect({a: {b: {c: {d: 'hello'}}}}, {depth: 2}); // { a: { b: [Object] } }\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Console and Debugging"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "value",
                "optional": false,
                "tsType": {
                  "repr": "unknown",
                  "kind": "keyword",
                  "keyword": "unknown"
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "InspectOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "InspectOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "PermissionName",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4315,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The name of a privileged feature which needs permission.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Permissions"
              }
            ]
          },
          "typeAliasDef": {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "run",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "run"
                  }
                },
                {
                  "repr": "read",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "read"
                  }
                },
                {
                  "repr": "write",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "write"
                  }
                },
                {
                  "repr": "net",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "net"
                  }
                },
                {
                  "repr": "env",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "env"
                  }
                },
                {
                  "repr": "sys",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "sys"
                  }
                },
                {
                  "repr": "ffi",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "ffi"
                  }
                },
                {
                  "repr": "hrtime",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "hrtime"
                  }
                }
              ]
            },
            "typeParams": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "PermissionState",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4333,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The current status of the permission:\n\n- `\"granted\"` - the permission has been granted.\n- `\"denied\"` - the permission has been explicitly denied.\n- `\"prompt\"` - the permission has not explicitly granted nor denied.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Permissions"
              }
            ]
          },
          "typeAliasDef": {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "granted",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "granted"
                  }
                },
                {
                  "repr": "denied",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "denied"
                  }
                },
                {
                  "repr": "prompt",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "prompt"
                  }
                }
              ]
            },
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "RunPermissionDescriptor",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4344,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The permission descriptor for the `allow-run` permission, which controls\naccess to what sub-processes can be executed by Deno. The option `command`\nallows scoping the permission to a specific executable.\n\n**Warning, in practice, `allow-run` is effectively the same as `allow-all`\nin the sense that malicious code could execute any arbitrary code on the\nhost.**\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Permissions"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "name",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4345,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "run",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "run"
                  }
                },
                "typeParams": []
              },
              {
                "name": "command",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4348,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The `allow-run` permission can be scoped to a specific executable,\nwhich would be relative to the start-up CWD of the Deno CLI."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "ReadPermissionDescriptor",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4360,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The permission descriptor for the `allow-read` permissions, which controls\naccess to reading resources from the local host. The option `path` allows\nscoping the permission to a specific path (and if the path is a directory\nany sub paths).\n\nPermission granted under `allow-read` only allows runtime code to attempt\nto read, the underlying operating system may apply additional permissions.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Permissions"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "name",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4361,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "read",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "read"
                  }
                },
                "typeParams": []
              },
              {
                "name": "path",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4364,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The `allow-read` permission can be scoped to a specific path (and if\nthe path is a directory, any sub paths)."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "WritePermissionDescriptor",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4376,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The permission descriptor for the `allow-write` permissions, which\ncontrols access to writing to resources from the local host. The option\n`path` allow scoping the permission to a specific path (and if the path is\na directory any sub paths).\n\nPermission granted under `allow-write` only allows runtime code to attempt\nto write, the underlying operating system may apply additional permissions.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Permissions"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "name",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4377,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "write",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "write"
                  }
                },
                "typeParams": []
              },
              {
                "name": "path",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4380,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The `allow-write` permission can be scoped to a specific path (and if\nthe path is a directory, any sub paths)."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "NetPermissionDescriptor",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4389,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The permission descriptor for the `allow-net` permissions, which controls\naccess to opening network ports and connecting to remote hosts via the\nnetwork. The option `host` allows scoping the permission for outbound\nconnection to a specific host and port.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Permissions"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "name",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4390,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "net",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "net"
                  }
                },
                "typeParams": []
              },
              {
                "name": "host",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4396,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Optional host string of the form `\"<hostname>[:<port>]\"`. Examples:\n\n     \"github.com\"\n     \"deno.land:8080\""
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "EnvPermissionDescriptor",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4406,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The permission descriptor for the `allow-env` permissions, which controls\naccess to being able to read and write to the process environment variables\nas well as access other information about the environment. The option\n`variable` allows scoping the permission to a specific environment\nvariable.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Permissions"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "name",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4407,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "env",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "env"
                  }
                },
                "typeParams": []
              },
              {
                "name": "variable",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4409,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Optional environment variable name (e.g. `PATH`)."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "SysPermissionDescriptor",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4418,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The permission descriptor for the `allow-sys` permissions, which controls\naccess to sensitive host system information, which malicious code might\nattempt to exploit. The option `kind` allows scoping the permission to a\nspecific piece of information.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Permissions"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "name",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4419,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "sys",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "sys"
                  }
                },
                "typeParams": []
              },
              {
                "name": "kind",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4421,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The specific information to scope the permission to."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "loadavg",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "loadavg"
                      }
                    },
                    {
                      "repr": "hostname",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "hostname"
                      }
                    },
                    {
                      "repr": "systemMemoryInfo",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "systemMemoryInfo"
                      }
                    },
                    {
                      "repr": "networkInterfaces",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "networkInterfaces"
                      }
                    },
                    {
                      "repr": "osRelease",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "osRelease"
                      }
                    },
                    {
                      "repr": "osUptime",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "osUptime"
                      }
                    },
                    {
                      "repr": "uid",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "uid"
                      }
                    },
                    {
                      "repr": "gid",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "gid"
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "FfiPermissionDescriptor",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4439,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The permission descriptor for the `allow-ffi` permissions, which controls\naccess to loading _foreign_ code and interfacing with it via the\n[Foreign Function Interface API](https://deno.land/manual/runtime/ffi_api)\navailable in Deno.  The option `path` allows scoping the permission to a\nspecific path on the host.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Permissions"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "name",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4440,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ffi",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "ffi"
                  }
                },
                "typeParams": []
              },
              {
                "name": "path",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4442,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Optional path on the local host to scope the permission to."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "HrtimePermissionDescriptor",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4452,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The permission descriptor for the `allow-hrtime` permission, which\ncontrols if the runtime code has access to high resolution time. High\nresolution time is consider sensitive information, because it can be used\nby malicious code to gain information about the host that it might\notherwise have access to.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Permissions"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "name",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4453,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "hrtime",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "hrtime"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "PermissionDescriptor",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4464,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Permission descriptors which define a permission and can be queried,\nrequested, or revoked.\n\nView the specifics of the individual descriptors for more information about\neach permission kind.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Permissions"
              }
            ]
          },
          "typeAliasDef": {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "RunPermissionDescriptor",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RunPermissionDescriptor"
                  }
                },
                {
                  "repr": "ReadPermissionDescriptor",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ReadPermissionDescriptor"
                  }
                },
                {
                  "repr": "WritePermissionDescriptor",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "WritePermissionDescriptor"
                  }
                },
                {
                  "repr": "NetPermissionDescriptor",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "NetPermissionDescriptor"
                  }
                },
                {
                  "repr": "EnvPermissionDescriptor",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "EnvPermissionDescriptor"
                  }
                },
                {
                  "repr": "SysPermissionDescriptor",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "SysPermissionDescriptor"
                  }
                },
                {
                  "repr": "FfiPermissionDescriptor",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "FfiPermissionDescriptor"
                  }
                },
                {
                  "repr": "HrtimePermissionDescriptor",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "HrtimePermissionDescriptor"
                  }
                }
              ]
            },
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "PermissionStatusEventMap",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4478,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The interface which defines what event types are supported by\n{@linkcode PermissionStatus} instances.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Permissions"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "change",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4479,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Event",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Event"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "class",
          "name": "PermissionStatus",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4486,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "An {@linkcode EventTarget} returned from the {@linkcode Deno.permissions}\nAPI which can provide updates to any state changes of the permission.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Permissions"
              }
            ]
          },
          "classDef": {
            "isAbstract": false,
            "constructors": [],
            "properties": [
              {
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "parenthesized",
                      "parenthesized": {
                        "repr": "",
                        "kind": "fnOrConstructor",
                        "fnOrConstructor": {
                          "constructor": false,
                          "tsType": {
                            "repr": "any",
                            "kind": "keyword",
                            "keyword": "any"
                          },
                          "params": [
                            {
                              "kind": "identifier",
                              "name": "this",
                              "optional": false,
                              "tsType": {
                                "repr": "PermissionStatus",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "PermissionStatus"
                                }
                              }
                            },
                            {
                              "kind": "identifier",
                              "name": "ev",
                              "optional": false,
                              "tsType": {
                                "repr": "Event",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "Event"
                                }
                              }
                            }
                          ],
                          "typeParams": []
                        }
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "readonly": false,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "onchange",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4488,
                  "col": 4
                }
              },
              {
                "tsType": {
                  "repr": "PermissionState",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "PermissionState"
                  }
                },
                "readonly": true,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "state",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4489,
                  "col": 4
                }
              }
            ],
            "indexSignatures": [],
            "methods": [
              {
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "addEventListener",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "type",
                      "optional": false,
                      "tsType": {
                        "repr": "K",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "K"
                        }
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "listener",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "fnOrConstructor",
                        "fnOrConstructor": {
                          "constructor": false,
                          "tsType": {
                            "repr": "any",
                            "kind": "keyword",
                            "keyword": "any"
                          },
                          "params": [
                            {
                              "kind": "identifier",
                              "name": "this",
                              "optional": false,
                              "tsType": {
                                "repr": "PermissionStatus",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "PermissionStatus"
                                }
                              }
                            },
                            {
                              "kind": "identifier",
                              "name": "ev",
                              "optional": false,
                              "tsType": {
                                "repr": "",
                                "kind": "indexedAccess",
                                "indexedAccess": {
                                  "readonly": false,
                                  "objType": {
                                    "repr": "PermissionStatusEventMap",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "PermissionStatusEventMap"
                                    }
                                  },
                                  "indexType": {
                                    "repr": "K",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "K"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "typeParams": []
                        }
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "options",
                      "optional": true,
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "boolean",
                            "kind": "keyword",
                            "keyword": "boolean"
                          },
                          {
                            "repr": "AddEventListenerOptions",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "AddEventListenerOptions"
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": [
                    {
                      "name": "K",
                      "constraint": {
                        "repr": "",
                        "kind": "typeOperator",
                        "typeOperator": {
                          "operator": "keyof",
                          "tsType": {
                            "repr": "PermissionStatusEventMap",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "PermissionStatusEventMap"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4490,
                  "col": 4
                }
              },
              {
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "addEventListener",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "type",
                      "optional": false,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "listener",
                      "optional": false,
                      "tsType": {
                        "repr": "EventListenerOrEventListenerObject",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "EventListenerOrEventListenerObject"
                        }
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "options",
                      "optional": true,
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "boolean",
                            "kind": "keyword",
                            "keyword": "boolean"
                          },
                          {
                            "repr": "AddEventListenerOptions",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "AddEventListenerOptions"
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4498,
                  "col": 4
                }
              },
              {
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "removeEventListener",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "type",
                      "optional": false,
                      "tsType": {
                        "repr": "K",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "K"
                        }
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "listener",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "fnOrConstructor",
                        "fnOrConstructor": {
                          "constructor": false,
                          "tsType": {
                            "repr": "any",
                            "kind": "keyword",
                            "keyword": "any"
                          },
                          "params": [
                            {
                              "kind": "identifier",
                              "name": "this",
                              "optional": false,
                              "tsType": {
                                "repr": "PermissionStatus",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "PermissionStatus"
                                }
                              }
                            },
                            {
                              "kind": "identifier",
                              "name": "ev",
                              "optional": false,
                              "tsType": {
                                "repr": "",
                                "kind": "indexedAccess",
                                "indexedAccess": {
                                  "readonly": false,
                                  "objType": {
                                    "repr": "PermissionStatusEventMap",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "PermissionStatusEventMap"
                                    }
                                  },
                                  "indexType": {
                                    "repr": "K",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "K"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "typeParams": []
                        }
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "options",
                      "optional": true,
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "boolean",
                            "kind": "keyword",
                            "keyword": "boolean"
                          },
                          {
                            "repr": "EventListenerOptions",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "EventListenerOptions"
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": [
                    {
                      "name": "K",
                      "constraint": {
                        "repr": "",
                        "kind": "typeOperator",
                        "typeOperator": {
                          "operator": "keyof",
                          "tsType": {
                            "repr": "PermissionStatusEventMap",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "PermissionStatusEventMap"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4503,
                  "col": 4
                }
              },
              {
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "removeEventListener",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "type",
                      "optional": false,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "listener",
                      "optional": false,
                      "tsType": {
                        "repr": "EventListenerOrEventListenerObject",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "EventListenerOrEventListenerObject"
                        }
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "options",
                      "optional": true,
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "boolean",
                            "kind": "keyword",
                            "keyword": "boolean"
                          },
                          {
                            "repr": "EventListenerOptions",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "EventListenerOptions"
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4511,
                  "col": 4
                }
              }
            ],
            "extends": "EventTarget",
            "implements": [],
            "typeParams": [],
            "superTypeParams": []
          }
        },
        {
          "kind": "class",
          "name": "Permissions",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4539,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Deno's permission management API.\n\nThe class which provides the interface for the {@linkcode Deno.permissions}\nglobal instance and is based on the web platform\n[Permissions API](https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API),\nthough some proposed parts of the API which are useful in a server side\nruntime context were removed or abandoned in the web platform specification\nwhich is why it was chosen to locate it in the {@linkcode Deno} namespace\ninstead.\n\nBy default, if the `stdin`/`stdout` is TTY for the Deno CLI (meaning it can\nsend and receive text), then the CLI will prompt the user to grant\npermission when an un-granted permission is requested. This behavior can\nbe changed by using the `--no-prompt` command at startup. When prompting\nthe CLI will request the narrowest permission possible, potentially making\nit annoying to the user. The permissions APIs allow the code author to\nrequest a wider set of permissions at one time in order to provide a better\nuser experience.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Permissions"
              }
            ]
          },
          "classDef": {
            "isAbstract": false,
            "constructors": [],
            "properties": [],
            "indexSignatures": [],
            "methods": [
              {
                "jsDoc": {
                  "doc": "Resolves to the current status of a permission.\n\nNote, if the permission is already granted, `request()` will not prompt\nthe user again, therefore `query()` is only necessary if you are going\nto react differently existing permissions without wanting to modify them\nor prompt the user to modify them.\n\n```ts\nconst status = await Deno.permissions.query({ name: \"read\", path: \"/etc\" });\nconsole.log(status.state);\n```"
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "query",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "desc",
                      "optional": false,
                      "tsType": {
                        "repr": "PermissionDescriptor",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "PermissionDescriptor"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "PermissionStatus",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "PermissionStatus"
                          }
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4552,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Returns the current status of a permission.\n\nNote, if the permission is already granted, `request()` will not prompt\nthe user again, therefore `querySync()` is only necessary if you are going\nto react differently existing permissions without wanting to modify them\nor prompt the user to modify them.\n\n```ts\nconst status = Deno.permissions.querySync({ name: \"read\", path: \"/etc\" });\nconsole.log(status.state);\n```"
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "querySync",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "desc",
                      "optional": false,
                      "tsType": {
                        "repr": "PermissionDescriptor",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "PermissionDescriptor"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "PermissionStatus",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "PermissionStatus"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4566,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Revokes a permission, and resolves to the state of the permission.\n\n```ts\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\n\nconst status = await Deno.permissions.revoke({ name: \"run\" });\nassert(status.state !== \"granted\")\n```"
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "revoke",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "desc",
                      "optional": false,
                      "tsType": {
                        "repr": "PermissionDescriptor",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "PermissionDescriptor"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "PermissionStatus",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "PermissionStatus"
                          }
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4577,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Revokes a permission, and returns the state of the permission.\n\n```ts\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\n\nconst status = Deno.permissions.revokeSync({ name: \"run\" });\nassert(status.state !== \"granted\")\n```"
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "revokeSync",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "desc",
                      "optional": false,
                      "tsType": {
                        "repr": "PermissionDescriptor",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "PermissionDescriptor"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "PermissionStatus",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "PermissionStatus"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4588,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Requests the permission, and resolves to the state of the permission.\n\nIf the permission is already granted, the user will not be prompted to\ngrant the permission again.\n\n```ts\nconst status = await Deno.permissions.request({ name: \"env\" });\nif (status.state === \"granted\") {\n  console.log(\"'env' permission is granted.\");\n} else {\n  console.log(\"'env' permission is denied.\");\n}\n```"
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "request",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "desc",
                      "optional": false,
                      "tsType": {
                        "repr": "PermissionDescriptor",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "PermissionDescriptor"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "PermissionStatus",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "PermissionStatus"
                          }
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4604,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Requests the permission, and returns the state of the permission.\n\nIf the permission is already granted, the user will not be prompted to\ngrant the permission again.\n\n```ts\nconst status = Deno.permissions.requestSync({ name: \"env\" });\nif (status.state === \"granted\") {\n  console.log(\"'env' permission is granted.\");\n} else {\n  console.log(\"'env' permission is denied.\");\n}\n```"
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "requestSync",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "desc",
                      "optional": false,
                      "tsType": {
                        "repr": "PermissionDescriptor",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "PermissionDescriptor"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "PermissionStatus",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "PermissionStatus"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4620,
                  "col": 4
                }
              }
            ],
            "extends": null,
            "implements": [],
            "typeParams": [],
            "superTypeParams": []
          }
        },
        {
          "kind": "variable",
          "name": "permissions",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4695,
            "col": 15
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Deno's permission management API.\n\nIt is a singleton instance of the {@linkcode Permissions} object and is\nbased on the web platform\n[Permissions API](https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API),\nthough some proposed parts of the API which are useful in a server side\nruntime context were removed or abandoned in the web platform specification\nwhich is why it was chosen to locate it in the {@linkcode Deno} namespace\ninstead.\n\nBy default, if the `stdin`/`stdout` is TTY for the Deno CLI (meaning it can\nsend and receive text), then the CLI will prompt the user to grant\npermission when an un-granted permission is requested. This behavior can\nbe changed by using the `--no-prompt` command at startup. When prompting\nthe CLI will request the narrowest permission possible, potentially making\nit annoying to the user. The permissions APIs allow the code author to\nrequest a wider set of permissions at one time in order to provide a better\nuser experience.\n\nRequesting already granted permissions will not prompt the user and will\nreturn that the permission was granted.\n\n### Querying\n\n```ts\nconst status = await Deno.permissions.query({ name: \"read\", path: \"/etc\" });\nconsole.log(status.state);\n```\n\n```ts\nconst status = Deno.permissions.querySync({ name: \"read\", path: \"/etc\" });\nconsole.log(status.state);\n```\n\n### Revoking\n\n```ts\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\n\nconst status = await Deno.permissions.revoke({ name: \"run\" });\nassert(status.state !== \"granted\")\n```\n\n```ts\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\n\nconst status = Deno.permissions.revokeSync({ name: \"run\" });\nassert(status.state !== \"granted\")\n```\n\n### Requesting\n\n```ts\nconst status = await Deno.permissions.request({ name: \"env\" });\nif (status.state === \"granted\") {\n  console.log(\"'env' permission is granted.\");\n} else {\n  console.log(\"'env' permission is denied.\");\n}\n```\n\n```ts\nconst status = Deno.permissions.requestSync({ name: \"env\" });\nif (status.state === \"granted\") {\n  console.log(\"'env' permission is granted.\");\n} else {\n  console.log(\"'env' permission is denied.\");\n}\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Permissions"
              }
            ]
          },
          "variableDef": {
            "tsType": {
              "repr": "Permissions",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Permissions"
              }
            },
            "kind": "const"
          }
        },
        {
          "kind": "variable",
          "name": "build",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4708,
            "col": 15
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Information related to the build of the current Deno runtime.\n\nUsers are discouraged from code branching based on this information, as\nassumptions about what is available in what build environment might change\nover time. Developers should specifically sniff out the features they\nintend to use.\n\nThe intended use for the information is for logging and debugging purposes.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Runtime Environment"
              }
            ]
          },
          "variableDef": {
            "tsType": {
              "repr": "",
              "kind": "typeLiteral",
              "typeLiteral": {
                "methods": [],
                "properties": [
                  {
                    "name": "target",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "arch",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "x86_64",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "x86_64"
                          }
                        },
                        {
                          "repr": "aarch64",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "aarch64"
                          }
                        }
                      ]
                    },
                    "typeParams": []
                  },
                  {
                    "name": "os",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "darwin",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "darwin"
                          }
                        },
                        {
                          "repr": "linux",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "linux"
                          }
                        },
                        {
                          "repr": "windows",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "windows"
                          }
                        },
                        {
                          "repr": "freebsd",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "freebsd"
                          }
                        },
                        {
                          "repr": "netbsd",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "netbsd"
                          }
                        },
                        {
                          "repr": "aix",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "aix"
                          }
                        },
                        {
                          "repr": "solaris",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "solaris"
                          }
                        },
                        {
                          "repr": "illumos",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "illumos"
                          }
                        }
                      ]
                    },
                    "typeParams": []
                  },
                  {
                    "name": "vendor",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "env",
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": []
              }
            },
            "kind": "const"
          }
        },
        {
          "kind": "variable",
          "name": "version",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4743,
            "col": 15
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Version information related to the current Deno CLI runtime environment.\n\nUsers are discouraged from code branching based on this information, as\nassumptions about what is available in what build environment might change\nover time. Developers should specifically sniff out the features they\nintend to use.\n\nThe intended use for the information is for logging and debugging purposes.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Runtime Environment"
              }
            ]
          },
          "variableDef": {
            "tsType": {
              "repr": "",
              "kind": "typeLiteral",
              "typeLiteral": {
                "methods": [],
                "properties": [
                  {
                    "name": "deno",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "v8",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "typescript",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": []
              }
            },
            "kind": "const"
          }
        },
        {
          "kind": "variable",
          "name": "args",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4778,
            "col": 15
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Returns the script arguments to the program.\n\nGive the following command line invocation of Deno:\n\n```sh\ndeno run --allow-read https://deno.land/std/examples/cat.ts /etc/passwd\n```\n\nThen `Deno.args` will contain:\n\n```ts\n[ \"/etc/passwd\" ]\n```\n\nIf you are looking for a structured way to parse arguments, there is the\n[`std/flags`](https://deno.land/std/flags) module as part of the Deno\nstandard library.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Runtime Environment"
              }
            ]
          },
          "variableDef": {
            "tsType": {
              "repr": "",
              "kind": "array",
              "array": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            "kind": "const"
          }
        },
        {
          "kind": "variable",
          "name": "customInspect",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4790,
            "col": 15
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "A symbol which can be used as a key for a custom method which will be\ncalled when `Deno.inspect()` is called, or when the object is logged to\nthe console.\n",
            "tags": [
              {
                "kind": "deprecated",
                "doc": "This symbol is deprecated since 1.9. Use\n`Symbol.for(\"Deno.customInspect\")` instead.\n"
              },
              {
                "kind": "category",
                "doc": "Console and Debugging"
              }
            ]
          },
          "variableDef": {
            "tsType": {
              "repr": "",
              "kind": "typeOperator",
              "typeOperator": {
                "operator": "unique",
                "tsType": {
                  "repr": "symbol",
                  "kind": "keyword",
                  "keyword": "symbol"
                }
              }
            },
            "kind": "const"
          }
        },
        {
          "kind": "variable",
          "name": "mainModule",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4800,
            "col": 15
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The URL of the entrypoint module entered from the command-line. It\nrequires read permission to the CWD.\n\nAlso see {@linkcode ImportMeta} for other related information.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read"
                ]
              },
              {
                "kind": "category",
                "doc": "Runtime Environment"
              }
            ]
          },
          "variableDef": {
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "kind": "const"
          }
        },
        {
          "kind": "interface",
          "name": "SymlinkOptions",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4806,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Options that can be used with {@linkcode symlink} and\n{@linkcode symlinkSync}.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 4809,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "If the symbolic link should be either a file or directory. This option\nonly applies to Windows and is ignored on other operating systems."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "file",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "file"
                      }
                    },
                    {
                      "repr": "dir",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "dir"
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "symlink",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4827,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Creates `newpath` as a symbolic link to `oldpath`.\n\nThe `options.type` parameter can be set to `\"file\"` or `\"dir\"`. This\nargument is only available on Windows and ignored on other platforms.\n\n```ts\nawait Deno.symlink(\"old/name\", \"new/name\");\n```\n\nRequires full `allow-read` and `allow-write` permissions.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read",
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "oldpath",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "newpath",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "SymlinkOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "SymlinkOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "symlinkSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4848,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Creates `newpath` as a symbolic link to `oldpath`.\n\nThe `options.type` parameter can be set to `\"file\"` or `\"dir\"`. This\nargument is only available on Windows and ignored on other platforms.\n\n```ts\nDeno.symlinkSync(\"old/name\", \"new/name\");\n```\n\nRequires full `allow-read` and `allow-write` permissions.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-read",
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "oldpath",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "newpath",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "SymlinkOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "SymlinkOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "ftruncate",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4893,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Truncates or extends the specified file stream, to reach the specified\n`len`.\n\nIf `len` is not specified then the entire file contents are truncated as if\n`len` was set to `0`.\n\nIf the file previously was larger than this new length, the extra data is\nlost.\n\nIf the file previously was shorter, it is extended, and the extended part\nreads as null bytes ('\\0').\n\n### Truncate the entire file\n\n```ts\nconst file = await Deno.open(\n  \"my_file.txt\",\n  { read: true, write: true, create: true }\n);\nawait Deno.ftruncate(file.rid);\n```\n\n### Truncate part of the file\n\n```ts\nconst file = await Deno.open(\n  \"my_file.txt\",\n  { read: true, write: true, create: true }\n);\nawait Deno.write(file.rid, new TextEncoder().encode(\"Hello World\"));\nawait Deno.ftruncate(file.rid, 7);\nconst data = new Uint8Array(32);\nawait Deno.read(file.rid, data);\nconsole.log(new TextDecoder().decode(data)); // Hello W\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "len",
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "ftruncateSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4935,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously truncates or extends the specified file stream, to reach the\nspecified `len`.\n\nIf `len` is not specified then the entire file contents are truncated as if\n`len` was set to `0`.\n\nIf the file previously was larger than this new length, the extra data is\nlost.\n\nIf the file previously was shorter, it is extended, and the extended part\nreads as null bytes ('\\0').\n\n### Truncate the entire file\n\n```ts\nconst file = Deno.openSync(\n  \"my_file.txt\",\n  { read: true, write: true, truncate: true, create: true }\n);\nDeno.ftruncateSync(file.rid);\n```\n\n### Truncate part of the file\n\n```ts\nconst file = Deno.openSync(\n \"my_file.txt\",\n { read: true, write: true, create: true }\n);\nDeno.writeSync(file.rid, new TextEncoder().encode(\"Hello World\"));\nDeno.ftruncateSync(file.rid, 7);\nDeno.seekSync(file.rid, 0, Deno.SeekMode.Start);\nconst data = new Uint8Array(32);\nDeno.readSync(file.rid, data);\nconsole.log(new TextDecoder().decode(data)); // Hello W\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "len",
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "futimeSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4949,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously changes the access (`atime`) and modification (`mtime`) times\nof a file stream resource referenced by `rid`. Given times are either in\nseconds (UNIX epoch time) or as `Date` objects.\n\n```ts\nconst file = Deno.openSync(\"file.txt\", { create: true, write: true });\nDeno.futimeSync(file.rid, 1556495550, new Date());\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "atime",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "Date",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Date"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "mtime",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "Date",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Date"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "futime",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4967,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Changes the access (`atime`) and modification (`mtime`) times of a file\nstream resource referenced by `rid`. Given times are either in seconds\n(UNIX epoch time) or as `Date` objects.\n\n```ts\nconst file = await Deno.open(\"file.txt\", { create: true, write: true });\nawait Deno.futime(file.rid, 1556495550, new Date());\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "atime",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "Date",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Date"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "mtime",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "Date",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Date"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "fstat",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 4986,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Returns a `Deno.FileInfo` for the given file stream.\n\n```ts\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\n\nconst file = await Deno.open(\"file.txt\", { read: true });\nconst fileInfo = await Deno.fstat(file.rid);\nassert(fileInfo.isFile);\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "FileInfo",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "FileInfo"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "fstatSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5002,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously returns a {@linkcode Deno.FileInfo} for the given file\nstream.\n\n```ts\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\n\nconst file = Deno.openSync(\"file.txt\", { read: true });\nconst fileInfo = Deno.fstatSync(file.rid);\nassert(fileInfo.isFile);\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "FileInfo",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "FileInfo"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "utimeSync",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5018,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Synchronously changes the access (`atime`) and modification (`mtime`) times\nof a file system object referenced by `path`. Given times are either in\nseconds (UNIX epoch time) or as `Date` objects.\n\n```ts\nDeno.utimeSync(\"myfile.txt\", 1556495550, new Date());\n```\n\nRequires `allow-write` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "atime",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "Date",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Date"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "mtime",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "Date",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Date"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "utime",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5038,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Changes the access (`atime`) and modification (`mtime`) times of a file\nsystem object referenced by `path`. Given times are either in seconds\n(UNIX epoch time) or as `Date` objects.\n\n```ts\nawait Deno.utime(\"myfile.txt\", 1556495550, new Date());\n```\n\nRequires `allow-write` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-write"
                ]
              },
              {
                "kind": "category",
                "doc": "File System"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "atime",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "Date",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Date"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "mtime",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "Date",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Date"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "RequestEvent",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5048,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The event yielded from an {@linkcode HttpConn} which represents an HTTP\nrequest from a remote client.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "HTTP Server"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [
              {
                "name": "respondWith",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5059,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The method to be used to respond to the event. The response needs to\neither be an instance of {@linkcode Response} or a promise that resolves\nwith an instance of `Response`.\n\nWhen the response is successfully processed then the promise returned\nwill be resolved. If there are any issues with sending the response,\nthe promise will be rejected."
                },
                "optional": false,
                "params": [
                  {
                    "kind": "identifier",
                    "name": "r",
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "Response",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Response"
                          }
                        },
                        {
                          "repr": "PromiseLike",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "Response",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "Response"
                                }
                              }
                            ],
                            "typeName": "PromiseLike"
                          }
                        }
                      ]
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "typeParams": []
              }
            ],
            "properties": [
              {
                "name": "request",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5051,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The request from the client in the form of the web platform\n{@linkcode Request}."
                },
                "params": [],
                "readonly": true,
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Request",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Request"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "HttpConn",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5067,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The async iterable that is returned from {@linkcode Deno.serveHttp} which\nyields up {@linkcode RequestEvent} events, representing individual\nrequests on the HTTP server connection.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "HTTP Server"
              }
            ]
          },
          "interfaceDef": {
            "extends": [
              {
                "repr": "AsyncIterable",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "RequestEvent",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "RequestEvent"
                      }
                    }
                  ],
                  "typeName": "AsyncIterable"
                }
              }
            ],
            "methods": [
              {
                "name": "nextRequest",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5075,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "An alternative to the async iterable interface which provides promises\nwhich resolve with either a {@linkcode RequestEvent} when there is\nanother request or `null` when the client has closed the connection."
                },
                "optional": false,
                "params": [],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "RequestEvent",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "RequestEvent"
                            }
                          },
                          {
                            "repr": "null",
                            "kind": "keyword",
                            "keyword": "null"
                          }
                        ]
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "typeParams": []
              },
              {
                "name": "close",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5082,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Initiate a server side closure of the connection, indicating to the\nclient that you refuse to accept any more requests on this connection.\n\nTypically the client closes the connection, which will result in the\nasync iterable terminating or the `nextRequest()` method returning\n`null`."
                },
                "optional": false,
                "params": [],
                "returnType": {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                },
                "typeParams": []
              }
            ],
            "properties": [
              {
                "name": "rid",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5070,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The resource ID associated with this connection. Generally users do not\nneed to be aware of this identifier."
                },
                "params": [],
                "readonly": true,
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "serveHttp",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5132,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Provides an interface to handle HTTP request and responses over TCP or TLS\nconnections. The method returns an {@linkcode HttpConn} which yields up\n{@linkcode RequestEvent} events, which utilize the web platform standard\n{@linkcode Request} and {@linkcode Response} objects to handle the request.\n\n```ts\nconst conn = Deno.listen({ port: 80 });\nconst httpConn = Deno.serveHttp(await conn.accept());\nconst e = await httpConn.nextRequest();\nif (e) {\n  e.respondWith(new Response(\"Hello World\"));\n}\n```\n\nAlternatively, you can also use the async iterator approach:\n\n```ts\nasync function handleHttp(conn: Deno.Conn) {\n  for await (const e of Deno.serveHttp(conn)) {\n    e.respondWith(new Response(\"Hello World\"));\n  }\n}\n\nfor await (const conn of Deno.listen({ port: 80 })) {\n  handleHttp(conn);\n}\n```\n\nIf `httpConn.nextRequest()` encounters an error or returns `null` then the\nunderlying {@linkcode HttpConn} resource is closed automatically.\n\nAlso see the experimental Flash HTTP server {@linkcode Deno.serve} which\nprovides a ground up rewrite of handling of HTTP requests and responses\nwithin the Deno CLI.\n\nNote that this function *consumes* the given connection passed to it, thus\nthe original connection will be unusable after calling this. Additionally,\nyou need to ensure that the connection is not being used elsewhere when\ncalling this function in order for the connection to be consumed properly.\n\nFor instance, if there is a `Promise` that is waiting for read operation on\nthe connection to complete, it is considered that the connection is being\nused elsewhere. In such a case, this function will fail.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "HTTP Server"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "conn",
                "optional": false,
                "tsType": {
                  "repr": "Conn",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Conn"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "HttpConn",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "HttpConn"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "WebSocketUpgrade",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5138,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The object that is returned from a {@linkcode Deno.upgradeWebSocket}\nrequest.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Web Sockets"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "response",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5142,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The response object that represents the HTTP response to the client,\nwhich should be used to the {@linkcode RequestEvent} `.respondWith()` for\nthe upgrade to be successful."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Response",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Response"
                  }
                },
                "typeParams": []
              },
              {
                "name": "socket",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5145,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The {@linkcode WebSocket} interface to communicate to the client via a\nweb socket."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "WebSocket",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "WebSocket"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "UpgradeWebSocketOptions",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5152,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Options which can be set when performing a\n{@linkcode Deno.upgradeWebSocket} upgrade of a {@linkcode Request}\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Web Sockets"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "protocol",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5158,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Sets the `.protocol` property on the client side web socket to the\nvalue provided here, which should be one of the strings specified in the\n`protocols` parameter when requesting the web socket. This is intended\nfor clients and servers to specify sub-protocols to use to communicate to\neach other."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "idleTimeout",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5164,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "If the client does not respond to this frame with a\n`pong` within the timeout specified, the connection is deemed\nunhealthy and is closed. The `close` and `error` event will be emitted.\n\nThe default is 120 seconds. Set to `0` to disable timeouts."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "upgradeWebSocket",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5201,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Upgrade an incoming HTTP request to a WebSocket.\n\nGiven a {@linkcode Request}, returns a pair of {@linkcode WebSocket} and\n{@linkcode Response} instances. The original request must be responded to\nwith the returned response for the websocket upgrade to be successful.\n\n```ts\nconst conn = Deno.listen({ port: 80 });\nconst httpConn = Deno.serveHttp(await conn.accept());\nconst e = await httpConn.nextRequest();\nif (e) {\n  const { socket, response } = Deno.upgradeWebSocket(e.request);\n  socket.onopen = () => {\n    socket.send(\"Hello World!\");\n  };\n  socket.onmessage = (e) => {\n    console.log(e.data);\n    socket.close();\n  };\n  socket.onclose = () => console.log(\"WebSocket has been closed.\");\n  socket.onerror = (e) => console.error(\"WebSocket error:\", e);\n  e.respondWith(response);\n}\n```\n\nIf the request body is disturbed (read from) before the upgrade is\ncompleted, upgrading fails.\n\nThis operation does not yet consume the request or open the websocket. This\nonly happens once the returned response has been passed to `respondWith()`.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Web Sockets"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "request",
                "optional": false,
                "tsType": {
                  "repr": "Request",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Request"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "UpgradeWebSocketOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "UpgradeWebSocketOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "WebSocketUpgrade",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "WebSocketUpgrade"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "kill",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5231,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Send a signal to process under given `pid`. The value and meaning of the\n`signal` to the process is operating system and process dependant.\n{@linkcode Signal} provides the most common signals. Default signal\nis `\"SIGTERM\"`.\n\nThe term `kill` is adopted from the UNIX-like command line command `kill`\nwhich also signals processes.\n\nIf `pid` is negative, the signal will be sent to the process group\nidentified by `pid`. An error will be thrown if a negative `pid` is used on\nWindows.\n\n```ts\nconst p = Deno.run({\n  cmd: [\"sleep\", \"10000\"]\n});\n\nDeno.kill(p.pid, \"SIGINT\");\n```\n\nRequires `allow-run` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-run"
                ]
              },
              {
                "kind": "category",
                "doc": "Sub Process"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "pid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "signo",
                "optional": true,
                "tsType": {
                  "repr": "Signal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Signal"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "RecordType",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5240,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The type of the resource record to resolve via DNS using\n{@linkcode Deno.resolveDns}.\n\nOnly the listed types are supported currently.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "typeAliasDef": {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "A",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "A"
                  }
                },
                {
                  "repr": "AAAA",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "AAAA"
                  }
                },
                {
                  "repr": "ANAME",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "ANAME"
                  }
                },
                {
                  "repr": "CAA",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "CAA"
                  }
                },
                {
                  "repr": "CNAME",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "CNAME"
                  }
                },
                {
                  "repr": "MX",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "MX"
                  }
                },
                {
                  "repr": "NAPTR",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "NAPTR"
                  }
                },
                {
                  "repr": "NS",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "NS"
                  }
                },
                {
                  "repr": "PTR",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "PTR"
                  }
                },
                {
                  "repr": "SOA",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SOA"
                  }
                },
                {
                  "repr": "SRV",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SRV"
                  }
                },
                {
                  "repr": "TXT",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "TXT"
                  }
                }
              ]
            },
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "ResolveDnsOptions",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5258,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Options which can be set when using {@linkcode Deno.resolveDns}.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "nameServer",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5263,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The name server to be used for lookups.\n\nIf not specified, defaults to the system configuration. For example\n`/etc/resolv.conf` on Unix-like systems."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "ipAddr",
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        "typeParams": []
                      },
                      {
                        "name": "port",
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "signal",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5276,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "An abort signal to allow cancellation of the DNS resolution operation.\nIf the signal becomes aborted the resolveDns operation will be stopped\nand the promise returned will be rejected with an AbortError."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "CAARecord",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5284,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "If {@linkcode Deno.resolveDns} is called with `\"CAA\"` record type\nspecified, it will resolve with an array of objects with this interface.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "critical",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5292,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "If `true`, indicates that the corresponding property tag **must** be\nunderstood if the semantics of the CAA record are to be correctly\ninterpreted by an issuer.\n\nIssuers **must not** issue certificates for a domain if the relevant CAA\nResource Record set contains unknown property tags that have `critical`\nset."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "tag",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5295,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "An string that represents the identifier of the property represented by\nthe record."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "value",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5297,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The value associated with the tag."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "MXRecord",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5304,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "If {@linkcode Deno.resolveDns} is called with `\"MX\"` record type\nspecified, it will return an array of objects with this interface.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "preference",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5307,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "A priority value, which is a relative value compared to the other\npreferences of MX records for the domain."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "exchange",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5309,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The server that mail should be delivered to."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "NAPTRRecord",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5316,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "If {@linkcode Deno.resolveDns} is called with `\"NAPTR\"` record type\nspecified, it will return an array of objects with this interface.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "order",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5317,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "preference",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5318,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "flags",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5319,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "services",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5320,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "regexp",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5321,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "replacement",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5322,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "SOARecord",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5329,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "If {@linkcode Deno.resolveDns} is called with `\"SOA\"` record type\nspecified, it will return an array of objects with this interface.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "mname",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5330,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "rname",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5331,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "serial",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5332,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "refresh",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5333,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "retry",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5334,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "expire",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5335,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "minimum",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5336,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "SRVRecord",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5344,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "If {@linkcode Deno.resolveDns} is called with `\"SRV\"` record type\nspecified, it will return an array of objects with this interface.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "priority",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5345,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "weight",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5346,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "port",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5347,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "target",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 5348,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "resolveDns",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5375,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Performs DNS resolution against the given query, returning resolved\nrecords.\n\nFails in the cases such as:\n\n- the query is in invalid format.\n- the options have an invalid parameter. For example `nameServer.port` is\n  beyond the range of 16-bit unsigned integer.\n- the request timed out.\n\n```ts\nconst a = await Deno.resolveDns(\"example.com\", \"A\");\n\nconst aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n  nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n});\n```\n\nRequires `allow-net` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-net"
                ]
              },
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "query",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "recordType",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "A",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "A"
                      }
                    },
                    {
                      "repr": "AAAA",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "AAAA"
                      }
                    },
                    {
                      "repr": "ANAME",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "ANAME"
                      }
                    },
                    {
                      "repr": "CNAME",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "CNAME"
                      }
                    },
                    {
                      "repr": "NS",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "NS"
                      }
                    },
                    {
                      "repr": "PTR",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "PTR"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "ResolveDnsOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ResolveDnsOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "resolveDns",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5405,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Performs DNS resolution against the given query, returning resolved\nrecords.\n\nFails in the cases such as:\n\n- the query is in invalid format.\n- the options have an invalid parameter. For example `nameServer.port` is\n  beyond the range of 16-bit unsigned integer.\n- the request timed out.\n\n```ts\nconst a = await Deno.resolveDns(\"example.com\", \"A\");\n\nconst aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n  nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n});\n```\n\nRequires `allow-net` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-net"
                ]
              },
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "query",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "recordType",
                "optional": false,
                "tsType": {
                  "repr": "CAA",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "CAA"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "ResolveDnsOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ResolveDnsOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "CAARecord",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "CAARecord"
                      }
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "resolveDns",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5435,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Performs DNS resolution against the given query, returning resolved\nrecords.\n\nFails in the cases such as:\n\n- the query is in invalid format.\n- the options have an invalid parameter. For example `nameServer.port` is\n  beyond the range of 16-bit unsigned integer.\n- the request timed out.\n\n```ts\nconst a = await Deno.resolveDns(\"example.com\", \"A\");\n\nconst aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n  nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n});\n```\n\nRequires `allow-net` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-net"
                ]
              },
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "query",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "recordType",
                "optional": false,
                "tsType": {
                  "repr": "MX",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "MX"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "ResolveDnsOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ResolveDnsOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "MXRecord",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "MXRecord"
                      }
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "resolveDns",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5465,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Performs DNS resolution against the given query, returning resolved\nrecords.\n\nFails in the cases such as:\n\n- the query is in invalid format.\n- the options have an invalid parameter. For example `nameServer.port` is\n  beyond the range of 16-bit unsigned integer.\n- the request timed out.\n\n```ts\nconst a = await Deno.resolveDns(\"example.com\", \"A\");\n\nconst aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n  nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n});\n```\n\nRequires `allow-net` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-net"
                ]
              },
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "query",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "recordType",
                "optional": false,
                "tsType": {
                  "repr": "NAPTR",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "NAPTR"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "ResolveDnsOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ResolveDnsOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "NAPTRRecord",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "NAPTRRecord"
                      }
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "resolveDns",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5495,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Performs DNS resolution against the given query, returning resolved\nrecords.\n\nFails in the cases such as:\n\n- the query is in invalid format.\n- the options have an invalid parameter. For example `nameServer.port` is\n  beyond the range of 16-bit unsigned integer.\n- the request timed out.\n\n```ts\nconst a = await Deno.resolveDns(\"example.com\", \"A\");\n\nconst aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n  nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n});\n```\n\nRequires `allow-net` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-net"
                ]
              },
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "query",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "recordType",
                "optional": false,
                "tsType": {
                  "repr": "SOA",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SOA"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "ResolveDnsOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ResolveDnsOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "SOARecord",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "SOARecord"
                      }
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "resolveDns",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5525,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Performs DNS resolution against the given query, returning resolved\nrecords.\n\nFails in the cases such as:\n\n- the query is in invalid format.\n- the options have an invalid parameter. For example `nameServer.port` is\n  beyond the range of 16-bit unsigned integer.\n- the request timed out.\n\n```ts\nconst a = await Deno.resolveDns(\"example.com\", \"A\");\n\nconst aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n  nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n});\n```\n\nRequires `allow-net` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-net"
                ]
              },
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "query",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "recordType",
                "optional": false,
                "tsType": {
                  "repr": "SRV",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "SRV"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "ResolveDnsOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ResolveDnsOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "SRVRecord",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "SRVRecord"
                      }
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "resolveDns",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5555,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Performs DNS resolution against the given query, returning resolved\nrecords.\n\nFails in the cases such as:\n\n- the query is in invalid format.\n- the options have an invalid parameter. For example `nameServer.port` is\n  beyond the range of 16-bit unsigned integer.\n- the request timed out.\n\n```ts\nconst a = await Deno.resolveDns(\"example.com\", \"A\");\n\nconst aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n  nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n});\n```\n\nRequires `allow-net` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-net"
                ]
              },
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "query",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "recordType",
                "optional": false,
                "tsType": {
                  "repr": "TXT",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "TXT"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "ResolveDnsOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ResolveDnsOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "resolveDns",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5585,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Performs DNS resolution against the given query, returning resolved\nrecords.\n\nFails in the cases such as:\n\n- the query is in invalid format.\n- the options have an invalid parameter. For example `nameServer.port` is\n  beyond the range of 16-bit unsigned integer.\n- the request timed out.\n\n```ts\nconst a = await Deno.resolveDns(\"example.com\", \"A\");\n\nconst aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n  nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n});\n```\n\nRequires `allow-net` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-net"
                ]
              },
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "query",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "recordType",
                "optional": false,
                "tsType": {
                  "repr": "RecordType",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RecordType"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "ResolveDnsOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ResolveDnsOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "CAARecord",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "CAARecord"
                          }
                        }
                      },
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "MXRecord",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "MXRecord"
                          }
                        }
                      },
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "NAPTRRecord",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "NAPTRRecord"
                          }
                        }
                      },
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "SOARecord",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "SOARecord"
                          }
                        }
                      },
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "SRVRecord",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "SRVRecord"
                          }
                        }
                      },
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          }
                        }
                      }
                    ]
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "refTimer",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5604,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Make the timer of the given `id` block the event loop from finishing.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Timers"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "unrefTimer",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5611,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Make the timer of the given `id` not block the event loop from finishing.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Timers"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "uid",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5625,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Returns the user id of the process on POSIX platforms. Returns null on Windows.\n\n```ts\nconsole.log(Deno.uid());\n```\n\nRequires `allow-sys` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-sys"
                ]
              },
              {
                "kind": "category",
                "doc": "Runtime Environment"
              }
            ]
          },
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                {
                  "repr": "null",
                  "kind": "keyword",
                  "keyword": "null"
                }
              ]
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "gid",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5639,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Returns the group id of the process on POSIX platforms. Returns null on windows.\n\n```ts\nconsole.log(Deno.gid());\n```\n\nRequires `allow-sys` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-sys"
                ]
              },
              {
                "kind": "category",
                "doc": "Runtime Environment"
              }
            ]
          },
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                {
                  "repr": "null",
                  "kind": "keyword",
                  "keyword": "null"
                }
              ]
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        }
      ]
    }
  },
  {
    "kind": "interface",
    "name": "Console",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 5650,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Console and Debugging"
        }
      ]
    },
    "interfaceDef": {
      "extends": [],
      "methods": [
        {
          "name": "assert",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5651,
            "col": 2
          },
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "condition",
              "optional": true,
              "tsType": {
                "repr": "boolean",
                "kind": "keyword",
                "keyword": "boolean"
              }
            },
            {
              "kind": "rest",
              "arg": {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": null
              },
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "clear",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5652,
            "col": 2
          },
          "optional": false,
          "params": [],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "count",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5653,
            "col": 2
          },
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "label",
              "optional": true,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "countReset",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5654,
            "col": 2
          },
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "label",
              "optional": true,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "debug",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5655,
            "col": 2
          },
          "optional": false,
          "params": [
            {
              "kind": "rest",
              "arg": {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": null
              },
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "dir",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5656,
            "col": 2
          },
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "item",
              "optional": true,
              "tsType": {
                "repr": "any",
                "kind": "keyword",
                "keyword": "any"
              }
            },
            {
              "kind": "identifier",
              "name": "options",
              "optional": true,
              "tsType": {
                "repr": "any",
                "kind": "keyword",
                "keyword": "any"
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "dirxml",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5657,
            "col": 2
          },
          "optional": false,
          "params": [
            {
              "kind": "rest",
              "arg": {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": null
              },
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "error",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5658,
            "col": 2
          },
          "optional": false,
          "params": [
            {
              "kind": "rest",
              "arg": {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": null
              },
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "group",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5659,
            "col": 2
          },
          "optional": false,
          "params": [
            {
              "kind": "rest",
              "arg": {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": null
              },
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "groupCollapsed",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5660,
            "col": 2
          },
          "optional": false,
          "params": [
            {
              "kind": "rest",
              "arg": {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": null
              },
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "groupEnd",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5661,
            "col": 2
          },
          "optional": false,
          "params": [],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "info",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5662,
            "col": 2
          },
          "optional": false,
          "params": [
            {
              "kind": "rest",
              "arg": {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": null
              },
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "log",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5663,
            "col": 2
          },
          "optional": false,
          "params": [
            {
              "kind": "rest",
              "arg": {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": null
              },
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "table",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5664,
            "col": 2
          },
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "tabularData",
              "optional": true,
              "tsType": {
                "repr": "any",
                "kind": "keyword",
                "keyword": "any"
              }
            },
            {
              "kind": "identifier",
              "name": "properties",
              "optional": true,
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "time",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5665,
            "col": 2
          },
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "label",
              "optional": true,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "timeEnd",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5666,
            "col": 2
          },
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "label",
              "optional": true,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "timeLog",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5667,
            "col": 2
          },
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "label",
              "optional": true,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "rest",
              "arg": {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": null
              },
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "trace",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5668,
            "col": 2
          },
          "optional": false,
          "params": [
            {
              "kind": "rest",
              "arg": {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": null
              },
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "warn",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5669,
            "col": 2
          },
          "optional": false,
          "params": [
            {
              "kind": "rest",
              "arg": {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": null
              },
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "timeStamp",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5672,
            "col": 2
          },
          "jsDoc": {
            "doc": "This method is a noop, unless used in inspector"
          },
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "label",
              "optional": true,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "profile",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5675,
            "col": 2
          },
          "jsDoc": {
            "doc": "This method is a noop, unless used in inspector"
          },
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "label",
              "optional": true,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "profileEnd",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5678,
            "col": 2
          },
          "jsDoc": {
            "doc": "This method is a noop, unless used in inspector"
          },
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "label",
              "optional": true,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        }
      ],
      "properties": [],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "class",
    "name": "URLSearchParams",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 5689,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Web APIs"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "init",
              "optional": true,
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    }
                  },
                  {
                    "repr": "Record",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      ],
                      "typeName": "Record"
                    }
                  },
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "URLSearchParams",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "URLSearchParams"
                    }
                  }
                ]
              }
            }
          ],
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5690,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": {
            "doc": "Contains the number of search parameters\n\n```ts\nsearchParams.size\n```"
          },
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "size",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5840,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "toString",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5693,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Appends a specified key/value pair as a new search parameter.\n\n```ts\nlet searchParams = new URLSearchParams();\nsearchParams.append('name', 'first');\nsearchParams.append('name', 'second');\n```"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "append",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "value",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5703,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Deletes the given search parameter and its associated value,\nfrom the list of all search parameters.\n\n```ts\nlet searchParams = new URLSearchParams([['name', 'value']]);\nsearchParams.delete('name');\n```"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "delete",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5713,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns all the values associated with a given search parameter\nas an array.\n\n```ts\nsearchParams.getAll('name');\n```"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getAll",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "",
              "kind": "array",
              "array": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5722,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the first value associated to the given search parameter.\n\n```ts\nsearchParams.get('name');\n```"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "get",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "null",
                  "kind": "keyword",
                  "keyword": "null"
                }
              ]
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5730,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns a Boolean that indicates whether a parameter with the\nspecified name exists.\n\n```ts\nsearchParams.has('name');\n```"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "has",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5739,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Sets the value associated with a given search parameter to the\ngiven value. If there were several matching values, this method\ndeletes the others. If the search parameter doesn't exist, this\nmethod creates it.\n\n```ts\nsearchParams.set('name', 'value');\n```"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "set",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "value",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5750,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Sort all key/value pairs contained in this object in place and\nreturn undefined. The sort order is according to Unicode code\npoints of the keys.\n\n```ts\nsearchParams.sort();\n```"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "sort",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5760,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Calls a function for each element contained in this object in\nplace and return undefined. Optionally accepts an object to use\nas this when executing callback as second argument.\n\n```ts\nconst params = new URLSearchParams([[\"a\", \"b\"], [\"c\", \"d\"]]);\nparams.forEach((value, key, parent) => {\n  console.log(value, key, parent);\n});\n```"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "forEach",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "callbackfn",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "value",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "key",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "parent",
                        "optional": false,
                        "tsType": {
                          "repr": "this",
                          "kind": "this",
                          "this": true
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "thisArg",
                "optional": true,
                "tsType": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5773,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns an iterator allowing to go through all keys contained\nin this object.\n\n```ts\nconst params = new URLSearchParams([[\"a\", \"b\"], [\"c\", \"d\"]]);\nfor (const key of params.keys()) {\n  console.log(key);\n}\n```"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "keys",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "IterableIterator",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "IterableIterator"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5788,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns an iterator allowing to go through all values contained\nin this object.\n\n```ts\nconst params = new URLSearchParams([[\"a\", \"b\"], [\"c\", \"d\"]]);\nfor (const value of params.values()) {\n  console.log(value);\n}\n```"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "values",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "IterableIterator",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "IterableIterator"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5800,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns an iterator allowing to go through all key/value\npairs contained in this object.\n\n```ts\nconst params = new URLSearchParams([[\"a\", \"b\"], [\"c\", \"d\"]]);\nfor (const [key, value] of params.entries()) {\n  console.log(key, value);\n}\n```"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "entries",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "IterableIterator",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "",
                    "kind": "tuple",
                    "tuple": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    ]
                  }
                ],
                "typeName": "IterableIterator"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5812,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns an iterator allowing to go through all key/value\npairs contained in this object.\n\n```ts\nconst params = new URLSearchParams([[\"a\", \"b\"], [\"c\", \"d\"]]);\nfor (const [key, value] of params) {\n  console.log(key, value);\n}\n```"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "[Symbol.iterator]",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "IterableIterator",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "",
                    "kind": "tuple",
                    "tuple": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    ]
                  }
                ],
                "typeName": "IterableIterator"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5824,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns a query string suitable for use in a URL.\n\n```ts\nsearchParams.toString();\n```"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "toString",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5832,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "URL",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 5848,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "The URL interface represents an object providing static methods used for\ncreating object URLs.\n",
      "tags": [
        {
          "kind": "category",
          "doc": "Web APIs"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "url",
              "optional": false,
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "URL",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "URL"
                    }
                  }
                ]
              }
            },
            {
              "kind": "identifier",
              "name": "base",
              "optional": true,
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "URL",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "URL"
                    }
                  }
                ]
              }
            }
          ],
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5849,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "hash",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5854,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "host",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5855,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "hostname",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5856,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "href",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5857,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "origin",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5859,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "password",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5860,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "pathname",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5861,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "port",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5862,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "protocol",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5863,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "search",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5864,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "URLSearchParams",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "URLSearchParams"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "searchParams",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5865,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "username",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5866,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "canParse",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "url",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "base",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5850,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "createObjectURL",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "blob",
                "optional": false,
                "tsType": {
                  "repr": "Blob",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Blob"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5851,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "revokeObjectURL",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "url",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5852,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "toString",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5858,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "toJSON",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5867,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "interface",
    "name": "URLPatternInit",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 5871,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Web APIs"
        }
      ]
    },
    "interfaceDef": {
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "protocol",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5872,
            "col": 2
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "typeParams": []
        },
        {
          "name": "username",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5873,
            "col": 2
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "typeParams": []
        },
        {
          "name": "password",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5874,
            "col": 2
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "typeParams": []
        },
        {
          "name": "hostname",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5875,
            "col": 2
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "typeParams": []
        },
        {
          "name": "port",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5876,
            "col": 2
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "typeParams": []
        },
        {
          "name": "pathname",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5877,
            "col": 2
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "typeParams": []
        },
        {
          "name": "search",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5878,
            "col": 2
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "typeParams": []
        },
        {
          "name": "hash",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5879,
            "col": 2
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "typeParams": []
        },
        {
          "name": "baseURL",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5880,
            "col": 2
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "typeAlias",
    "name": "URLPatternInput",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 5884,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Web APIs"
        }
      ]
    },
    "typeAliasDef": {
      "tsType": {
        "repr": "",
        "kind": "union",
        "union": [
          {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          {
            "repr": "URLPatternInit",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "URLPatternInit"
            }
          }
        ]
      },
      "typeParams": []
    }
  },
  {
    "kind": "interface",
    "name": "URLPatternComponentResult",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 5887,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Web APIs"
        }
      ]
    },
    "interfaceDef": {
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "input",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5888,
            "col": 2
          },
          "params": [],
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "typeParams": []
        },
        {
          "name": "groups",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5889,
            "col": 2
          },
          "params": [],
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "Record",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                }
              ],
              "typeName": "Record"
            }
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "interface",
    "name": "URLPatternResult",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 5896,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "`URLPatternResult` is the object returned from `URLPattern.exec`.\n",
      "tags": [
        {
          "kind": "category",
          "doc": "Web APIs"
        }
      ]
    },
    "interfaceDef": {
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "inputs",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5898,
            "col": 2
          },
          "jsDoc": {
            "doc": "The inputs provided when matching."
          },
          "params": [],
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "",
                "kind": "tuple",
                "tuple": [
                  {
                    "repr": "URLPatternInit",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "URLPatternInit"
                    }
                  }
                ]
              },
              {
                "repr": "",
                "kind": "tuple",
                "tuple": [
                  {
                    "repr": "URLPatternInit",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "URLPatternInit"
                    }
                  },
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ]
              }
            ]
          },
          "typeParams": []
        },
        {
          "name": "protocol",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5901,
            "col": 2
          },
          "jsDoc": {
            "doc": "The matched result for the `protocol` matcher."
          },
          "params": [],
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "URLPatternComponentResult",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "URLPatternComponentResult"
            }
          },
          "typeParams": []
        },
        {
          "name": "username",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5903,
            "col": 2
          },
          "jsDoc": {
            "doc": "The matched result for the `username` matcher."
          },
          "params": [],
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "URLPatternComponentResult",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "URLPatternComponentResult"
            }
          },
          "typeParams": []
        },
        {
          "name": "password",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5905,
            "col": 2
          },
          "jsDoc": {
            "doc": "The matched result for the `password` matcher."
          },
          "params": [],
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "URLPatternComponentResult",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "URLPatternComponentResult"
            }
          },
          "typeParams": []
        },
        {
          "name": "hostname",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5907,
            "col": 2
          },
          "jsDoc": {
            "doc": "The matched result for the `hostname` matcher."
          },
          "params": [],
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "URLPatternComponentResult",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "URLPatternComponentResult"
            }
          },
          "typeParams": []
        },
        {
          "name": "port",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5909,
            "col": 2
          },
          "jsDoc": {
            "doc": "The matched result for the `port` matcher."
          },
          "params": [],
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "URLPatternComponentResult",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "URLPatternComponentResult"
            }
          },
          "typeParams": []
        },
        {
          "name": "pathname",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5911,
            "col": 2
          },
          "jsDoc": {
            "doc": "The matched result for the `pathname` matcher."
          },
          "params": [],
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "URLPatternComponentResult",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "URLPatternComponentResult"
            }
          },
          "typeParams": []
        },
        {
          "name": "search",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5913,
            "col": 2
          },
          "jsDoc": {
            "doc": "The matched result for the `search` matcher."
          },
          "params": [],
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "URLPatternComponentResult",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "URLPatternComponentResult"
            }
          },
          "typeParams": []
        },
        {
          "name": "hash",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5915,
            "col": 2
          },
          "jsDoc": {
            "doc": "The matched result for the `hash` matcher."
          },
          "params": [],
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "URLPatternComponentResult",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "URLPatternComponentResult"
            }
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "class",
    "name": "URLPattern",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 5948,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "The URLPattern API provides a web platform primitive for matching URLs based\non a convenient pattern syntax.\n\nThe syntax is based on path-to-regexp. Wildcards, named capture groups,\nregular groups, and group modifiers are all supported.\n\n```ts\n// Specify the pattern as structured data.\nconst pattern = new URLPattern({ pathname: \"/users/:user\" });\nconst match = pattern.exec(\"https://blog.example.com/users/joe\");\nconsole.log(match.pathname.groups.user); // joe\n```\n\n```ts\n// Specify a fully qualified string pattern.\nconst pattern = new URLPattern(\"https://example.com/books/:id\");\nconsole.log(pattern.test(\"https://example.com/books/123\")); // true\nconsole.log(pattern.test(\"https://deno.land/books/123\")); // false\n```\n\n```ts\n// Specify a relative string pattern with a base URL.\nconst pattern = new URLPattern(\"/article/:id\", \"https://blog.example.com\");\nconsole.log(pattern.test(\"https://blog.example.com/article\")); // false\nconsole.log(pattern.test(\"https://blog.example.com/article/123\")); // true\n```\n",
      "tags": [
        {
          "kind": "category",
          "doc": "Web APIs"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "input",
              "optional": false,
              "tsType": {
                "repr": "URLPatternInput",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "URLPatternInput"
                }
              }
            },
            {
              "kind": "identifier",
              "name": "baseURL",
              "optional": true,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            }
          ],
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5949,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": {
            "doc": "The pattern string for the `protocol`."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "protocol",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5999,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "The pattern string for the `username`."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "username",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6001,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "The pattern string for the `password`."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "password",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6003,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "The pattern string for the `hostname`."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "hostname",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6005,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "The pattern string for the `port`."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "port",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6007,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "The pattern string for the `pathname`."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "pathname",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6009,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "The pattern string for the `search`."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "search",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6011,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "The pattern string for the `hash`."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "hash",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6013,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": {
            "doc": "Test if the given input matches the stored pattern.\n\nThe input can either be provided as an absolute URL string with an optional base,\nrelative URL string with a required base, or as individual components\nin the form of an `URLPatternInit` object.\n\n```ts\nconst pattern = new URLPattern(\"https://example.com/books/:id\");\n\n// Test an absolute url string.\nconsole.log(pattern.test(\"https://example.com/books/123\")); // true\n\n// Test a relative url with a base.\nconsole.log(pattern.test(\"/books/123\", \"https://example.com\")); // true\n\n// Test an object of url components.\nconsole.log(pattern.test({ pathname: \"/books/123\" })); // true\n```"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "test",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "input",
                "optional": false,
                "tsType": {
                  "repr": "URLPatternInput",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "URLPatternInput"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "baseURL",
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5971,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Match the given input against the stored pattern.\n\nThe input can either be provided as an absolute URL string with an optional base,\nrelative URL string with a required base, or as individual components\nin the form of an `URLPatternInit` object.\n\n```ts\nconst pattern = new URLPattern(\"https://example.com/books/:id\");\n\n// Match an absolute url string.\nlet match = pattern.exec(\"https://example.com/books/123\");\nconsole.log(match.pathname.groups.id); // 123\n\n// Match a relative url with a base.\nmatch = pattern.exec(\"/books/123\", \"https://example.com\");\nconsole.log(match.pathname.groups.id); // 123\n\n// Match an object of url components.\nmatch = pattern.exec({ pathname: \"/books/123\" });\nconsole.log(match.pathname.groups.id); // 123\n```"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "exec",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "input",
                "optional": false,
                "tsType": {
                  "repr": "URLPatternInput",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "URLPatternInput"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "baseURL",
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "URLPatternResult",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "URLPatternResult"
                  }
                },
                {
                  "repr": "null",
                  "kind": "keyword",
                  "keyword": "null"
                }
              ]
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 5996,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "DOMException",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6024,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "DOM Events"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "message",
              "optional": true,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "name",
              "optional": true,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            }
          ],
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6025,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "name",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6026,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "message",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6027,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "code",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6028,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [],
      "extends": "Error",
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "Event",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6042,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "An event which takes place in the DOM.\n",
      "tags": [
        {
          "kind": "category",
          "doc": "DOM Events"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "type",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "eventInitDict",
              "optional": true,
              "tsType": {
                "repr": "EventInit",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "EventInit"
                }
              }
            }
          ],
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6043,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": {
            "doc": "Returns true or false depending on how event was initialized. True if\nevent goes through its target's ancestors in reverse tree order, and\nfalse otherwise."
          },
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "bubbles",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6047,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "cancelBubble",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6048,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns true or false depending on how event was initialized. Its return\nvalue does not always carry meaning, but true can indicate that part of the\noperation during which event was dispatched, can be canceled by invoking\nthe preventDefault() method."
          },
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "cancelable",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6053,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns true or false depending on how event was initialized. True if\nevent invokes listeners past a ShadowRoot node that is the root of its\ntarget, and false otherwise."
          },
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "composed",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6057,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the object whose event listener's callback is currently being\ninvoked."
          },
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "EventTarget",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "EventTarget"
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "currentTarget",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6060,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns true if preventDefault() was invoked successfully to indicate\ncancellation, and false otherwise."
          },
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "defaultPrevented",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6063,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the event's phase, which is one of NONE, CAPTURING_PHASE,\nAT_TARGET, and BUBBLING_PHASE."
          },
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "eventPhase",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6066,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns true if event was dispatched by the user agent, and false\notherwise."
          },
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "isTrusted",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6069,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the object to which event is dispatched (its target)."
          },
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "EventTarget",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "EventTarget"
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "target",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6071,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the event's timestamp as the number of milliseconds measured\nrelative to the time origin."
          },
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "timeStamp",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6074,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the type of event, e.g. \"click\", \"hashchange\", or \"submit\"."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "type",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6076,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "AT_TARGET",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6094,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "BUBBLING_PHASE",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6095,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "CAPTURING_PHASE",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6096,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "NONE",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6097,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "AT_TARGET",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6098,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "BUBBLING_PHASE",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6099,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "CAPTURING_PHASE",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6100,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "NONE",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6101,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": {
            "doc": "Returns the invocation target objects of event's path (objects on which\nlisteners will be invoked), except for any nodes in shadow trees of which\nthe shadow root's mode is \"closed\" that are not reachable from event's\ncurrentTarget."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "composedPath",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "",
              "kind": "array",
              "array": {
                "repr": "EventTarget",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "EventTarget"
                }
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6081,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "If invoked when the cancelable attribute value is true, and while\nexecuting a listener for the event with passive set to false, signals to\nthe operation that caused event to be dispatched that it needs to be\ncanceled."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "preventDefault",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6086,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Invoking this method prevents event from reaching any registered event\nlisteners after the current one finishes running and, when dispatched in a\ntree, also prevents event from reaching any other objects."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "stopImmediatePropagation",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6090,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "When dispatched in a tree, invoking this method prevents event from\nreaching any objects other than the current object."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "stopPropagation",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6093,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "EventTarget",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6110,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "EventTarget is a DOM interface implemented by objects that can receive events\nand may have listeners for them.\n",
      "tags": [
        {
          "kind": "category",
          "doc": "DOM Events"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [],
      "properties": [],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": {
            "doc": "Appends an event listener for events whose type attribute value is type.\nThe callback argument sets the callback that will be invoked when the event\nis dispatched.\n\nThe options argument sets listener-specific options. For compatibility this\ncan be a boolean, in which case the method behaves exactly as if the value\nwas specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked\nwhen the event's eventPhase attribute value is BUBBLING_PHASE. When false\n(or not present), callback will not be invoked when event's eventPhase\nattribute value is CAPTURING_PHASE. Either way, callback will be invoked if\nevent's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not\ncancel the event by invoking preventDefault(). This is used to enable\nperformance optimizations described in § 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be\ninvoked once after which the event listener will be removed.\n\nThe event listener is appended to target's event listener list and is not\nappended if it has the same type, callback, and capture."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "addEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "listener",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "EventListenerOrEventListenerObject",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "EventListenerOrEventListenerObject"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "AddEventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "AddEventListenerOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6134,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Dispatches a synthetic event event to target and returns true if either\nevent's cancelable attribute value is false or its preventDefault() method\nwas not invoked, and false otherwise."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "dispatchEvent",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "event",
                "optional": false,
                "tsType": {
                  "repr": "Event",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Event"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6142,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Removes the event listener in target's event listener list with the same\ntype, callback, and options."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "removeEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "callback",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "EventListenerOrEventListenerObject",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "EventListenerOrEventListenerObject"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "EventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "EventListenerOptions"
                      }
                    },
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6145,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "typeAlias",
    "name": "EventListenerOrEventListenerObject",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6163,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "DOM Events"
        }
      ]
    },
    "typeAliasDef": {
      "tsType": {
        "repr": "",
        "kind": "union",
        "union": [
          {
            "repr": "EventListener",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "EventListener"
            }
          },
          {
            "repr": "EventListenerObject",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "EventListenerObject"
            }
          }
        ]
      },
      "typeParams": []
    }
  },
  {
    "kind": "class",
    "name": "ProgressEvent",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6192,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "Events measuring progress of an underlying process, like an HTTP request\n(for an XMLHttpRequest, or the loading of the underlying resource of an\n<img>, <audio>, <video>, <style> or <link>).\n",
      "tags": [
        {
          "kind": "category",
          "doc": "DOM Events"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "type",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "eventInitDict",
              "optional": true,
              "tsType": {
                "repr": "ProgressEventInit",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ProgressEventInit"
                }
              }
            }
          ],
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6193,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "lengthComputable",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6194,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "loaded",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6195,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "T",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "T"
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "target",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6196,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "total",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6197,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [],
      "extends": "Event",
      "implements": [],
      "typeParams": [
        {
          "name": "T",
          "constraint": {
            "repr": "EventTarget",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "EventTarget"
            }
          },
          "default": {
            "repr": "EventTarget",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "EventTarget"
            }
          }
        }
      ],
      "superTypeParams": []
    }
  },
  {
    "kind": "function",
    "name": "atob",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6208,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "Decodes a string of data which has been encoded using base-64 encoding.\n\n```\nconsole.log(atob(\"aGVsbG8gd29ybGQ=\")); // outputs 'hello world'\n```\n",
      "tags": [
        {
          "kind": "category",
          "doc": "Encoding API"
        }
      ]
    },
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "s",
          "optional": false,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          }
        }
      ],
      "returnType": {
        "repr": "string",
        "kind": "keyword",
        "keyword": "string"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "function",
    "name": "btoa",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6218,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "Creates a base-64 ASCII encoded string from the input string.\n\n```\nconsole.log(btoa(\"hello world\"));  // outputs \"aGVsbG8gd29ybGQ=\"\n```\n",
      "tags": [
        {
          "kind": "category",
          "doc": "Encoding API"
        }
      ]
    },
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "s",
          "optional": false,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          }
        }
      ],
      "returnType": {
        "repr": "string",
        "kind": "keyword",
        "keyword": "string"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "interface",
    "name": "TextDecoderOptions",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6221,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Encoding API"
        }
      ]
    },
    "interfaceDef": {
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "fatal",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6222,
            "col": 2
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "typeParams": []
        },
        {
          "name": "ignoreBOM",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6223,
            "col": 2
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "interface",
    "name": "TextDecodeOptions",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6227,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Encoding API"
        }
      ]
    },
    "interfaceDef": {
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "stream",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6228,
            "col": 2
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "variable",
    "name": "TextDecoder",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6245,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Encoding API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [
            {
              "name": "new",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "label",
                  "optional": true,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "TextDecoderOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "TextDecoderOptions"
                    }
                  }
                }
              ],
              "optional": false,
              "returnType": {
                "repr": "TextDecoder",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "TextDecoder"
                }
              },
              "typeParams": []
            }
          ],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "TextDecoder",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "TextDecoder"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "interface",
    "name": "TextEncoderEncodeIntoResult",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6251,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Encoding API"
        }
      ]
    },
    "interfaceDef": {
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "read",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6252,
            "col": 2
          },
          "params": [],
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "typeParams": []
        },
        {
          "name": "written",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6253,
            "col": 2
          },
          "params": [],
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "variable",
    "name": "TextEncoder",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6266,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Encoding API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [
            {
              "name": "new",
              "kind": "method",
              "params": [],
              "optional": false,
              "returnType": {
                "repr": "TextEncoder",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "TextEncoder"
                }
              },
              "typeParams": []
            }
          ],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "TextEncoder",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "TextEncoder"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "TextDecoderStream",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6285,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Encoding API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [
            {
              "name": "new",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "label",
                  "optional": true,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "TextDecoderOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "TextDecoderOptions"
                    }
                  }
                }
              ],
              "optional": false,
              "returnType": {
                "repr": "TextDecoderStream",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "TextDecoderStream"
                }
              },
              "typeParams": []
            }
          ],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "TextDecoderStream",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "TextDecoderStream"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "TextEncoderStream",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6300,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Encoding API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [
            {
              "name": "new",
              "kind": "method",
              "params": [],
              "optional": false,
              "returnType": {
                "repr": "TextEncoderStream",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "TextEncoderStream"
                }
              },
              "typeParams": []
            }
          ],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "TextEncoderStream",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "TextEncoderStream"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "class",
    "name": "AbortController",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6310,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "A controller object that allows you to abort one or more DOM requests as and\nwhen desired.\n",
      "tags": [
        {
          "kind": "category",
          "doc": "Web APIs"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [],
      "properties": [
        {
          "jsDoc": {
            "doc": "Returns the AbortSignal object associated with this object."
          },
          "tsType": {
            "repr": "AbortSignal",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "AbortSignal"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "signal",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6312,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": {
            "doc": "Invoking this method will set this object's AbortSignal's aborted flag and\nsignal to any observers that the associated activity is to be aborted."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "abort",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "reason",
                "optional": true,
                "tsType": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6315,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "variable",
    "name": "AbortSignal",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6361,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Web APIs"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [
            {
              "name": "new",
              "kind": "method",
              "params": [],
              "optional": false,
              "returnType": {
                "repr": "AbortSignal",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "AbortSignal"
                }
              },
              "typeParams": []
            },
            {
              "name": "abort",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "reason",
                  "optional": true,
                  "tsType": {
                    "repr": "any",
                    "kind": "keyword",
                    "keyword": "any"
                  }
                }
              ],
              "optional": false,
              "returnType": {
                "repr": "AbortSignal",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "AbortSignal"
                }
              },
              "typeParams": []
            },
            {
              "name": "timeout",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "milliseconds",
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                }
              ],
              "optional": false,
              "returnType": {
                "repr": "AbortSignal",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "AbortSignal"
                }
              },
              "typeParams": []
            }
          ],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "AbortSignal",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "AbortSignal"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "FileReader",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6427,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Web File API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [
            {
              "name": "new",
              "kind": "method",
              "params": [],
              "optional": false,
              "returnType": {
                "repr": "FileReader",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "FileReader"
                }
              },
              "typeParams": []
            }
          ],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "FileReader",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "FileReader"
                }
              },
              "typeParams": []
            },
            {
              "name": "DONE",
              "params": [],
              "readonly": true,
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "number",
                "kind": "keyword",
                "keyword": "number"
              },
              "typeParams": []
            },
            {
              "name": "EMPTY",
              "params": [],
              "readonly": true,
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "number",
                "kind": "keyword",
                "keyword": "number"
              },
              "typeParams": []
            },
            {
              "name": "LOADING",
              "params": [],
              "readonly": true,
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "number",
                "kind": "keyword",
                "keyword": "number"
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "class",
    "name": "Blob",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6451,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "A file-like object of immutable, raw data. Blobs represent data that isn't\nnecessarily in a JavaScript-native format. The File interface is based on\nBlob, inheriting blob functionality and expanding it to support files on the\nuser's system.\n",
      "tags": [
        {
          "kind": "category",
          "doc": "Web File API"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "blobParts",
              "optional": true,
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "BlobPart",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "BlobPart"
                  }
                }
              }
            },
            {
              "kind": "identifier",
              "name": "options",
              "optional": true,
              "tsType": {
                "repr": "BlobPropertyBag",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "BlobPropertyBag"
                }
              }
            }
          ],
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6452,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "size",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6454,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "type",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6455,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "arrayBuffer",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "ArrayBuffer",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ArrayBuffer"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6456,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "slice",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "start",
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "end",
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "contentType",
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "Blob",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Blob"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6457,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "stream",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "ReadableStream",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "Uint8Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Uint8Array"
                    }
                  }
                ],
                "typeName": "ReadableStream"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6458,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "text",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6459,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "File",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6472,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "Provides information about files and allows JavaScript in a web page to\naccess their content.\n",
      "tags": [
        {
          "kind": "category",
          "doc": "Web File API"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "fileBits",
              "optional": false,
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "BlobPart",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "BlobPart"
                  }
                }
              }
            },
            {
              "kind": "identifier",
              "name": "fileName",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "options",
              "optional": true,
              "tsType": {
                "repr": "FilePropertyBag",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "FilePropertyBag"
                }
              }
            }
          ],
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6473,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "lastModified",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6479,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "name",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6480,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [],
      "extends": "Blob",
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "variable",
    "name": "ReadableStreamDefaultReader",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6509,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Streams API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [
            {
              "name": "new",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "stream",
                  "optional": false,
                  "tsType": {
                    "repr": "ReadableStream",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "R",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "R"
                          }
                        }
                      ],
                      "typeName": "ReadableStream"
                    }
                  }
                }
              ],
              "optional": false,
              "returnType": {
                "repr": "ReadableStreamDefaultReader",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "R",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "R"
                      }
                    }
                  ],
                  "typeName": "ReadableStreamDefaultReader"
                }
              },
              "typeParams": [
                {
                  "name": "R"
                }
              ]
            }
          ],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "ReadableStreamDefaultReader",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ReadableStreamDefaultReader"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "ReadableStreamBYOBReader",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6542,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Streams API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [
            {
              "name": "new",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "stream",
                  "optional": false,
                  "tsType": {
                    "repr": "ReadableStream",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Uint8Array",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Uint8Array"
                          }
                        }
                      ],
                      "typeName": "ReadableStream"
                    }
                  }
                }
              ],
              "optional": false,
              "returnType": {
                "repr": "ReadableStreamBYOBReader",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ReadableStreamBYOBReader"
                }
              },
              "typeParams": []
            }
          ],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "ReadableStreamBYOBReader",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ReadableStreamBYOBReader"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "ReadableStreamDefaultController",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6604,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Streams API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [
            {
              "name": "new",
              "kind": "method",
              "params": [],
              "optional": false,
              "returnType": {
                "repr": "ReadableStreamDefaultController",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ReadableStreamDefaultController"
                }
              },
              "typeParams": []
            }
          ],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "ReadableStreamDefaultController",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ReadableStreamDefaultController"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "ReadableByteStreamController",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6619,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Streams API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [
            {
              "name": "new",
              "kind": "method",
              "params": [],
              "optional": false,
              "returnType": {
                "repr": "ReadableByteStreamController",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ReadableByteStreamController"
                }
              },
              "typeParams": []
            }
          ],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "ReadableByteStreamController",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ReadableByteStreamController"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "CountQueuingStrategy",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6654,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Streams API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [
            {
              "name": "new",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "typeLiteral",
                    "typeLiteral": {
                      "methods": [],
                      "properties": [
                        {
                          "name": "highWaterMark",
                          "params": [],
                          "computed": false,
                          "optional": false,
                          "tsType": {
                            "repr": "number",
                            "kind": "keyword",
                            "keyword": "number"
                          },
                          "typeParams": []
                        }
                      ],
                      "callSignatures": [],
                      "indexSignatures": []
                    }
                  }
                }
              ],
              "optional": false,
              "returnType": {
                "repr": "CountQueuingStrategy",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "CountQueuingStrategy"
                }
              },
              "typeParams": []
            }
          ],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "CountQueuingStrategy",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "CountQueuingStrategy"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "ByteLengthQueuingStrategy",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6666,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Streams API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [
            {
              "name": "new",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "typeLiteral",
                    "typeLiteral": {
                      "methods": [],
                      "properties": [
                        {
                          "name": "highWaterMark",
                          "params": [],
                          "computed": false,
                          "optional": false,
                          "tsType": {
                            "repr": "number",
                            "kind": "keyword",
                            "keyword": "number"
                          },
                          "typeParams": []
                        }
                      ],
                      "callSignatures": [],
                      "indexSignatures": []
                    }
                  }
                }
              ],
              "optional": false,
              "returnType": {
                "repr": "ByteLengthQueuingStrategy",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ByteLengthQueuingStrategy"
                }
              },
              "typeParams": []
            }
          ],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "ByteLengthQueuingStrategy",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ByteLengthQueuingStrategy"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "ReadableStream",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6694,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Streams API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [
            {
              "name": "new",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "underlyingSource",
                  "optional": false,
                  "tsType": {
                    "repr": "UnderlyingByteSource",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "UnderlyingByteSource"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "strategy",
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "typeLiteral",
                    "typeLiteral": {
                      "methods": [],
                      "properties": [
                        {
                          "name": "highWaterMark",
                          "params": [],
                          "computed": false,
                          "optional": true,
                          "tsType": {
                            "repr": "number",
                            "kind": "keyword",
                            "keyword": "number"
                          },
                          "typeParams": []
                        },
                        {
                          "name": "size",
                          "params": [],
                          "computed": false,
                          "optional": true,
                          "tsType": {
                            "repr": "undefined",
                            "kind": "keyword",
                            "keyword": "undefined"
                          },
                          "typeParams": []
                        }
                      ],
                      "callSignatures": [],
                      "indexSignatures": []
                    }
                  }
                }
              ],
              "optional": false,
              "returnType": {
                "repr": "ReadableStream",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "Uint8Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Uint8Array"
                      }
                    }
                  ],
                  "typeName": "ReadableStream"
                }
              },
              "typeParams": []
            },
            {
              "name": "new",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "underlyingSource",
                  "optional": true,
                  "tsType": {
                    "repr": "UnderlyingSource",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "R",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "R"
                          }
                        }
                      ],
                      "typeName": "UnderlyingSource"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "strategy",
                  "optional": true,
                  "tsType": {
                    "repr": "QueuingStrategy",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "R",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "R"
                          }
                        }
                      ],
                      "typeName": "QueuingStrategy"
                    }
                  }
                }
              ],
              "optional": false,
              "returnType": {
                "repr": "ReadableStream",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "R",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "R"
                      }
                    }
                  ],
                  "typeName": "ReadableStream"
                }
              },
              "typeParams": [
                {
                  "name": "R",
                  "default": {
                    "repr": "any",
                    "kind": "keyword",
                    "keyword": "any"
                  }
                }
              ]
            }
          ],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "ReadableStream",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ReadableStream"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "WritableStream",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6744,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Streams API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [
            {
              "name": "new",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "underlyingSink",
                  "optional": true,
                  "tsType": {
                    "repr": "UnderlyingSink",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "W",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "W"
                          }
                        }
                      ],
                      "typeName": "UnderlyingSink"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "strategy",
                  "optional": true,
                  "tsType": {
                    "repr": "QueuingStrategy",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "W",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "W"
                          }
                        }
                      ],
                      "typeName": "QueuingStrategy"
                    }
                  }
                }
              ],
              "optional": false,
              "returnType": {
                "repr": "WritableStream",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "W",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "W"
                      }
                    }
                  ],
                  "typeName": "WritableStream"
                }
              },
              "typeParams": [
                {
                  "name": "W",
                  "default": {
                    "repr": "any",
                    "kind": "keyword",
                    "keyword": "any"
                  }
                }
              ]
            }
          ],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "WritableStream",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "WritableStream"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "WritableStreamDefaultController",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6765,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Streams API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "WritableStreamDefaultController",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": null,
          "typeName": "WritableStreamDefaultController"
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "WritableStreamDefaultWriter",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6785,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Streams API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [
            {
              "name": "new",
              "kind": "method",
              "params": [],
              "optional": false,
              "returnType": {
                "repr": "WritableStreamDefaultWriter",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "WritableStreamDefaultWriter"
                }
              },
              "typeParams": []
            }
          ],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "WritableStreamDefaultWriter",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "WritableStreamDefaultWriter"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "TransformStream",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6797,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Streams API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [
            {
              "name": "new",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "transformer",
                  "optional": true,
                  "tsType": {
                    "repr": "Transformer",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "I",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "I"
                          }
                        },
                        {
                          "repr": "O",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "O"
                          }
                        }
                      ],
                      "typeName": "Transformer"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "writableStrategy",
                  "optional": true,
                  "tsType": {
                    "repr": "QueuingStrategy",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "I",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "I"
                          }
                        }
                      ],
                      "typeName": "QueuingStrategy"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "readableStrategy",
                  "optional": true,
                  "tsType": {
                    "repr": "QueuingStrategy",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "O",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "O"
                          }
                        }
                      ],
                      "typeName": "QueuingStrategy"
                    }
                  }
                }
              ],
              "optional": false,
              "returnType": {
                "repr": "TransformStream",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "I",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "I"
                      }
                    },
                    {
                      "repr": "O",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "O"
                      }
                    }
                  ],
                  "typeName": "TransformStream"
                }
              },
              "typeParams": [
                {
                  "name": "I",
                  "default": {
                    "repr": "any",
                    "kind": "keyword",
                    "keyword": "any"
                  }
                },
                {
                  "name": "O",
                  "default": {
                    "repr": "any",
                    "kind": "keyword",
                    "keyword": "any"
                  }
                }
              ]
            }
          ],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "TransformStream",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "TransformStream"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "TransformStreamDefaultController",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6815,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Streams API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "TransformStreamDefaultController",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": null,
          "typeName": "TransformStreamDefaultController"
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "class",
    "name": "MessageEvent",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6847,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Streams API"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "type",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "eventInitDict",
              "optional": true,
              "tsType": {
                "repr": "MessageEventInit",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "MessageEventInit"
                }
              }
            }
          ],
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6860,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": {
            "doc": "Returns the data of the message."
          },
          "tsType": {
            "repr": "T",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "T"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "data",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6851,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the last event ID string, for server-sent events."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "lastEventId",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6855,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns transferred ports."
          },
          "tsType": {
            "repr": "ReadonlyArray",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "MessagePort",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "MessagePort"
                  }
                }
              ],
              "typeName": "ReadonlyArray"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "ports",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6859,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [],
      "extends": "Event",
      "implements": [],
      "typeParams": [
        {
          "name": "T",
          "default": {
            "repr": "any",
            "kind": "keyword",
            "keyword": "any"
          }
        }
      ],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "MessageChannel",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6886,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "The MessageChannel interface of the Channel Messaging API allows us to\ncreate a new message channel and send data through it via its two MessagePort\nproperties.\n",
      "tags": [
        {
          "kind": "category",
          "doc": "DOM APIs"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "name": "constructor",
          "params": [],
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6887,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "tsType": {
            "repr": "MessagePort",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "MessagePort"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "port1",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6888,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "MessagePort",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "MessagePort"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "port2",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6889,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [],
      "extends": null,
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "MessagePort",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6904,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "The MessagePort interface of the Channel Messaging API represents one of the\ntwo ports of a MessageChannel, allowing messages to be sent from one port and\nlistening out for them arriving at the other.\n",
      "tags": [
        {
          "kind": "category",
          "doc": "DOM APIs"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [],
      "properties": [
        {
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "",
                "kind": "parenthesized",
                "parenthesized": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "MessagePort",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "MessagePort"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "MessageEvent",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "MessageEvent"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "onmessage",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6905,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "",
                "kind": "parenthesized",
                "parenthesized": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "MessagePort",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "MessagePort"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "MessageEvent",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "MessageEvent"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "onmessageerror",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6906,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": {
            "doc": "Disconnects the port, so that it is no longer active."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "close",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6910,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Posts a message through the channel. Objects listed in transfer are\ntransferred, not just cloned, meaning that they are no longer usable on the\nsending side.\n\nThrows a \"DataCloneError\" DOMException if transfer contains duplicate\nobjects or port, or if message could not be cloned."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "postMessage",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "message",
                "optional": false,
                "tsType": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              },
              {
                "kind": "identifier",
                "name": "transfer",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "Transferable",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Transferable"
                    }
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6919,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "postMessage",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "message",
                "optional": false,
                "tsType": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "StructuredSerializeOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "StructuredSerializeOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6920,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Begins dispatching messages received on the port. This is implicitly called\nwhen assigning a value to `this.onmessage`."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "start",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6925,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "addEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "K",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "K"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "listener",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "MessagePort",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "MessagePort"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "MessagePortEventMap",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "MessagePortEventMap"
                              }
                            },
                            "indexType": {
                              "repr": "K",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "K"
                              }
                            }
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "AddEventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "AddEventListenerOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": [
              {
                "name": "K",
                "constraint": {
                  "repr": "",
                  "kind": "typeOperator",
                  "typeOperator": {
                    "operator": "keyof",
                    "tsType": {
                      "repr": "MessagePortEventMap",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "MessagePortEventMap"
                      }
                    }
                  }
                }
              }
            ]
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6926,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "addEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "listener",
                "optional": false,
                "tsType": {
                  "repr": "EventListenerOrEventListenerObject",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "EventListenerOrEventListenerObject"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "AddEventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "AddEventListenerOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6931,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "removeEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "K",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "K"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "listener",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "MessagePort",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "MessagePort"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "MessagePortEventMap",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "MessagePortEventMap"
                              }
                            },
                            "indexType": {
                              "repr": "K",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "K"
                              }
                            }
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "EventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "EventListenerOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": [
              {
                "name": "K",
                "constraint": {
                  "repr": "",
                  "kind": "typeOperator",
                  "typeOperator": {
                    "operator": "keyof",
                    "tsType": {
                      "repr": "MessagePortEventMap",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "MessagePortEventMap"
                      }
                    }
                  }
                }
              }
            ]
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6936,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "removeEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "listener",
                "optional": false,
                "tsType": {
                  "repr": "EventListenerOrEventListenerObject",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "EventListenerOrEventListenerObject"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "EventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "EventListenerOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 6941,
            "col": 2
          }
        }
      ],
      "extends": "EventTarget",
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "function",
    "name": "structuredClone",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6975,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "Creates a deep copy of a given value using the structured clone algorithm.\n\nUnlike a shallow copy, a deep copy does not hold the same references as the\nsource object, meaning its properties can be changed without affecting the\nsource. For more details, see\n[MDN](https://developer.mozilla.org/en-US/docs/Glossary/Deep_copy).\n\nThrows a `DataCloneError` if any part of the input value is not\nserializable.\n",
      "tags": [
        {
          "kind": "example",
          "doc": "```ts\nconst object = { x: 0, y: 1 };\n\nconst deepCopy = structuredClone(object);\ndeepCopy.x = 1;\nconsole.log(deepCopy.x, object.x); // 1 0\n\nconst shallowCopy = object;\nshallowCopy.x = 1;\n// shallowCopy.x is pointing to the same location in memory as object.x\nconsole.log(shallowCopy.x, object.x); // 1 1\n```\n"
        },
        {
          "kind": "category",
          "doc": "DOM APIs"
        }
      ]
    },
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "value",
          "optional": false,
          "tsType": {
            "repr": "any",
            "kind": "keyword",
            "keyword": "any"
          }
        },
        {
          "kind": "identifier",
          "name": "options",
          "optional": true,
          "tsType": {
            "repr": "StructuredSerializeOptions",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "StructuredSerializeOptions"
            }
          }
        }
      ],
      "returnType": {
        "repr": "any",
        "kind": "keyword",
        "keyword": "any"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "class",
    "name": "CompressionStream",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 6992,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "An API for compressing a stream of data.\n",
      "tags": [
        {
          "kind": "example",
          "doc": "```ts\nawait Deno.stdin.readable\n  .pipeThrough(new CompressionStream(\"gzip\"))\n  .pipeTo(Deno.stdout.writable);\n```\n"
        },
        {
          "kind": "category",
          "doc": "Compression Streams API"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": {
            "doc": "Creates a new `CompressionStream` object which compresses a stream of\ndata.\n\nThrows a `TypeError` if the format passed to the constructor is not\nsupported."
          },
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "format",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            }
          ],
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7000,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "tsType": {
            "repr": "ReadableStream",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Uint8Array"
                  }
                }
              ],
              "typeName": "ReadableStream"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "readable",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7002,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "WritableStream",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Uint8Array"
                  }
                }
              ],
              "typeName": "WritableStream"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "writable",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7003,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [],
      "extends": null,
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "DecompressionStream",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 7021,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "An API for decompressing a stream of data.\n",
      "tags": [
        {
          "kind": "example",
          "doc": "```ts\nconst input = await Deno.open(\"./file.txt.gz\");\nconst output = await Deno.create(\"./file.txt\");\n\nawait input.readable\n  .pipeThrough(new DecompressionStream(\"gzip\"))\n  .pipeTo(output.writable);\n```\n"
        },
        {
          "kind": "category",
          "doc": "Compression Streams API"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": {
            "doc": "Creates a new `DecompressionStream` object which decompresses a stream of\ndata.\n\nThrows a `TypeError` if the format passed to the constructor is not\nsupported."
          },
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "format",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            }
          ],
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7029,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "tsType": {
            "repr": "ReadableStream",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Uint8Array"
                  }
                }
              ],
              "typeName": "ReadableStream"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "readable",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7031,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "WritableStream",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Uint8Array"
                  }
                }
              ],
              "typeName": "WritableStream"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "writable",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7032,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [],
      "extends": null,
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "function",
    "name": "reportError",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 7052,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "Dispatch an uncaught exception. Similar to a synchronous version of:\n```ts\nsetTimeout(() => { throw error; }, 0);\n```\nThe error can not be caught with a `try/catch` block. An error event will\nbe dispatched to the global scope. You can prevent the error from being\nreported to the console with `Event.prototype.preventDefault()`:\n```ts\naddEventListener(\"error\", (event) => {\n  event.preventDefault();\n});\nreportError(new Error(\"foo\")); // Will not be reported.\n```\nIn Deno, this error will terminate the process if not intercepted like above.\n",
      "tags": [
        {
          "kind": "category",
          "doc": "Web APIs"
        }
      ]
    },
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "error",
          "optional": false,
          "tsType": {
            "repr": "any",
            "kind": "keyword",
            "keyword": "any"
          }
        }
      ],
      "returnType": {
        "repr": "void",
        "kind": "keyword",
        "keyword": "void"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "variable",
    "name": "FormData",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 7103,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Fetch API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [
            {
              "name": "new",
              "kind": "method",
              "params": [],
              "optional": false,
              "returnType": {
                "repr": "FormData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "FormData"
                }
              },
              "typeParams": []
            }
          ],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "FormData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "FormData"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "class",
    "name": "Headers",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 7164,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Fetch API"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "init",
              "optional": true,
              "tsType": {
                "repr": "HeadersInit",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "HeadersInit"
                }
              }
            }
          ],
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7165,
            "col": 2
          }
        }
      ],
      "properties": [],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": {
            "doc": "Appends a new value onto an existing header inside a `Headers` object, or\nadds the header if it does not already exist."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "append",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "value",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7170,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Deletes a header from a `Headers` object."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "delete",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7172,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns an iterator allowing to go through all key/value pairs\ncontained in this Headers object. The both the key and value of each pairs\nare ByteString objects."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "entries",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "IterableIterator",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "",
                    "kind": "tuple",
                    "tuple": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    ]
                  }
                ],
                "typeName": "IterableIterator"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7177,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns a `ByteString` sequence of all the values of a header within a\n`Headers` object with a given name."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "get",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "null",
                  "kind": "keyword",
                  "keyword": "null"
                }
              ]
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7181,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns a boolean stating whether a `Headers` object contains a certain\nheader."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "has",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7185,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns an iterator allowing to go through all keys contained in\nthis Headers object. The keys are ByteString objects."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "keys",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "IterableIterator",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "IterableIterator"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7189,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Sets a new value for an existing header inside a Headers object, or adds\nthe header if it does not already exist."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "set",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "value",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7193,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns an iterator allowing to go through all values contained in\nthis Headers object. The values are ByteString objects."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "values",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "IterableIterator",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "IterableIterator"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7197,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "forEach",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "callbackfn",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "value",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "key",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "parent",
                        "optional": false,
                        "tsType": {
                          "repr": "this",
                          "kind": "this",
                          "this": true
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "thisArg",
                "optional": true,
                "tsType": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7198,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "The Symbol.iterator well-known symbol specifies the default\niterator for this Headers object"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "[Symbol.iterator]",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "IterableIterator",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "",
                    "kind": "tuple",
                    "tuple": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    ]
                  }
                ],
                "typeName": "IterableIterator"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7205,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [
        {
          "repr": "DomIterable",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            ],
            "typeName": "DomIterable"
          }
        }
      ],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "Request",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 7333,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "This Fetch API interface represents a resource request.\n",
      "tags": [
        {
          "kind": "category",
          "doc": "Fetch API"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "input",
              "optional": false,
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "RequestInfo",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "RequestInfo"
                    }
                  },
                  {
                    "repr": "URL",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "URL"
                    }
                  }
                ]
              }
            },
            {
              "kind": "identifier",
              "name": "init",
              "optional": true,
              "tsType": {
                "repr": "RequestInit",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "RequestInit"
                }
              }
            }
          ],
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7334,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": {
            "doc": "Returns the cache mode associated with request, which is a string\nindicating how the request will interact with the browser's cache when\nfetching."
          },
          "tsType": {
            "repr": "RequestCache",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "RequestCache"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "cache",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7341,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the credentials mode associated with request, which is a string\nindicating whether credentials will be sent with the request always, never,\nor only when sent to a same-origin URL."
          },
          "tsType": {
            "repr": "RequestCredentials",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "RequestCredentials"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "credentials",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7347,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the kind of resource requested by request, e.g., \"document\" or \"script\"."
          },
          "tsType": {
            "repr": "RequestDestination",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "RequestDestination"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "destination",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7351,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns a Headers object consisting of the headers associated with request.\nNote that headers added in the network layer by the user agent will not be\naccounted for in this object, e.g., the \"Host\" header."
          },
          "tsType": {
            "repr": "Headers",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Headers"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "headers",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7357,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns request's subresource integrity metadata, which is a cryptographic\nhash of the resource being fetched. Its value consists of multiple hashes\nseparated by whitespace. [SRI]"
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "integrity",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7363,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns a boolean indicating whether or not request is for a history\nnavigation (a.k.a. back-forward navigation)."
          },
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "isHistoryNavigation",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7368,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns a boolean indicating whether or not request is for a reload\nnavigation."
          },
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "isReloadNavigation",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7373,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns a boolean indicating whether or not request can outlive the global\nin which it was created."
          },
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "keepalive",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7378,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns request's HTTP method, which is \"GET\" by default."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7382,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the mode associated with request, which is a string indicating\nwhether the request will use CORS, or will be restricted to same-origin\nURLs."
          },
          "tsType": {
            "repr": "RequestMode",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "RequestMode"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "mode",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7388,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the redirect mode associated with request, which is a string\nindicating how redirects for the request will be handled during fetching. A\nrequest will follow redirects by default."
          },
          "tsType": {
            "repr": "RequestRedirect",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "RequestRedirect"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "redirect",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7394,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the referrer of request. Its value can be a same-origin URL if\nexplicitly set in init, the empty string to indicate no referrer, and\n\"about:client\" when defaulting to the global's default. This is used during\nfetching to determine the value of the `Referer` header of the request\nbeing made."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "referrer",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7402,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the referrer policy associated with request. This is used during\nfetching to compute the value of the request's referrer."
          },
          "tsType": {
            "repr": "ReferrerPolicy",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "ReferrerPolicy"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "referrerPolicy",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7407,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the signal associated with request, which is an AbortSignal object\nindicating whether or not request has been aborted, and its abort event\nhandler."
          },
          "tsType": {
            "repr": "AbortSignal",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "AbortSignal"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "signal",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7413,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the URL of request as a string."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "url",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7417,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "A simple getter used to expose a `ReadableStream` of the body contents."
          },
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "ReadableStream",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "Uint8Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Uint8Array"
                      }
                    }
                  ],
                  "typeName": "ReadableStream"
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "body",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7421,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Stores a `Boolean` that declares whether the body has been used in a\nrequest yet."
          },
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "bodyUsed",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7425,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "clone",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Request",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Request"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7418,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Takes a `Request` stream and reads it to completion. It returns a promise\nthat resolves with an `ArrayBuffer`."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "arrayBuffer",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "ArrayBuffer",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ArrayBuffer"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7429,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Takes a `Request` stream and reads it to completion. It returns a promise\nthat resolves with a `Blob`."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "blob",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "Blob",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Blob"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7433,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Takes a `Request` stream and reads it to completion. It returns a promise\nthat resolves with a `FormData` object."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "formData",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "FormData",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "FormData"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7437,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Takes a `Request` stream and reads it to completion. It returns a promise\nthat resolves with the result of parsing the body text as JSON."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "json",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "any",
                    "kind": "keyword",
                    "keyword": "any"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7441,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Takes a `Request` stream and reads it to completion. It returns a promise\nthat resolves with a `USVString` (text)."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "text",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7445,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [
        {
          "repr": "Body",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "Body"
          }
        }
      ],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "Response",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 7468,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "This Fetch API interface represents the response to a request.\n",
      "tags": [
        {
          "kind": "category",
          "doc": "Fetch API"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "body",
              "optional": true,
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "BodyInit",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "BodyInit"
                    }
                  },
                  {
                    "repr": "null",
                    "kind": "keyword",
                    "keyword": "null"
                  }
                ]
              }
            },
            {
              "kind": "identifier",
              "name": "init",
              "optional": true,
              "tsType": {
                "repr": "ResponseInit",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ResponseInit"
                }
              }
            }
          ],
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7469,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "tsType": {
            "repr": "Headers",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Headers"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "headers",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7474,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "ok",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7475,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "redirected",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7476,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "status",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7477,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "statusText",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7478,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "ResponseType",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "ResponseType"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "type",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7479,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "url",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7480,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "A simple getter used to expose a `ReadableStream` of the body contents."
          },
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "ReadableStream",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "Uint8Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Uint8Array"
                      }
                    }
                  ],
                  "typeName": "ReadableStream"
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "body",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7484,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Stores a `Boolean` that declares whether the body has been used in a\nresponse yet."
          },
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "bodyUsed",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7488,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "json",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": {
                  "repr": "unknown",
                  "kind": "keyword",
                  "keyword": "unknown"
                }
              },
              {
                "kind": "identifier",
                "name": "init",
                "optional": true,
                "tsType": {
                  "repr": "ResponseInit",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ResponseInit"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Response",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Response"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7470,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "error",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Response",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Response"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7471,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "redirect",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "url",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "status",
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "Response",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Response"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7472,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "clone",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Response",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Response"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7481,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Takes a `Response` stream and reads it to completion. It returns a promise\nthat resolves with an `ArrayBuffer`."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "arrayBuffer",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "ArrayBuffer",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ArrayBuffer"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7492,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Takes a `Response` stream and reads it to completion. It returns a promise\nthat resolves with a `Blob`."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "blob",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "Blob",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Blob"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7496,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Takes a `Response` stream and reads it to completion. It returns a promise\nthat resolves with a `FormData` object."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "formData",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "FormData",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "FormData"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7500,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Takes a `Response` stream and reads it to completion. It returns a promise\nthat resolves with the result of parsing the body text as JSON."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "json",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "any",
                    "kind": "keyword",
                    "keyword": "any"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7504,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Takes a `Response` stream and reads it to completion. It returns a promise\nthat resolves with a `USVString` (text)."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "text",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7508,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [
        {
          "repr": "Body",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "Body"
          }
        }
      ],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "function",
    "name": "fetch",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 7524,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "Fetch a resource from the network. It returns a `Promise` that resolves to the\n`Response` to that `Request`, whether it is successful or not.\n\n```ts\nconst response = await fetch(\"http://my.json.host/data.json\");\nconsole.log(response.status);  // e.g. 200\nconsole.log(response.statusText); // e.g. \"OK\"\nconst jsonData = await response.json();\n```\n",
      "tags": [
        {
          "kind": "tags",
          "tags": [
            "allow-net",
            "allow-read"
          ]
        },
        {
          "kind": "category",
          "doc": "Fetch API"
        }
      ]
    },
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "input",
          "optional": false,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "URL",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "URL"
                }
              },
              {
                "repr": "Request",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Request"
                }
              },
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            ]
          }
        },
        {
          "kind": "identifier",
          "name": "init",
          "optional": true,
          "tsType": {
            "repr": "RequestInit",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "RequestInit"
            }
          }
        }
      ],
      "returnType": {
        "repr": "Promise",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": [
            {
              "repr": "Response",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Response"
              }
            }
          ],
          "typeName": "Promise"
        }
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "class",
    "name": "CloseEvent",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 7544,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Web Sockets"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "type",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "eventInitDict",
              "optional": true,
              "tsType": {
                "repr": "CloseEventInit",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "CloseEventInit"
                }
              }
            }
          ],
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7545,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": {
            "doc": "Returns the WebSocket connection close code provided by the server."
          },
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "code",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7549,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the WebSocket connection close reason provided by the server."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "reason",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7553,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns true if the connection closed cleanly; false otherwise."
          },
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "wasClean",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7557,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [],
      "extends": "Event",
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "WebSocket",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 7578,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "Provides the API for creating and managing a WebSocket connection to a\nserver, as well as for sending and receiving data on the connection.\n\nIf you are looking to create a WebSocket server, please take a look at\n`Deno.upgradeWebSocket()`.\n",
      "tags": [
        {
          "kind": "tags",
          "tags": [
            "allow-net"
          ]
        },
        {
          "kind": "category",
          "doc": "Web Sockets"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "url",
              "optional": false,
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "URL",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "URL"
                    }
                  }
                ]
              }
            },
            {
              "kind": "identifier",
              "name": "protocols",
              "optional": true,
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  }
                ]
              }
            }
          ],
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7579,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "CLOSED",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7581,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "CLOSING",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7582,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "CONNECTING",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7583,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "OPEN",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7584,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns a string that indicates how binary data from the WebSocket object is exposed to scripts:\n\nCan be set, to change how binary data is returned. The default is \"blob\"."
          },
          "tsType": {
            "repr": "BinaryType",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "BinaryType"
            }
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "binaryType",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7591,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the number of bytes of application data (UTF-8 text and binary data) that have been queued using send() but not yet been transmitted to the network.\n\nIf the WebSocket connection is closed, this attribute's value will only increase with each call to the send() method. (The number does not reset to zero once the connection closes.)"
          },
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "bufferedAmount",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7597,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the extensions selected by the server, if any."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "extensions",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7601,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "",
                "kind": "parenthesized",
                "parenthesized": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "WebSocket",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "WebSocket"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "CloseEvent",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "CloseEvent"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "onclose",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7602,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "",
                "kind": "parenthesized",
                "parenthesized": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "WebSocket",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "WebSocket"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Event",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Event"
                              }
                            },
                            {
                              "repr": "ErrorEvent",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "ErrorEvent"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "onerror",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7603,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "",
                "kind": "parenthesized",
                "parenthesized": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "WebSocket",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "WebSocket"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "MessageEvent",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "MessageEvent"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "onmessage",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7604,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "",
                "kind": "parenthesized",
                "parenthesized": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "WebSocket",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "WebSocket"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "Event",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Event"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "onopen",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7605,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the subprotocol selected by the server, if any. It can be used in conjunction with the array form of the constructor's second argument to perform subprotocol negotiation."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "protocol",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7609,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the state of the WebSocket object's connection. It can have the values described below."
          },
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "readyState",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7613,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the URL that was used to establish the WebSocket connection."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "url",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7617,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "CLOSED",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7626,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "CLOSING",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7627,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "CONNECTING",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7628,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "OPEN",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7629,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": {
            "doc": "Closes the WebSocket connection, optionally using code as the the WebSocket connection close code and reason as the the WebSocket connection close reason."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "close",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "code",
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "reason",
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7621,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Transmits data using the WebSocket connection. data can be a string, a Blob, an ArrayBuffer, or an ArrayBufferView."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "send",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "ArrayBufferLike",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ArrayBufferLike"
                      }
                    },
                    {
                      "repr": "Blob",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Blob"
                      }
                    },
                    {
                      "repr": "ArrayBufferView",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ArrayBufferView"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7625,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "addEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "K",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "K"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "listener",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "WebSocket",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "WebSocket"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "WebSocketEventMap",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "WebSocketEventMap"
                              }
                            },
                            "indexType": {
                              "repr": "K",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "K"
                              }
                            }
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "AddEventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "AddEventListenerOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": [
              {
                "name": "K",
                "constraint": {
                  "repr": "",
                  "kind": "typeOperator",
                  "typeOperator": {
                    "operator": "keyof",
                    "tsType": {
                      "repr": "WebSocketEventMap",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "WebSocketEventMap"
                      }
                    }
                  }
                }
              }
            ]
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7630,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "addEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "listener",
                "optional": false,
                "tsType": {
                  "repr": "EventListenerOrEventListenerObject",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "EventListenerOrEventListenerObject"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "AddEventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "AddEventListenerOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7635,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "removeEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "K",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "K"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "listener",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "WebSocket",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "WebSocket"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "WebSocketEventMap",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "WebSocketEventMap"
                              }
                            },
                            "indexType": {
                              "repr": "K",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "K"
                              }
                            }
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "EventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "EventListenerOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": [
              {
                "name": "K",
                "constraint": {
                  "repr": "",
                  "kind": "typeOperator",
                  "typeOperator": {
                    "operator": "keyof",
                    "tsType": {
                      "repr": "WebSocketEventMap",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "WebSocketEventMap"
                      }
                    }
                  }
                }
              }
            ]
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7640,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "removeEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "listener",
                "optional": false,
                "tsType": {
                  "repr": "EventListenerOrEventListenerObject",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "EventListenerOrEventListenerObject"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "EventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "EventListenerOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 7645,
            "col": 2
          }
        }
      ],
      "extends": "EventTarget",
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "variable",
    "name": "Storage",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 7699,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Web Storage API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [
            {
              "name": "new",
              "kind": "method",
              "params": [],
              "optional": false,
              "returnType": {
                "repr": "Storage",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Storage"
                }
              },
              "typeParams": []
            }
          ],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "Storage",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Storage"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "crypto",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 7712,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Web Crypto API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "Crypto",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": null,
          "typeName": "Crypto"
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "CryptoKey",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 7915,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Web Crypto API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [
            {
              "name": "new",
              "kind": "method",
              "params": [],
              "optional": false,
              "returnType": {
                "repr": "CryptoKey",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "CryptoKey"
                }
              },
              "typeParams": []
            }
          ],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "CryptoKey",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "CryptoKey"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "CryptoKeyPair",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 7931,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Web Crypto API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [
            {
              "name": "new",
              "kind": "method",
              "params": [],
              "optional": false,
              "returnType": {
                "repr": "CryptoKeyPair",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "CryptoKeyPair"
                }
              },
              "typeParams": []
            }
          ],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "CryptoKeyPair",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "CryptoKeyPair"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "interface",
    "name": "Crypto",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 8075,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Web Crypto API"
        }
      ]
    },
    "interfaceDef": {
      "extends": [],
      "methods": [
        {
          "name": "getRandomValues",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8077,
            "col": 2
          },
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "array",
              "optional": false,
              "tsType": {
                "repr": "T",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "T"
                }
              }
            }
          ],
          "returnType": {
            "repr": "T",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "T"
            }
          },
          "typeParams": [
            {
              "name": "T",
              "constraint": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "Int8Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Int8Array"
                    }
                  },
                  {
                    "repr": "Int16Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Int16Array"
                    }
                  },
                  {
                    "repr": "Int32Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Int32Array"
                    }
                  },
                  {
                    "repr": "Uint8Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Uint8Array"
                    }
                  },
                  {
                    "repr": "Uint16Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Uint16Array"
                    }
                  },
                  {
                    "repr": "Uint32Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Uint32Array"
                    }
                  },
                  {
                    "repr": "Uint8ClampedArray",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Uint8ClampedArray"
                    }
                  },
                  {
                    "repr": "BigInt64Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "BigInt64Array"
                    }
                  },
                  {
                    "repr": "BigUint64Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "BigUint64Array"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "name": "randomUUID",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8091,
            "col": 2
          },
          "optional": false,
          "params": [],
          "returnType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "typeParams": []
        }
      ],
      "properties": [
        {
          "name": "subtle",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8076,
            "col": 2
          },
          "params": [],
          "readonly": true,
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "SubtleCrypto",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "SubtleCrypto"
            }
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "variable",
    "name": "SubtleCrypto",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 8095,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Web Crypto API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [
            {
              "name": "new",
              "kind": "method",
              "params": [],
              "optional": false,
              "returnType": {
                "repr": "SubtleCrypto",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "SubtleCrypto"
                }
              },
              "typeParams": []
            }
          ],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "SubtleCrypto",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "SubtleCrypto"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "BroadcastChannel",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 8154,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Broadcast Channel"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [
            {
              "name": "new",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "name",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "optional": false,
              "returnType": {
                "repr": "BroadcastChannel",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "BroadcastChannel"
                }
              },
              "typeParams": []
            }
          ],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "BroadcastChannel",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "BroadcastChannel"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "namespace",
    "name": "Deno",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 8164,
      "col": 0
    },
    "declarationKind": "declare",
    "namespaceDef": {
      "elements": [
        {
          "kind": "interface",
          "name": "NetAddr",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8166,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "transport",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8167,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "tcp",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "tcp"
                      }
                    },
                    {
                      "repr": "udp",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "udp"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "hostname",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8168,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "port",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8169,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "UnixAddr",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8173,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "transport",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8174,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "unix",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "unix"
                      }
                    },
                    {
                      "repr": "unixpacket",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "unixpacket"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "path",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8175,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "Addr",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8179,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "typeAliasDef": {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "NetAddr",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "NetAddr"
                  }
                },
                {
                  "repr": "UnixAddr",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "UnixAddr"
                  }
                }
              ]
            },
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "Listener",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8185,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "A generic network listener for stream-oriented protocols.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "interfaceDef": {
            "extends": [
              {
                "repr": "AsyncIterable",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "Conn",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Conn"
                      }
                    }
                  ],
                  "typeName": "AsyncIterable"
                }
              }
            ],
            "methods": [
              {
                "name": "accept",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8187,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Waits for and resolves to the next connection to the `Listener`."
                },
                "optional": false,
                "params": [],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Conn",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Conn"
                        }
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "typeParams": []
              },
              {
                "name": "close",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8190,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Close closes the listener. Any pending accept promises will be rejected\nwith errors."
                },
                "optional": false,
                "params": [],
                "returnType": {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                },
                "typeParams": []
              },
              {
                "name": "[Symbol.asyncIterator]",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8197,
                  "col": 4
                },
                "computed": true,
                "optional": false,
                "params": [],
                "returnType": {
                  "repr": "AsyncIterableIterator",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Conn",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Conn"
                        }
                      }
                    ],
                    "typeName": "AsyncIterableIterator"
                  }
                },
                "typeParams": []
              },
              {
                "name": "ref",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8205,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Make the listener block the event loop from finishing.\n\nNote: the listener blocks the event loop from finishing by default.\nThis method is only meaningful after `.unref()` is called."
                },
                "optional": false,
                "params": [],
                "returnType": {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                },
                "typeParams": []
              },
              {
                "name": "unref",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8208,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Make the listener not block the event loop from finishing."
                },
                "optional": false,
                "params": [],
                "returnType": {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                },
                "typeParams": []
              }
            ],
            "properties": [
              {
                "name": "addr",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8192,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Return the address of the `Listener`."
                },
                "params": [],
                "readonly": true,
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Addr",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Addr"
                  }
                },
                "typeParams": []
              },
              {
                "name": "rid",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8195,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Return the rid of the `Listener`."
                },
                "params": [],
                "readonly": true,
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "TlsListener",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8215,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Specialized listener that accepts TLS connections.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "interfaceDef": {
            "extends": [
              {
                "repr": "Listener",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Listener"
                }
              },
              {
                "repr": "AsyncIterable",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "TlsConn",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "TlsConn"
                      }
                    }
                  ],
                  "typeName": "AsyncIterable"
                }
              }
            ],
            "methods": [
              {
                "name": "accept",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8217,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Waits for a TLS client to connect and accepts the connection."
                },
                "optional": false,
                "params": [],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "TlsConn",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "TlsConn"
                        }
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "typeParams": []
              },
              {
                "name": "[Symbol.asyncIterator]",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8218,
                  "col": 4
                },
                "computed": true,
                "optional": false,
                "params": [],
                "returnType": {
                  "repr": "AsyncIterableIterator",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "TlsConn",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "TlsConn"
                        }
                      }
                    ],
                    "typeName": "AsyncIterableIterator"
                  }
                },
                "typeParams": []
              }
            ],
            "properties": [],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "Conn",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8222,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "interfaceDef": {
            "extends": [
              {
                "repr": "Reader",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Reader"
                }
              },
              {
                "repr": "Writer",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Writer"
                }
              },
              {
                "repr": "Closer",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Closer"
                }
              }
            ],
            "methods": [
              {
                "name": "closeWrite",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8231,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Shuts down (`shutdown(2)`) the write side of the connection. Most\ncallers should just use `close()`."
                },
                "optional": false,
                "params": [],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "typeParams": []
              },
              {
                "name": "ref",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8240,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "**UNSTABLE**: New API, yet to be vetted.\n\nMake the connection block the event loop from finishing.\n\nNote: the connection blocks the event loop from finishing by default.\nThis method is only meaningful after `.unref()` is called."
                },
                "optional": false,
                "params": [],
                "returnType": {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                },
                "typeParams": []
              },
              {
                "name": "unref",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8245,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "**UNSTABLE**: New API, yet to be vetted.\n\nMake the connection not block the event loop from finishing."
                },
                "optional": false,
                "params": [],
                "returnType": {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                },
                "typeParams": []
              }
            ],
            "properties": [
              {
                "name": "localAddr",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8224,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The local address of the connection."
                },
                "params": [],
                "readonly": true,
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Addr",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Addr"
                  }
                },
                "typeParams": []
              },
              {
                "name": "remoteAddr",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8226,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The remote address of the connection."
                },
                "params": [],
                "readonly": true,
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Addr",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Addr"
                  }
                },
                "typeParams": []
              },
              {
                "name": "rid",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8228,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The resource ID of the connection."
                },
                "params": [],
                "readonly": true,
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "readable",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8247,
                  "col": 4
                },
                "params": [],
                "readonly": true,
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ReadableStream",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Uint8Array"
                        }
                      }
                    ],
                    "typeName": "ReadableStream"
                  }
                },
                "typeParams": []
              },
              {
                "name": "writable",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8248,
                  "col": 4
                },
                "params": [],
                "readonly": true,
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "WritableStream",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Uint8Array"
                        }
                      }
                    ],
                    "typeName": "WritableStream"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "TlsHandshakeInfo",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8253,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "TlsConn",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8256,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "interfaceDef": {
            "extends": [
              {
                "repr": "Conn",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Conn"
                }
              }
            ],
            "methods": [
              {
                "name": "handshake",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8260,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Runs the client or server handshake protocol to completion if that has\nnot happened yet. Calling this method is optional; the TLS handshake\nwill be completed automatically as soon as data is sent or received."
                },
                "optional": false,
                "params": [],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "TlsHandshakeInfo",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "TlsHandshakeInfo"
                        }
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "typeParams": []
              }
            ],
            "properties": [],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "ListenOptions",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8264,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "port",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8266,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The port to listen on."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "hostname",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8275,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "A literal IP address or host name that can be resolved to an IP address.\n\n__Note about `0.0.0.0`__ While listening `0.0.0.0` works on all platforms,\nthe browsers on Windows don't work with the address `0.0.0.0`.\nYou should show the message like `server running on localhost:8080` instead of\n`server running on 0.0.0.0:8080` if your program supports Windows.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "\"0.0.0.0\""
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "TcpListenOptions",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8280,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "interfaceDef": {
            "extends": [
              {
                "repr": "ListenOptions",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ListenOptions"
                }
              }
            ],
            "methods": [],
            "properties": [],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "listen",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8297,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Listen announces on the local transport address.\n\n```ts\nconst listener1 = Deno.listen({ port: 80 })\nconst listener2 = Deno.listen({ hostname: \"192.0.2.1\", port: 80 })\nconst listener3 = Deno.listen({ hostname: \"[2001:db8::1]\", port: 80 });\nconst listener4 = Deno.listen({ hostname: \"golang.org\", port: 80, transport: \"tcp\" });\n```\n\nRequires `allow-net` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-net"
                ]
              },
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "options",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "intersection",
                  "intersection": [
                    {
                      "repr": "TcpListenOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "TcpListenOptions"
                      }
                    },
                    {
                      "repr": "",
                      "kind": "typeLiteral",
                      "typeLiteral": {
                        "methods": [],
                        "properties": [
                          {
                            "name": "transport",
                            "params": [],
                            "computed": false,
                            "optional": true,
                            "tsType": {
                              "repr": "tcp",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "tcp"
                              }
                            },
                            "typeParams": []
                          }
                        ],
                        "callSignatures": [],
                        "indexSignatures": []
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Listener",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Listener"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "ListenTlsOptions",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8302,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "interfaceDef": {
            "extends": [
              {
                "repr": "TcpListenOptions",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "TcpListenOptions"
                }
              }
            ],
            "methods": [],
            "properties": [
              {
                "name": "key",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8304,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Server private key in PEM format"
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "cert",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8306,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Cert chain in PEM format"
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "certFile",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8313,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Path to a file containing a PEM formatted CA certificate. Requires\n`--allow-read`.\n",
                  "tags": [
                    {
                      "kind": "tags",
                      "tags": [
                        "allow-read"
                      ]
                    },
                    {
                      "kind": "deprecated",
                      "doc": "This option is deprecated and will be removed in Deno 2.0."
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "keyFile",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8319,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Server private key file. Requires `--allow-read`.\n",
                  "tags": [
                    {
                      "kind": "tags",
                      "tags": [
                        "allow-read"
                      ]
                    },
                    {
                      "kind": "deprecated",
                      "doc": "This option is deprecated and will be removed in Deno 2.0."
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "transport",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8321,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "tcp",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "tcp"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "listenTls",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8336,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Listen announces on the local transport address over TLS (transport layer\nsecurity).\n\n```ts\nconst lstnr = Deno.listenTls({ port: 443, certFile: \"./server.crt\", keyFile: \"./server.key\" });\n```\n\nRequires `allow-net` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-net"
                ]
              },
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "options",
                "optional": false,
                "tsType": {
                  "repr": "ListenTlsOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ListenTlsOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "TlsListener",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "TlsListener"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "ConnectOptions",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8339,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "port",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8341,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The port to connect to."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "hostname",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8346,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "A literal IP address or host name that can be resolved to an IP address.\nIf not specified,\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "\"127.0.0.1\""
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "transport",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8347,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "tcp",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "tcp"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "connect",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8366,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Connects to the hostname (default is \"127.0.0.1\") and port on the named\ntransport (default is \"tcp\"), and resolves to the connection (`Conn`).\n\n```ts\nconst conn1 = await Deno.connect({ port: 80 });\nconst conn2 = await Deno.connect({ hostname: \"192.0.2.1\", port: 80 });\nconst conn3 = await Deno.connect({ hostname: \"[2001:db8::1]\", port: 80 });\nconst conn4 = await Deno.connect({ hostname: \"golang.org\", port: 80, transport: \"tcp\" });\n```\n\nRequires `allow-net` permission for \"tcp\".\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-net"
                ]
              },
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "options",
                "optional": false,
                "tsType": {
                  "repr": "ConnectOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ConnectOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "TcpConn",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "TcpConn"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "TcpConn",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8369,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "interfaceDef": {
            "extends": [
              {
                "repr": "Conn",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Conn"
                }
              }
            ],
            "methods": [
              {
                "name": "setNoDelay",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8375,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Enable/disable the use of Nagle's algorithm.\n",
                  "tags": [
                    {
                      "kind": "param",
                      "name": "noDelay",
                      "default": "true"
                    }
                  ]
                },
                "optional": false,
                "params": [
                  {
                    "kind": "identifier",
                    "name": "noDelay",
                    "optional": true,
                    "tsType": {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    }
                  }
                ],
                "returnType": {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                },
                "typeParams": []
              },
              {
                "name": "setKeepAlive",
                "kind": "method",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8377,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Enable/disable keep-alive functionality."
                },
                "optional": false,
                "params": [
                  {
                    "kind": "identifier",
                    "name": "keepAlive",
                    "optional": true,
                    "tsType": {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    }
                  }
                ],
                "returnType": {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                },
                "typeParams": []
              }
            ],
            "properties": [],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "UnixConn",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8382,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "interfaceDef": {
            "extends": [
              {
                "repr": "Conn",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Conn"
                }
              }
            ],
            "methods": [],
            "properties": [],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "ConnectTlsOptions",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8385,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "port",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8387,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "The port to connect to."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "hostname",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8391,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "A literal IP address or host name that can be resolved to an IP address.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "\"127.0.0.1\""
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "certFile",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8398,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "Server certificate file.\n",
                  "tags": [
                    {
                      "kind": "deprecated",
                      "doc": "This option is deprecated and will be removed in a future\nrelease."
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "caCerts",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8403,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "A list of root certificates that will be used in addition to the\ndefault root certificates to verify the peer's certificate.\n\nMust be in PEM format."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "connectTls",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8424,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Establishes a secure connection over TLS (transport layer security) using\nan optional cert file, hostname (default is \"127.0.0.1\") and port.  The\ncert file is optional and if not included Mozilla's root certificates will\nbe used (see also https://github.com/ctz/webpki-roots for specifics)\n\n```ts\nconst caCert = await Deno.readTextFile(\"./certs/my_custom_root_CA.pem\");\nconst conn1 = await Deno.connectTls({ port: 80 });\nconst conn2 = await Deno.connectTls({ caCerts: [caCert], hostname: \"192.0.2.1\", port: 80 });\nconst conn3 = await Deno.connectTls({ hostname: \"[2001:db8::1]\", port: 80 });\nconst conn4 = await Deno.connectTls({ caCerts: [caCert], hostname: \"golang.org\", port: 80});\n```\n\nRequires `allow-net` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-net"
                ]
              },
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "options",
                "optional": false,
                "tsType": {
                  "repr": "ConnectTlsOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ConnectTlsOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "TlsConn",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "TlsConn"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "StartTlsOptions",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8427,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "hostname",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8431,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "A literal IP address or host name that can be resolved to an IP address.\n",
                  "tags": [
                    {
                      "kind": "default",
                      "value": "\"127.0.0.1\""
                    }
                  ]
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "caCerts",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8436,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "A list of root certificates that will be used in addition to the\ndefault root certificates to verify the peer's certificate.\n\nMust be in PEM format."
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "startTls",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8465,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Start TLS handshake from an existing connection using an optional list of\nCA certificates, and hostname (default is \"127.0.0.1\"). Specifying CA certs\nis optional. By default the configured root certificates are used. Using\nthis function requires that the other end of the connection is prepared for\na TLS handshake.\n\nNote that this function *consumes* the TCP connection passed to it, thus the\noriginal TCP connection will be unusable after calling this. Additionally,\nyou need to ensure that the TCP connection is not being used elsewhere when\ncalling this function in order for the TCP connection to be consumed properly.\nFor instance, if there is a `Promise` that is waiting for read operation on\nthe TCP connection to complete, it is considered that the TCP connection is\nbeing used elsewhere. In such a case, this function will fail.\n\n```ts\nconst conn = await Deno.connect({ port: 80, hostname: \"127.0.0.1\" });\nconst caCert = await Deno.readTextFile(\"./certs/my_custom_root_CA.pem\");\n// `conn` becomes unusable after calling `Deno.startTls`\nconst tlsConn = await Deno.startTls(conn, { caCerts: [caCert], hostname: \"localhost\" });\n```\n\nRequires `allow-net` permission.\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-net"
                ]
              },
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "conn",
                "optional": false,
                "tsType": {
                  "repr": "Conn",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Conn"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "StartTlsOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "StartTlsOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "TlsConn",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "TlsConn"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "shutdown",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8482,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "Shutdown socket send operations.\n\nMatches behavior of POSIX shutdown(3).\n\n```ts\nconst listener = Deno.listen({ port: 80 });\nconst conn = await listener.accept();\nDeno.shutdown(conn.rid);\n```\n",
            "tags": [
              {
                "kind": "category",
                "doc": "Network"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        }
      ]
    }
  },
  {
    "kind": "namespace",
    "name": "WebAssembly",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 8500,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "WebAssembly"
        }
      ]
    },
    "namespaceDef": {
      "elements": [
        {
          "kind": "class",
          "name": "CompileError",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8508,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The `WebAssembly.CompileError` object indicates an error during WebAssembly decoding or validation.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/CompileError)\n",
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "classDef": {
            "isAbstract": false,
            "constructors": [
              {
                "jsDoc": {
                  "doc": "Creates a new `WebAssembly.CompileError` object."
                },
                "accessibility": null,
                "name": "constructor",
                "params": [
                  {
                    "kind": "identifier",
                    "name": "message",
                    "optional": true,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "options",
                    "optional": true,
                    "tsType": {
                      "repr": "ErrorOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ErrorOptions"
                      }
                    }
                  }
                ],
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8510,
                  "col": 4
                }
              }
            ],
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "Error",
            "implements": [],
            "typeParams": [],
            "superTypeParams": []
          }
        },
        {
          "kind": "class",
          "name": "Global",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8522,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "A `WebAssembly.Global` object represents a global variable instance, accessible from\nboth JavaScript and importable/exportable across one or more `WebAssembly.Module`\ninstances. This allows dynamic linking of multiple modules.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Global)\n",
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "classDef": {
            "isAbstract": false,
            "constructors": [
              {
                "jsDoc": {
                  "doc": "Creates a new `Global` object."
                },
                "accessibility": null,
                "name": "constructor",
                "params": [
                  {
                    "kind": "identifier",
                    "name": "descriptor",
                    "optional": false,
                    "tsType": {
                      "repr": "GlobalDescriptor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "GlobalDescriptor"
                      }
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "v",
                    "optional": true,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    }
                  }
                ],
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8524,
                  "col": 4
                }
              }
            ],
            "properties": [
              {
                "jsDoc": {
                  "doc": "The value contained inside the global variable — this can be used to directly set\nand get the global's value."
                },
                "tsType": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                },
                "readonly": false,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "value",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8530,
                  "col": 4
                }
              }
            ],
            "indexSignatures": [],
            "methods": [
              {
                "jsDoc": {
                  "doc": "Old-style method that returns the value contained inside the global variable."
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "valueOf",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "any",
                    "kind": "keyword",
                    "keyword": "any"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8533,
                  "col": 4
                }
              }
            ],
            "extends": null,
            "implements": [],
            "typeParams": [],
            "superTypeParams": []
          }
        },
        {
          "kind": "class",
          "name": "Instance",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8545,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "A `WebAssembly.Instance` object is a stateful, executable instance of a `WebAssembly.Module`.\nInstance objects contain all the Exported WebAssembly functions that allow calling into\nWebAssembly code from JavaScript.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance)\n",
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "classDef": {
            "isAbstract": false,
            "constructors": [
              {
                "jsDoc": {
                  "doc": "Creates a new Instance object."
                },
                "accessibility": null,
                "name": "constructor",
                "params": [
                  {
                    "kind": "identifier",
                    "name": "module",
                    "optional": false,
                    "tsType": {
                      "repr": "Module",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Module"
                      }
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "importObject",
                    "optional": true,
                    "tsType": {
                      "repr": "Imports",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Imports"
                      }
                    }
                  }
                ],
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8547,
                  "col": 4
                }
              }
            ],
            "properties": [
              {
                "jsDoc": {
                  "doc": "Returns an object containing as its members all the functions exported from the\nWebAssembly module instance, to allow them to be accessed and used by JavaScript.\nRead-only."
                },
                "tsType": {
                  "repr": "Exports",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Exports"
                  }
                },
                "readonly": true,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "exports",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8554,
                  "col": 4
                }
              }
            ],
            "indexSignatures": [],
            "methods": [],
            "extends": null,
            "implements": [],
            "typeParams": [],
            "superTypeParams": []
          }
        },
        {
          "kind": "class",
          "name": "LinkError",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8565,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The `WebAssembly.LinkError` object indicates an error during module instantiation\n(besides traps from the start function).\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/LinkError)\n",
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "classDef": {
            "isAbstract": false,
            "constructors": [
              {
                "jsDoc": {
                  "doc": "Creates a new WebAssembly.LinkError object."
                },
                "accessibility": null,
                "name": "constructor",
                "params": [
                  {
                    "kind": "identifier",
                    "name": "message",
                    "optional": true,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "options",
                    "optional": true,
                    "tsType": {
                      "repr": "ErrorOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ErrorOptions"
                      }
                    }
                  }
                ],
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8567,
                  "col": 4
                }
              }
            ],
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "Error",
            "implements": [],
            "typeParams": [],
            "superTypeParams": []
          }
        },
        {
          "kind": "class",
          "name": "Memory",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8581,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The `WebAssembly.Memory` object is a resizable `ArrayBuffer` or `SharedArrayBuffer` that\nholds the raw bytes of memory accessed by a WebAssembly Instance.\n\nA memory created by JavaScript or in WebAssembly code will be accessible and mutable\nfrom both JavaScript and WebAssembly.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory)\n",
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "classDef": {
            "isAbstract": false,
            "constructors": [
              {
                "jsDoc": {
                  "doc": "Creates a new `Memory` object."
                },
                "accessibility": null,
                "name": "constructor",
                "params": [
                  {
                    "kind": "identifier",
                    "name": "descriptor",
                    "optional": false,
                    "tsType": {
                      "repr": "MemoryDescriptor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "MemoryDescriptor"
                      }
                    }
                  }
                ],
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8583,
                  "col": 4
                }
              }
            ],
            "properties": [
              {
                "jsDoc": {
                  "doc": "An accessor property that returns the buffer contained in the memory."
                },
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "ArrayBuffer",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ArrayBuffer"
                      }
                    },
                    {
                      "repr": "SharedArrayBuffer",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "SharedArrayBuffer"
                      }
                    }
                  ]
                },
                "readonly": true,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "buffer",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8586,
                  "col": 4
                }
              }
            ],
            "indexSignatures": [],
            "methods": [
              {
                "jsDoc": {
                  "doc": "Increases the size of the memory instance by a specified number of WebAssembly\npages (each one is 64KB in size)."
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "grow",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "delta",
                      "optional": false,
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8592,
                  "col": 4
                }
              }
            ],
            "extends": null,
            "implements": [],
            "typeParams": [],
            "superTypeParams": []
          }
        },
        {
          "kind": "class",
          "name": "Module",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8603,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "A `WebAssembly.Module` object contains stateless WebAssembly code that has already been compiled\nby the browser — this can be efficiently shared with Workers, and instantiated multiple times.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module)\n",
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "classDef": {
            "isAbstract": false,
            "constructors": [
              {
                "jsDoc": {
                  "doc": "Creates a new `Module` object."
                },
                "accessibility": null,
                "name": "constructor",
                "params": [
                  {
                    "kind": "identifier",
                    "name": "bytes",
                    "optional": false,
                    "tsType": {
                      "repr": "BufferSource",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "BufferSource"
                      }
                    }
                  }
                ],
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8605,
                  "col": 4
                }
              }
            ],
            "properties": [],
            "indexSignatures": [],
            "methods": [
              {
                "jsDoc": {
                  "doc": "Given a `Module` and string, returns a copy of the contents of all custom sections in the\nmodule with the given string name."
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": true,
                "name": "customSections",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "moduleObject",
                      "optional": false,
                      "tsType": {
                        "repr": "Module",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Module"
                        }
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "sectionName",
                      "optional": false,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "ArrayBuffer",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ArrayBuffer"
                      }
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8611,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Given a `Module`, returns an array containing descriptions of all the declared exports."
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": true,
                "name": "exports",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "moduleObject",
                      "optional": false,
                      "tsType": {
                        "repr": "Module",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Module"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "ModuleExportDescriptor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ModuleExportDescriptor"
                      }
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8617,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Given a `Module`, returns an array containing descriptions of all the declared imports."
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": true,
                "name": "imports",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "moduleObject",
                      "optional": false,
                      "tsType": {
                        "repr": "Module",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Module"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "ModuleImportDescriptor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ModuleImportDescriptor"
                      }
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8620,
                  "col": 4
                }
              }
            ],
            "extends": null,
            "implements": [],
            "typeParams": [],
            "superTypeParams": []
          }
        },
        {
          "kind": "class",
          "name": "RuntimeError",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8631,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The `WebAssembly.RuntimeError` object is the error type that is thrown whenever WebAssembly\nspecifies a trap.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/RuntimeError)\n",
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "classDef": {
            "isAbstract": false,
            "constructors": [
              {
                "jsDoc": {
                  "doc": "Creates a new `WebAssembly.RuntimeError` object."
                },
                "accessibility": null,
                "name": "constructor",
                "params": [
                  {
                    "kind": "identifier",
                    "name": "message",
                    "optional": true,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "options",
                    "optional": true,
                    "tsType": {
                      "repr": "ErrorOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ErrorOptions"
                      }
                    }
                  }
                ],
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8633,
                  "col": 4
                }
              }
            ],
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "Error",
            "implements": [],
            "typeParams": [],
            "superTypeParams": []
          }
        },
        {
          "kind": "class",
          "name": "Table",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8646,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The `WebAssembly.Table()` object is a JavaScript wrapper object — an array-like structure\nrepresenting a WebAssembly Table, which stores function references. A table created by\nJavaScript or in WebAssembly code will be accessible and mutable from both JavaScript\nand WebAssembly.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table)\n",
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "classDef": {
            "isAbstract": false,
            "constructors": [
              {
                "jsDoc": {
                  "doc": "Creates a new `Table` object."
                },
                "accessibility": null,
                "name": "constructor",
                "params": [
                  {
                    "kind": "identifier",
                    "name": "descriptor",
                    "optional": false,
                    "tsType": {
                      "repr": "TableDescriptor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "TableDescriptor"
                      }
                    }
                  }
                ],
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8648,
                  "col": 4
                }
              }
            ],
            "properties": [
              {
                "jsDoc": {
                  "doc": "Returns the length of the table, i.e. the number of elements."
                },
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "readonly": true,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "length",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8651,
                  "col": 4
                }
              }
            ],
            "indexSignatures": [],
            "methods": [
              {
                "jsDoc": {
                  "doc": "Accessor function — gets the element stored at a given index."
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "get",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "index",
                      "optional": false,
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "Function",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Function"
                        }
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8654,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Increases the size of the `Table` instance by a specified number of elements."
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "grow",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "delta",
                      "optional": false,
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8657,
                  "col": 4
                }
              },
              {
                "jsDoc": {
                  "doc": "Sets an element stored at a given index to a given value."
                },
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "set",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "index",
                      "optional": false,
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "value",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "Function",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Function"
                            }
                          },
                          {
                            "repr": "null",
                            "kind": "keyword",
                            "keyword": "null"
                          }
                        ]
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8660,
                  "col": 4
                }
              }
            ],
            "extends": null,
            "implements": [],
            "typeParams": [],
            "superTypeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "GlobalDescriptor",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8668,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The `GlobalDescriptor` describes the options you can pass to\n`new WebAssembly.Global()`.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "mutable",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8669,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "value",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8670,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ValueType",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ValueType"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "MemoryDescriptor",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8678,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The `MemoryDescriptor` describes the options you can pass to\n`new WebAssembly.Memory()`.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "initial",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8679,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "maximum",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8680,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "shared",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8681,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "ModuleExportDescriptor",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8689,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "A `ModuleExportDescriptor` is the description of a declared export in a\n`WebAssembly.Module`.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "kind",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8690,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ImportExportKind",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ImportExportKind"
                  }
                },
                "typeParams": []
              },
              {
                "name": "name",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8691,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "ModuleImportDescriptor",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8699,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "A `ModuleImportDescriptor` is the description of a declared import in a\n`WebAssembly.Module`.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "kind",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8700,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ImportExportKind",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ImportExportKind"
                  }
                },
                "typeParams": []
              },
              {
                "name": "module",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8701,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "name",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8702,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "TableDescriptor",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8710,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The `TableDescriptor` describes the options you can pass to\n`new WebAssembly.Table()`.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "element",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8711,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "TableKind",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "TableKind"
                  }
                },
                "typeParams": []
              },
              {
                "name": "initial",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8712,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "maximum",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8713,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "WebAssemblyInstantiatedSource",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8720,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The value returned from `WebAssembly.instantiate`.\n",
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "instance",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8722,
                  "col": 4
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Instance",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Instance"
                  }
                },
                "typeParams": []
              },
              {
                "name": "module",
                "location": {
                  "filename": "internal://lib.deno.d.ts",
                  "line": 8728,
                  "col": 4
                },
                "jsDoc": {
                  "doc": "A `WebAssembly.Module` object representing the compiled WebAssembly module.\nThis `Module` can be instantiated again, or shared via postMessage()."
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Module",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Module"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "ImportExportKind",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8732,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "typeAliasDef": {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "function",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "function"
                  }
                },
                {
                  "repr": "global",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "global"
                  }
                },
                {
                  "repr": "memory",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "memory"
                  }
                },
                {
                  "repr": "table",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "table"
                  }
                }
              ]
            },
            "typeParams": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "TableKind",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8734,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "typeAliasDef": {
            "tsType": {
              "repr": "anyfunc",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "anyfunc"
              }
            },
            "typeParams": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "ValueType",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8736,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "typeAliasDef": {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "f32",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "f32"
                  }
                },
                {
                  "repr": "f64",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "f64"
                  }
                },
                {
                  "repr": "i32",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "i32"
                  }
                },
                {
                  "repr": "i64",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "i64"
                  }
                }
              ]
            },
            "typeParams": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "ExportValue",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8738,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "typeAliasDef": {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Function",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Function"
                  }
                },
                {
                  "repr": "Global",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Global"
                  }
                },
                {
                  "repr": "Memory",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Memory"
                  }
                },
                {
                  "repr": "Table",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Table"
                  }
                }
              ]
            },
            "typeParams": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "Exports",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8740,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "typeAliasDef": {
            "tsType": {
              "repr": "Record",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "ExportValue",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ExportValue"
                    }
                  }
                ],
                "typeName": "Record"
              }
            },
            "typeParams": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "ImportValue",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8742,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "typeAliasDef": {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "ExportValue",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ExportValue"
                  }
                },
                {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              ]
            },
            "typeParams": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "ModuleImports",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8744,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "typeAliasDef": {
            "tsType": {
              "repr": "Record",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "ImportValue",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ImportValue"
                    }
                  }
                ],
                "typeName": "Record"
              }
            },
            "typeParams": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "Imports",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8746,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "typeAliasDef": {
            "tsType": {
              "repr": "Record",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "ModuleImports",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ModuleImports"
                    }
                  }
                ],
                "typeName": "Record"
              }
            },
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "compile",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8758,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The `WebAssembly.compile()` function compiles WebAssembly binary code into a\n`WebAssembly.Module` object. This function is useful if it is necessary to compile\na module before it can be instantiated (otherwise, the `WebAssembly.instantiate()`\nfunction should be used).\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compile)\n",
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "bytes",
                "optional": false,
                "tsType": {
                  "repr": "BufferSource",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "BufferSource"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "Module",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Module"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "compileStreaming",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8770,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The `WebAssembly.compileStreaming()` function compiles a `WebAssembly.Module`\ndirectly from a streamed underlying source. This function is useful if it is\nnecessary to a compile a module before it can be instantiated (otherwise, the\n`WebAssembly.instantiateStreaming()` function should be used).\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compileStreaming)\n",
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "source",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Response",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Response"
                      }
                    },
                    {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "Response",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Response"
                            }
                          }
                        ],
                        "typeName": "Promise"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "Module",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Module"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "instantiate",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8787,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The WebAssembly.instantiate() function allows you to compile and instantiate\nWebAssembly code.\n\nThis overload takes the WebAssembly binary code, in the form of a typed\narray or ArrayBuffer, and performs both compilation and instantiation in one step.\nThe returned Promise resolves to both a compiled WebAssembly.Module and its first\nWebAssembly.Instance.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate)\n",
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "bytes",
                "optional": false,
                "tsType": {
                  "repr": "BufferSource",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "BufferSource"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "importObject",
                "optional": true,
                "tsType": {
                  "repr": "Imports",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Imports"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "WebAssemblyInstantiatedSource",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "WebAssemblyInstantiatedSource"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "instantiate",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8804,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The WebAssembly.instantiate() function allows you to compile and instantiate\nWebAssembly code.\n\nThis overload takes an already-compiled WebAssembly.Module and returns\na Promise that resolves to an Instance of that Module. This overload is useful\nif the Module has already been compiled.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate)\n",
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "moduleObject",
                "optional": false,
                "tsType": {
                  "repr": "Module",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Module"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "importObject",
                "optional": true,
                "tsType": {
                  "repr": "Imports",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Imports"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "Instance",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Instance"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "instantiateStreaming",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8818,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The `WebAssembly.instantiateStreaming()` function compiles and instantiates a\nWebAssembly module directly from a streamed underlying source. This is the most\nefficient, optimized way to load wasm code.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiateStreaming)\n",
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "response",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Response",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Response"
                      }
                    },
                    {
                      "repr": "PromiseLike",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "Response",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Response"
                            }
                          }
                        ],
                        "typeName": "PromiseLike"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "importObject",
                "optional": true,
                "tsType": {
                  "repr": "Imports",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Imports"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "WebAssemblyInstantiatedSource",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "WebAssemblyInstantiatedSource"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "validate",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8832,
            "col": 2
          },
          "declarationKind": "export",
          "jsDoc": {
            "doc": "The `WebAssembly.validate()` function validates a given typed array of\nWebAssembly binary code, returning whether the bytes form a valid wasm\nmodule (`true`) or not (`false`).\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/validate)\n",
            "tags": [
              {
                "kind": "category",
                "doc": "WebAssembly"
              }
            ]
          },
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "bytes",
                "optional": false,
                "tsType": {
                  "repr": "BufferSource",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "BufferSource"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        }
      ]
    }
  },
  {
    "kind": "function",
    "name": "setTimeout",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 8844,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "Sets a timer which executes a function once after the delay (in milliseconds) elapses. Returns\nan id which may be used to cancel the timeout.\n\n```ts\nsetTimeout(() => { console.log('hello'); }, 500);\n```\n",
      "tags": [
        {
          "kind": "category",
          "doc": "Timers"
        }
      ]
    },
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "cb",
          "optional": false,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "params": [
                {
                  "kind": "rest",
                  "arg": {
                    "kind": "identifier",
                    "name": "args",
                    "optional": false,
                    "tsType": null
                  },
                  "tsType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    }
                  }
                }
              ],
              "typeParams": []
            }
          }
        },
        {
          "kind": "identifier",
          "name": "delay",
          "optional": true,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          }
        },
        {
          "kind": "rest",
          "arg": {
            "kind": "identifier",
            "name": "args",
            "optional": false,
            "tsType": null
          },
          "tsType": {
            "repr": "",
            "kind": "array",
            "array": {
              "repr": "any",
              "kind": "keyword",
              "keyword": "any"
            }
          }
        }
      ],
      "returnType": {
        "repr": "number",
        "kind": "keyword",
        "keyword": "number"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "function",
    "name": "setInterval",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 8862,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "Repeatedly calls a function , with a fixed time delay between each call.\n\n```ts\n// Outputs 'hello' to the console every 500ms\nsetInterval(() => { console.log('hello'); }, 500);\n```\n",
      "tags": [
        {
          "kind": "category",
          "doc": "Timers"
        }
      ]
    },
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "cb",
          "optional": false,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "params": [
                {
                  "kind": "rest",
                  "arg": {
                    "kind": "identifier",
                    "name": "args",
                    "optional": false,
                    "tsType": null
                  },
                  "tsType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    }
                  }
                }
              ],
              "typeParams": []
            }
          }
        },
        {
          "kind": "identifier",
          "name": "delay",
          "optional": true,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          }
        },
        {
          "kind": "rest",
          "arg": {
            "kind": "identifier",
            "name": "args",
            "optional": false,
            "tsType": null
          },
          "tsType": {
            "repr": "",
            "kind": "array",
            "array": {
              "repr": "any",
              "kind": "keyword",
              "keyword": "any"
            }
          }
        }
      ],
      "returnType": {
        "repr": "number",
        "kind": "keyword",
        "keyword": "number"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "function",
    "name": "clearInterval",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 8882,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "Cancels a timed, repeating action which was previously started by a call\nto `setInterval()`\n\n```ts\nconst id = setInterval(() => {console.log('hello');}, 500);\n// ...\nclearInterval(id);\n```\n",
      "tags": [
        {
          "kind": "category",
          "doc": "Timers"
        }
      ]
    },
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "id",
          "optional": true,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          }
        }
      ],
      "returnType": {
        "repr": "void",
        "kind": "keyword",
        "keyword": "void"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "function",
    "name": "clearTimeout",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 8894,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "Cancels a scheduled action initiated by `setTimeout()`\n\n```ts\nconst id = setTimeout(() => {console.log('hello');}, 500);\n// ...\nclearTimeout(id);\n```\n",
      "tags": [
        {
          "kind": "category",
          "doc": "Timers"
        }
      ]
    },
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "id",
          "optional": true,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          }
        }
      ],
      "returnType": {
        "repr": "void",
        "kind": "keyword",
        "keyword": "void"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "function",
    "name": "queueMicrotask",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 8913,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "A microtask is a short function which is executed after the function or\nmodule which created it exits and only if the JavaScript execution stack is\nempty, but before returning control to the event loop being used to drive the\nscript's execution environment. This event loop may be either the main event\nloop or the event loop driving a web worker.\n\n```ts\nqueueMicrotask(() => { console.log('This event loop stack is complete'); });\n```\n",
      "tags": [
        {
          "kind": "category",
          "doc": "Scheduling"
        }
      ]
    },
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "func",
          "optional": false,
          "tsType": {
            "repr": "VoidFunction",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "VoidFunction"
            }
          }
        }
      ],
      "returnType": {
        "repr": "void",
        "kind": "keyword",
        "keyword": "void"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "function",
    "name": "dispatchEvent",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 8926,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "Dispatches an event in the global scope, synchronously invoking any\nregistered event listeners for this event in the appropriate order. Returns\nfalse if event is cancelable and at least one of the event handlers which\nhandled this event called Event.preventDefault(). Otherwise it returns true.\n\n```ts\ndispatchEvent(new Event('unload'));\n```\n",
      "tags": [
        {
          "kind": "category",
          "doc": "DOM Events"
        }
      ]
    },
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "event",
          "optional": false,
          "tsType": {
            "repr": "Event",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Event"
            }
          }
        }
      ],
      "returnType": {
        "repr": "boolean",
        "kind": "keyword",
        "keyword": "boolean"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "variable",
    "name": "console",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 8943,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Console and Debugging"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "Console",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": null,
          "typeName": "Console"
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "class",
    "name": "ErrorEvent",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 8955,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "DOM Events"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "type",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "eventInitDict",
              "optional": true,
              "tsType": {
                "repr": "ErrorEventInit",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ErrorEventInit"
                }
              }
            }
          ],
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8961,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "message",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8956,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "filename",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8957,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "lineno",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8958,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "colno",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8959,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "any",
            "kind": "keyword",
            "keyword": "any"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "error",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8960,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [],
      "extends": "Event",
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "PromiseRejectionEvent",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 8971,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Observability"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "type",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "eventInitDict",
              "optional": true,
              "tsType": {
                "repr": "PromiseRejectionEventInit",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "PromiseRejectionEventInit"
                }
              }
            }
          ],
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8974,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "tsType": {
            "repr": "Promise",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              ],
              "typeName": "Promise"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "promise",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8972,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "any",
            "kind": "keyword",
            "keyword": "any"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "reason",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8973,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [],
      "extends": "Event",
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "Worker",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 8995,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Web Workers"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "specifier",
              "optional": false,
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "URL",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "URL"
                    }
                  }
                ]
              }
            },
            {
              "kind": "identifier",
              "name": "options",
              "optional": true,
              "tsType": {
                "repr": "WorkerOptions",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "WorkerOptions"
                }
              }
            }
          ],
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8999,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "e",
                  "optional": false,
                  "tsType": {
                    "repr": "ErrorEvent",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ErrorEvent"
                    }
                  }
                }
              ],
              "typeParams": []
            }
          },
          "readonly": false,
          "accessibility": null,
          "optional": true,
          "isAbstract": false,
          "isStatic": false,
          "name": "onerror",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8996,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "e",
                  "optional": false,
                  "tsType": {
                    "repr": "MessageEvent",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "MessageEvent"
                    }
                  }
                }
              ],
              "typeParams": []
            }
          },
          "readonly": false,
          "accessibility": null,
          "optional": true,
          "isAbstract": false,
          "isStatic": false,
          "name": "onmessage",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8997,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "e",
                  "optional": false,
                  "tsType": {
                    "repr": "MessageEvent",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "MessageEvent"
                    }
                  }
                }
              ],
              "typeParams": []
            }
          },
          "readonly": false,
          "accessibility": null,
          "optional": true,
          "isAbstract": false,
          "isStatic": false,
          "name": "onmessageerror",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 8998,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "postMessage",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "message",
                "optional": false,
                "tsType": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              },
              {
                "kind": "identifier",
                "name": "transfer",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "Transferable",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Transferable"
                    }
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9003,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "postMessage",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "message",
                "optional": false,
                "tsType": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "StructuredSerializeOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "StructuredSerializeOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9004,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "addEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "K",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "K"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "listener",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "Worker",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Worker"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "WorkerEventMap",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "WorkerEventMap"
                              }
                            },
                            "indexType": {
                              "repr": "K",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "K"
                              }
                            }
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "AddEventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "AddEventListenerOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": [
              {
                "name": "K",
                "constraint": {
                  "repr": "",
                  "kind": "typeOperator",
                  "typeOperator": {
                    "operator": "keyof",
                    "tsType": {
                      "repr": "WorkerEventMap",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "WorkerEventMap"
                      }
                    }
                  }
                }
              }
            ]
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9005,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "addEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "listener",
                "optional": false,
                "tsType": {
                  "repr": "EventListenerOrEventListenerObject",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "EventListenerOrEventListenerObject"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "AddEventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "AddEventListenerOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9010,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "removeEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "K",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "K"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "listener",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "Worker",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Worker"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "WorkerEventMap",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "WorkerEventMap"
                              }
                            },
                            "indexType": {
                              "repr": "K",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "K"
                              }
                            }
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "EventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "EventListenerOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": [
              {
                "name": "K",
                "constraint": {
                  "repr": "",
                  "kind": "typeOperator",
                  "typeOperator": {
                    "operator": "keyof",
                    "tsType": {
                      "repr": "WorkerEventMap",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "WorkerEventMap"
                      }
                    }
                  }
                }
              }
            ]
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9015,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "removeEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "listener",
                "optional": false,
                "tsType": {
                  "repr": "EventListenerOrEventListenerObject",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "EventListenerOrEventListenerObject"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "EventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "EventListenerOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9020,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "terminate",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9025,
            "col": 2
          }
        }
      ],
      "extends": "EventTarget",
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "typeAlias",
    "name": "PerformanceEntryList",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9029,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Performance"
        }
      ]
    },
    "typeAliasDef": {
      "tsType": {
        "repr": "",
        "kind": "array",
        "array": {
          "repr": "PerformanceEntry",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "PerformanceEntry"
          }
        }
      },
      "typeParams": []
    }
  },
  {
    "kind": "class",
    "name": "Performance",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9032,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Performance"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "name": "constructor",
          "params": [],
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9035,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": {
            "doc": "Returns a timestamp representing the start of the performance measurement."
          },
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "timeOrigin",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9034,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": {
            "doc": "Removes the stored timestamp with the associated name."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "clearMarks",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "markName",
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9038,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Removes stored timestamp with the associated name."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "clearMeasures",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "measureName",
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9041,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getEntries",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "PerformanceEntryList",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "PerformanceEntryList"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9043,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getEntriesByName",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "type",
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "PerformanceEntryList",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "PerformanceEntryList"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9044,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getEntriesByType",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "PerformanceEntryList",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "PerformanceEntryList"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9045,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Stores a timestamp with the associated name (a \"mark\")."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "mark",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "markName",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "PerformanceMarkOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "PerformanceMarkOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "PerformanceMark",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "PerformanceMark"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9048,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Stores the `DOMHighResTimeStamp` duration between two marks along with the\nassociated name (a \"measure\")."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "measure",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "measureName",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "PerformanceMeasureOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "PerformanceMeasureOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "PerformanceMeasure",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "PerformanceMeasure"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9052,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Stores the `DOMHighResTimeStamp` duration between two marks along with the\nassociated name (a \"measure\")."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "measure",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "measureName",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "startMark",
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "endMark",
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "PerformanceMeasure",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "PerformanceMeasure"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9058,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns a current time from Deno's start in milliseconds.\n\nUse the permission flag `--allow-hrtime` return a precise value.\n\n```ts\nconst t = performance.now();\nconsole.log(`${t} ms since start!`);\n```\n",
            "tags": [
              {
                "kind": "tags",
                "tags": [
                  "allow-hrtime"
                ]
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "now",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "number",
              "kind": "keyword",
              "keyword": "number"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9075,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns a JSON representation of the performance object."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "toJSON",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "any",
              "kind": "keyword",
              "keyword": "any"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9078,
            "col": 2
          }
        }
      ],
      "extends": "EventTarget",
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "variable",
    "name": "performance",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9082,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Performance"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "Performance",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": null,
          "typeName": "Performance"
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "interface",
    "name": "PerformanceMarkOptions",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9085,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Performance"
        }
      ]
    },
    "interfaceDef": {
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "detail",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9087,
            "col": 2
          },
          "jsDoc": {
            "doc": "Metadata to be included in the mark."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "any",
            "kind": "keyword",
            "keyword": "any"
          },
          "typeParams": []
        },
        {
          "name": "startTime",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9090,
            "col": 2
          },
          "jsDoc": {
            "doc": "Timestamp to be used as the mark time."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "interface",
    "name": "PerformanceMeasureOptions",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9093,
      "col": 0
    },
    "declarationKind": "declare",
    "interfaceDef": {
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "detail",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9095,
            "col": 2
          },
          "jsDoc": {
            "doc": "Metadata to be included in the measure."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "any",
            "kind": "keyword",
            "keyword": "any"
          },
          "typeParams": []
        },
        {
          "name": "start",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9099,
            "col": 2
          },
          "jsDoc": {
            "doc": "Timestamp to be used as the start time or string to be used as start\nmark."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "number",
                "kind": "keyword",
                "keyword": "number"
              }
            ]
          },
          "typeParams": []
        },
        {
          "name": "duration",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9102,
            "col": 2
          },
          "jsDoc": {
            "doc": "Duration between the start and end times."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "typeParams": []
        },
        {
          "name": "end",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9105,
            "col": 2
          },
          "jsDoc": {
            "doc": "Timestamp to be used as the end time or string to be used as end mark."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "number",
                "kind": "keyword",
                "keyword": "number"
              }
            ]
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "class",
    "name": "PerformanceEntry",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9115,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "Encapsulates a single performance metric that is part of the performance\ntimeline. A performance entry can be directly created by making a performance\nmark or measure (for example by calling the `.mark()` method) at an explicit\npoint in an application.\n",
      "tags": [
        {
          "kind": "category",
          "doc": "Performance"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [],
      "properties": [
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "duration",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9116,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "entryType",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9117,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "name",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9118,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "startTime",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9119,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "toJSON",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "any",
              "kind": "keyword",
              "keyword": "any"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9120,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "PerformanceMark",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9130,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "`PerformanceMark` is an abstract interface for `PerformanceEntry` objects\nwith an entryType of `\"mark\"`. Entries of this type are created by calling\n`performance.mark()` to add a named `DOMHighResTimeStamp` (the mark) to the\nperformance timeline.\n",
      "tags": [
        {
          "kind": "category",
          "doc": "Performance"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "name",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "options",
              "optional": true,
              "tsType": {
                "repr": "PerformanceMarkOptions",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "PerformanceMarkOptions"
                }
              }
            }
          ],
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9133,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "tsType": {
            "repr": "any",
            "kind": "keyword",
            "keyword": "any"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "detail",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9131,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "mark",
            "kind": "literal",
            "literal": {
              "kind": "string",
              "string": "mark"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "entryType",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9132,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [],
      "extends": "PerformanceEntry",
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "PerformanceMeasure",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9143,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "`PerformanceMeasure` is an abstract interface for `PerformanceEntry` objects\nwith an entryType of `\"measure\"`. Entries of this type are created by calling\n`performance.measure()` to add a named `DOMHighResTimeStamp` (the measure)\nbetween two marks to the performance timeline.\n",
      "tags": [
        {
          "kind": "category",
          "doc": "Performance"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [],
      "properties": [
        {
          "tsType": {
            "repr": "any",
            "kind": "keyword",
            "keyword": "any"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "detail",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9144,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "measure",
            "kind": "literal",
            "literal": {
              "kind": "string",
              "string": "measure"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "entryType",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9145,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [],
      "extends": "PerformanceEntry",
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "interface",
    "name": "CustomEventInit",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9149,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "DOM Events"
        }
      ]
    },
    "interfaceDef": {
      "extends": [
        {
          "repr": "EventInit",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "EventInit"
          }
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "detail",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9150,
            "col": 2
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "T",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "T"
            }
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": [
        {
          "name": "T",
          "default": {
            "repr": "any",
            "kind": "keyword",
            "keyword": "any"
          }
        }
      ]
    }
  },
  {
    "kind": "class",
    "name": "CustomEvent",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9154,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "DOM Events"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "typeArg",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "eventInitDict",
              "optional": true,
              "tsType": {
                "repr": "CustomEventInit",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "T",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "T"
                      }
                    }
                  ],
                  "typeName": "CustomEventInit"
                }
              }
            }
          ],
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9155,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": {
            "doc": "Returns any custom data event was created with. Typically used for\nsynthetic events."
          },
          "tsType": {
            "repr": "T",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "T"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "detail",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9158,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [],
      "extends": "Event",
      "implements": [],
      "typeParams": [
        {
          "name": "T",
          "default": {
            "repr": "any",
            "kind": "keyword",
            "keyword": "any"
          }
        }
      ],
      "superTypeParams": []
    }
  },
  {
    "kind": "variable",
    "name": "caches",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9177,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Cache API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "CacheStorage",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": null,
          "typeName": "CacheStorage"
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "interface",
    "name": "CacheStorage",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9180,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Cache API"
        }
      ]
    },
    "interfaceDef": {
      "extends": [],
      "methods": [
        {
          "name": "open",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9182,
            "col": 2
          },
          "jsDoc": {
            "doc": "Open a cache storage for the provided name."
          },
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "cacheName",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            }
          ],
          "returnType": {
            "repr": "Promise",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "Cache",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Cache"
                  }
                }
              ],
              "typeName": "Promise"
            }
          },
          "typeParams": []
        },
        {
          "name": "has",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9184,
            "col": 2
          },
          "jsDoc": {
            "doc": "Check if cache already exists for the provided name."
          },
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "cacheName",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            }
          ],
          "returnType": {
            "repr": "Promise",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              ],
              "typeName": "Promise"
            }
          },
          "typeParams": []
        },
        {
          "name": "delete",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9186,
            "col": 2
          },
          "jsDoc": {
            "doc": "Delete cache storage for the provided name."
          },
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "cacheName",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            }
          ],
          "returnType": {
            "repr": "Promise",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              ],
              "typeName": "Promise"
            }
          },
          "typeParams": []
        }
      ],
      "properties": [],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "interface",
    "name": "Cache",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9190,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Cache API"
        }
      ]
    },
    "interfaceDef": {
      "extends": [],
      "methods": [
        {
          "name": "put",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9198,
            "col": 2
          },
          "jsDoc": {
            "doc": "Put the provided request/response into the cache.\n\nHow is the API different from browsers?\n1. You cannot match cache objects using by relative paths.\n2. You cannot pass options like `ignoreVary`, `ignoreMethod`, `ignoreSearch`."
          },
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "request",
              "optional": false,
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "RequestInfo",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "RequestInfo"
                    }
                  },
                  {
                    "repr": "URL",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "URL"
                    }
                  }
                ]
              }
            },
            {
              "kind": "identifier",
              "name": "response",
              "optional": false,
              "tsType": {
                "repr": "Response",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Response"
                }
              }
            }
          ],
          "returnType": {
            "repr": "Promise",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                }
              ],
              "typeName": "Promise"
            }
          },
          "typeParams": []
        },
        {
          "name": "match",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9206,
            "col": 2
          },
          "jsDoc": {
            "doc": "Return cache object matching the provided request.\n\nHow is the API different from browsers?\n1. You cannot match cache objects using by relative paths.\n2. You cannot pass options like `ignoreVary`, `ignoreMethod`, `ignoreSearch`."
          },
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "request",
              "optional": false,
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "RequestInfo",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "RequestInfo"
                    }
                  },
                  {
                    "repr": "URL",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "URL"
                    }
                  }
                ]
              }
            },
            {
              "kind": "identifier",
              "name": "options",
              "optional": true,
              "tsType": {
                "repr": "CacheQueryOptions",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "CacheQueryOptions"
                }
              }
            }
          ],
          "returnType": {
            "repr": "Promise",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Response",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Response"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                }
              ],
              "typeName": "Promise"
            }
          },
          "typeParams": []
        },
        {
          "name": "delete",
          "kind": "method",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9217,
            "col": 2
          },
          "jsDoc": {
            "doc": "Delete cache object matching the provided request.\n\nHow is the API different from browsers?\n1. You cannot delete cache objects using by relative paths.\n2. You cannot pass options like `ignoreVary`, `ignoreMethod`, `ignoreSearch`."
          },
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "request",
              "optional": false,
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "RequestInfo",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "RequestInfo"
                    }
                  },
                  {
                    "repr": "URL",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "URL"
                    }
                  }
                ]
              }
            },
            {
              "kind": "identifier",
              "name": "options",
              "optional": true,
              "tsType": {
                "repr": "CacheQueryOptions",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "CacheQueryOptions"
                }
              }
            }
          ],
          "returnType": {
            "repr": "Promise",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              ],
              "typeName": "Promise"
            }
          },
          "typeParams": []
        }
      ],
      "properties": [],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "variable",
    "name": "Cache",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9224,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Cache API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [
            {
              "name": "new",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "name",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "optional": false,
              "returnType": {
                "repr": "Cache",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Cache"
                }
              },
              "typeParams": []
            }
          ],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "Cache",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Cache"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "CacheStorage",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9230,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Cache API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [
            {
              "name": "new",
              "kind": "method",
              "params": [],
              "optional": false,
              "returnType": {
                "repr": "CacheStorage",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "CacheStorage"
                }
              },
              "typeParams": []
            }
          ],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "CacheStorage",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "CacheStorage"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "class",
    "name": "Window",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9258,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Web APIs"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [],
      "properties": [
        {
          "tsType": {
            "repr": "",
            "kind": "intersection",
            "intersection": [
              {
                "repr": "Window",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Window"
                }
              },
              {
                "repr": "globalThis",
                "kind": "typeQuery",
                "typeQuery": "globalThis"
              }
            ]
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "window",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9260,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "",
            "kind": "intersection",
            "intersection": [
              {
                "repr": "Window",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Window"
                }
              },
              {
                "repr": "globalThis",
                "kind": "typeQuery",
                "typeQuery": "globalThis"
              }
            ]
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "self",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9261,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "",
                "kind": "parenthesized",
                "parenthesized": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "Window",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Window"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "ErrorEvent",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "ErrorEvent"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "onerror",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9262,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "",
                "kind": "parenthesized",
                "parenthesized": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "Window",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Window"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "Event",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Event"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "onload",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9263,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "",
                "kind": "parenthesized",
                "parenthesized": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "Window",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Window"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "Event",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Event"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "onbeforeunload",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9264,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "",
                "kind": "parenthesized",
                "parenthesized": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "Window",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Window"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "Event",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Event"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "onunload",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9265,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "",
                "kind": "parenthesized",
                "parenthesized": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "Window",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Window"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "PromiseRejectionEvent",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "PromiseRejectionEvent"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "onunhandledrejection",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9266,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "params": [],
              "typeParams": []
            }
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "close",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9269,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "closed",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9270,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "message",
                  "optional": true,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "typeParams": []
            }
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "alert",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9271,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "boolean",
                "kind": "keyword",
                "keyword": "boolean"
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "message",
                  "optional": true,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "typeParams": []
            }
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "confirm",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9272,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "null",
                    "kind": "keyword",
                    "keyword": "null"
                  }
                ]
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "message",
                  "optional": true,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "defaultValue",
                  "optional": true,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "typeParams": []
            }
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "prompt",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9273,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "Deno",
            "kind": "typeQuery",
            "typeQuery": "Deno"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "Deno",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9274,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "Navigator",
            "kind": "typeQuery",
            "typeQuery": "Navigator"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "Navigator",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9275,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "Navigator",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Navigator"
            }
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "navigator",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9276,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "Location",
            "kind": "typeQuery",
            "typeQuery": "Location"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "Location",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9277,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "Location",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Location"
            }
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "location",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9278,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "Storage",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Storage"
            }
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "localStorage",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9279,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "Storage",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Storage"
            }
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "sessionStorage",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9280,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "CacheStorage",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "CacheStorage"
            }
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "caches",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9281,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "new",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Window",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Window"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9259,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "addEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "K",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "K"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "listener",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "Window",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Window"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "WindowEventMap",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "WindowEventMap"
                              }
                            },
                            "indexType": {
                              "repr": "K",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "K"
                              }
                            }
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "AddEventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "AddEventListenerOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": [
              {
                "name": "K",
                "constraint": {
                  "repr": "",
                  "kind": "typeOperator",
                  "typeOperator": {
                    "operator": "keyof",
                    "tsType": {
                      "repr": "WindowEventMap",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "WindowEventMap"
                      }
                    }
                  }
                }
              }
            ]
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9283,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "addEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "listener",
                "optional": false,
                "tsType": {
                  "repr": "EventListenerOrEventListenerObject",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "EventListenerOrEventListenerObject"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "AddEventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "AddEventListenerOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9291,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "removeEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "K",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "K"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "listener",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "Window",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Window"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "WindowEventMap",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "WindowEventMap"
                              }
                            },
                            "indexType": {
                              "repr": "K",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "K"
                              }
                            }
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "EventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "EventListenerOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": [
              {
                "name": "K",
                "constraint": {
                  "repr": "",
                  "kind": "typeOperator",
                  "typeOperator": {
                    "operator": "keyof",
                    "tsType": {
                      "repr": "WindowEventMap",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "WindowEventMap"
                      }
                    }
                  }
                }
              }
            ]
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9296,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "removeEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "listener",
                "optional": false,
                "tsType": {
                  "repr": "EventListenerOrEventListenerObject",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "EventListenerOrEventListenerObject"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "EventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "EventListenerOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9304,
            "col": 2
          }
        }
      ],
      "extends": "EventTarget",
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "variable",
    "name": "window",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9312,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Web APIs"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "intersection",
        "intersection": [
          {
            "repr": "Window",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Window"
            }
          },
          {
            "repr": "globalThis",
            "kind": "typeQuery",
            "typeQuery": "globalThis"
          }
        ]
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "self",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9314,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Web APIs"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "intersection",
        "intersection": [
          {
            "repr": "Window",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Window"
            }
          },
          {
            "repr": "globalThis",
            "kind": "typeQuery",
            "typeQuery": "globalThis"
          }
        ]
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "onerror",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9316,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "DOM Events"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "union",
        "union": [
          {
            "repr": "",
            "kind": "parenthesized",
            "parenthesized": {
              "repr": "",
              "kind": "fnOrConstructor",
              "fnOrConstructor": {
                "constructor": false,
                "tsType": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                },
                "params": [
                  {
                    "kind": "identifier",
                    "name": "this",
                    "optional": false,
                    "tsType": {
                      "repr": "Window",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Window"
                      }
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "ev",
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorEvent",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ErrorEvent"
                      }
                    }
                  }
                ],
                "typeParams": []
              }
            }
          },
          {
            "repr": "null",
            "kind": "keyword",
            "keyword": "null"
          }
        ]
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "onload",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9318,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "DOM Events"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "union",
        "union": [
          {
            "repr": "",
            "kind": "parenthesized",
            "parenthesized": {
              "repr": "",
              "kind": "fnOrConstructor",
              "fnOrConstructor": {
                "constructor": false,
                "tsType": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                },
                "params": [
                  {
                    "kind": "identifier",
                    "name": "this",
                    "optional": false,
                    "tsType": {
                      "repr": "Window",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Window"
                      }
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "ev",
                    "optional": false,
                    "tsType": {
                      "repr": "Event",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Event"
                      }
                    }
                  }
                ],
                "typeParams": []
              }
            }
          },
          {
            "repr": "null",
            "kind": "keyword",
            "keyword": "null"
          }
        ]
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "onbeforeunload",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9320,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "DOM Events"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "union",
        "union": [
          {
            "repr": "",
            "kind": "parenthesized",
            "parenthesized": {
              "repr": "",
              "kind": "fnOrConstructor",
              "fnOrConstructor": {
                "constructor": false,
                "tsType": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                },
                "params": [
                  {
                    "kind": "identifier",
                    "name": "this",
                    "optional": false,
                    "tsType": {
                      "repr": "Window",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Window"
                      }
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "ev",
                    "optional": false,
                    "tsType": {
                      "repr": "Event",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Event"
                      }
                    }
                  }
                ],
                "typeParams": []
              }
            }
          },
          {
            "repr": "null",
            "kind": "keyword",
            "keyword": "null"
          }
        ]
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "onunload",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9322,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "DOM Events"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "union",
        "union": [
          {
            "repr": "",
            "kind": "parenthesized",
            "parenthesized": {
              "repr": "",
              "kind": "fnOrConstructor",
              "fnOrConstructor": {
                "constructor": false,
                "tsType": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                },
                "params": [
                  {
                    "kind": "identifier",
                    "name": "this",
                    "optional": false,
                    "tsType": {
                      "repr": "Window",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Window"
                      }
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "ev",
                    "optional": false,
                    "tsType": {
                      "repr": "Event",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Event"
                      }
                    }
                  }
                ],
                "typeParams": []
              }
            }
          },
          {
            "repr": "null",
            "kind": "keyword",
            "keyword": "null"
          }
        ]
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "onunhandledrejection",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9324,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Observability"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "union",
        "union": [
          {
            "repr": "",
            "kind": "parenthesized",
            "parenthesized": {
              "repr": "",
              "kind": "fnOrConstructor",
              "fnOrConstructor": {
                "constructor": false,
                "tsType": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                },
                "params": [
                  {
                    "kind": "identifier",
                    "name": "this",
                    "optional": false,
                    "tsType": {
                      "repr": "Window",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Window"
                      }
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "ev",
                    "optional": false,
                    "tsType": {
                      "repr": "PromiseRejectionEvent",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "PromiseRejectionEvent"
                      }
                    }
                  }
                ],
                "typeParams": []
              }
            }
          },
          {
            "repr": "null",
            "kind": "keyword",
            "keyword": "null"
          }
        ]
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "localStorage",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9328,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Web Storage API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "Storage",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": null,
          "typeName": "Storage"
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "sessionStorage",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9330,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Web Storage API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "Storage",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": null,
          "typeName": "Storage"
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "caches",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9332,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Cache API"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "CacheStorage",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": null,
          "typeName": "CacheStorage"
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "class",
    "name": "Navigator",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9335,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Web APIs"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "name": "constructor",
          "params": [],
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9336,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "hardwareConcurrency",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9337,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "userAgent",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9338,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "language",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9339,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "",
            "kind": "array",
            "array": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "languages",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9340,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [],
      "extends": null,
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "variable",
    "name": "navigator",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9344,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Web APIs"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "Navigator",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": null,
          "typeName": "Navigator"
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "function",
    "name": "alert",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9355,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "Shows the given message and waits for the enter key pressed.\n\nIf the stdin is not interactive, it does nothing.\n",
      "tags": [
        {
          "kind": "category",
          "doc": "Web APIs\n"
        },
        {
          "kind": "param",
          "name": "message"
        }
      ]
    },
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "message",
          "optional": true,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          }
        }
      ],
      "returnType": {
        "repr": "void",
        "kind": "keyword",
        "keyword": "void"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "function",
    "name": "confirm",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9368,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "Shows the given message and waits for the answer. Returns the user's answer as boolean.\n\nOnly `y` and `Y` are considered as true.\n\nIf the stdin is not interactive, it returns false.\n",
      "tags": [
        {
          "kind": "category",
          "doc": "Web APIs\n"
        },
        {
          "kind": "param",
          "name": "message"
        }
      ]
    },
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "message",
          "optional": true,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          }
        }
      ],
      "returnType": {
        "repr": "boolean",
        "kind": "keyword",
        "keyword": "boolean"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "function",
    "name": "prompt",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9385,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "Shows the given message and waits for the user's input. Returns the user's input as string.\n\nIf the default value is given and the user inputs the empty string, then it returns the given\ndefault value.\n\nIf the default value is not given and the user inputs the empty string, it returns null.\n\nIf the stdin is not interactive, it returns null.\n",
      "tags": [
        {
          "kind": "category",
          "doc": "Web APIs\n"
        },
        {
          "kind": "param",
          "name": "message"
        },
        {
          "kind": "param",
          "name": "defaultValue"
        }
      ]
    },
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "message",
          "optional": true,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          }
        },
        {
          "kind": "identifier",
          "name": "defaultValue",
          "optional": true,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          }
        }
      ],
      "returnType": {
        "repr": "",
        "kind": "union",
        "union": [
          {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          {
            "repr": "null",
            "kind": "keyword",
            "keyword": "null"
          }
        ]
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "function",
    "name": "addEventListener",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9398,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "Registers an event listener in the global scope, which will be called\nsynchronously whenever the event `type` is dispatched.\n\n```ts\naddEventListener('unload', () => { console.log('All finished!'); });\n...\ndispatchEvent(new Event('unload'));\n```\n",
      "tags": [
        {
          "kind": "category",
          "doc": "DOM Events"
        }
      ]
    },
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "type",
          "optional": false,
          "tsType": {
            "repr": "K",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "K"
            }
          }
        },
        {
          "kind": "identifier",
          "name": "listener",
          "optional": false,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "any",
                "kind": "keyword",
                "keyword": "any"
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "this",
                  "optional": false,
                  "tsType": {
                    "repr": "Window",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Window"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "ev",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "indexedAccess",
                    "indexedAccess": {
                      "readonly": false,
                      "objType": {
                        "repr": "WindowEventMap",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "WindowEventMap"
                        }
                      },
                      "indexType": {
                        "repr": "K",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "K"
                        }
                      }
                    }
                  }
                }
              ],
              "typeParams": []
            }
          }
        },
        {
          "kind": "identifier",
          "name": "options",
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "boolean",
                "kind": "keyword",
                "keyword": "boolean"
              },
              {
                "repr": "AddEventListenerOptions",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "AddEventListenerOptions"
                }
              }
            ]
          }
        }
      ],
      "returnType": {
        "repr": "void",
        "kind": "keyword",
        "keyword": "void"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": [
        {
          "name": "K",
          "constraint": {
            "repr": "",
            "kind": "typeOperator",
            "typeOperator": {
              "operator": "keyof",
              "tsType": {
                "repr": "WindowEventMap",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "WindowEventMap"
                }
              }
            }
          }
        }
      ]
    }
  },
  {
    "kind": "function",
    "name": "addEventListener",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9406,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "DOM Events"
        }
      ]
    },
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "type",
          "optional": false,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          }
        },
        {
          "kind": "identifier",
          "name": "listener",
          "optional": false,
          "tsType": {
            "repr": "EventListenerOrEventListenerObject",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "EventListenerOrEventListenerObject"
            }
          }
        },
        {
          "kind": "identifier",
          "name": "options",
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "boolean",
                "kind": "keyword",
                "keyword": "boolean"
              },
              {
                "repr": "AddEventListenerOptions",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "AddEventListenerOptions"
                }
              }
            ]
          }
        }
      ],
      "returnType": {
        "repr": "void",
        "kind": "keyword",
        "keyword": "void"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "function",
    "name": "removeEventListener",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9422,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "Remove a previously registered event listener from the global scope\n\n```ts\nconst listener = () => { console.log('hello'); };\naddEventListener('load', listener);\nremoveEventListener('load', listener);\n```\n",
      "tags": [
        {
          "kind": "category",
          "doc": "DOM Events"
        }
      ]
    },
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "type",
          "optional": false,
          "tsType": {
            "repr": "K",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "K"
            }
          }
        },
        {
          "kind": "identifier",
          "name": "listener",
          "optional": false,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "any",
                "kind": "keyword",
                "keyword": "any"
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "this",
                  "optional": false,
                  "tsType": {
                    "repr": "Window",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Window"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "ev",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "indexedAccess",
                    "indexedAccess": {
                      "readonly": false,
                      "objType": {
                        "repr": "WindowEventMap",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "WindowEventMap"
                        }
                      },
                      "indexType": {
                        "repr": "K",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "K"
                        }
                      }
                    }
                  }
                }
              ],
              "typeParams": []
            }
          }
        },
        {
          "kind": "identifier",
          "name": "options",
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "boolean",
                "kind": "keyword",
                "keyword": "boolean"
              },
              {
                "repr": "EventListenerOptions",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "EventListenerOptions"
                }
              }
            ]
          }
        }
      ],
      "returnType": {
        "repr": "void",
        "kind": "keyword",
        "keyword": "void"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": [
        {
          "name": "K",
          "constraint": {
            "repr": "",
            "kind": "typeOperator",
            "typeOperator": {
              "operator": "keyof",
              "tsType": {
                "repr": "WindowEventMap",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "WindowEventMap"
                }
              }
            }
          }
        }
      ]
    }
  },
  {
    "kind": "function",
    "name": "removeEventListener",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9429,
      "col": 0
    },
    "declarationKind": "declare",
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "type",
          "optional": false,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          }
        },
        {
          "kind": "identifier",
          "name": "listener",
          "optional": false,
          "tsType": {
            "repr": "EventListenerOrEventListenerObject",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "EventListenerOrEventListenerObject"
            }
          }
        },
        {
          "kind": "identifier",
          "name": "options",
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "boolean",
                "kind": "keyword",
                "keyword": "boolean"
              },
              {
                "repr": "EventListenerOptions",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "EventListenerOptions"
                }
              }
            ]
          }
        }
      ],
      "returnType": {
        "repr": "void",
        "kind": "keyword",
        "keyword": "void"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "class",
    "name": "Location",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9443,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "doc": "The location (URL) of the object it is linked to. Changes done on it are\nreflected on the object it relates to. Accessible via\n`globalThis.location`.\n",
      "tags": [
        {
          "kind": "category",
          "doc": "Web APIs"
        }
      ]
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "name": "constructor",
          "params": [],
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9444,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": {
            "doc": "Returns a DOMStringList object listing the origins of the ancestor\nbrowsing contexts, from the parent browsing context to the top-level\nbrowsing context.\n\nAlways empty in Deno."
          },
          "tsType": {
            "repr": "DOMStringList",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "DOMStringList"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "ancestorOrigins",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9450,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the Location object's URL's fragment (includes leading \"#\" if\nnon-empty).\n\nCannot be set in Deno."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "hash",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9455,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the Location object's URL's host and port (if different from the\ndefault port for the scheme).\n\nCannot be set in Deno."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "host",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9460,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the Location object's URL's host.\n\nCannot be set in Deno."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "hostname",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9464,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the Location object's URL.\n\nCannot be set in Deno."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "href",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9468,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the Location object's URL's origin."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "origin",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9471,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the Location object's URL's path.\n\nCannot be set in Deno."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "pathname",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9475,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the Location object's URL's port.\n\nCannot be set in Deno."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "port",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9479,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the Location object's URL's scheme.\n\nCannot be set in Deno."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "protocol",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9483,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the Location object's URL's query (includes leading \"?\" if\nnon-empty).\n\nCannot be set in Deno."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "search",
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9488,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "toString",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9469,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Navigates to the given URL.\n\nCannot be set in Deno."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "assign",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "url",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9492,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Reloads the current page.\n\nDisabled in Deno."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "reload",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9496,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "tags": [
              {
                "kind": "deprecated"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "reload",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "forcedReload",
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9498,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Removes the current page from the session history and navigates to the\ngiven URL.\n\nDisabled in Deno."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "replace",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "url",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "internal://lib.deno.d.ts",
            "line": 9503,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "variable",
    "name": "location",
    "location": {
      "filename": "internal://lib.deno.d.ts",
      "line": 9509,
      "col": 0
    },
    "declarationKind": "declare",
    "jsDoc": {
      "tags": [
        {
          "kind": "category",
          "doc": "Web APIs"
        }
      ]
    },
    "variableDef": {
      "tsType": {
        "repr": "Location",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": null,
          "typeName": "Location"
        }
      },
      "kind": "var"
    }
  }
]
